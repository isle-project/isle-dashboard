{"version":3,"file":"static/js/main.89a820c8.js","mappings":"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","sources":["actions/authentication.js","actions/cohort.js","actions/lesson.js","actions/notification.js","actions/settings.js","actions/user.js","components/async/spinner.js","components/async/index.js","constants/action_types.js","constants/server.js","helpers/axios.js","helpers/i18n.js","reducers/admin.js","reducers/badges.js","reducers/cohorts.js","reducers/namespace.js","reducers/notification.js","reducers/translations.js","reducers/settings.js","reducers/gallery.js","reducers/search.js","reducers/user.js","reducers/index.js","containers/notification.js","containers/app.js","service_worker.js","index.js"],"sourcesContent":["/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport axios from 'axios';\nimport logger from 'debug';\nimport server from 'constants/server';\nimport { addErrorNotification } from 'actions/notification.js';\nimport { loggedIn, receivedToken } from 'actions/user';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle-dashboard:actions:authentication' );\n\n\n// FUNCTIONS //\n\n/**\n * Sanitizes the user object.\n *\n * @param {Object} user - user object\n * @returns {Array} sanitized user object and a boolean indicating whether the user object needs sanitizing on the server\n */\nconst sanitizeUser = ( user ) => {\n\t// Check for duplicated enrolled and owned namespaces:\n\tconst ownedNamespaces = user.ownedNamespaces;\n\tconst newOwnedNamespaces = [];\n\tlet ids = new Set();\n\tfor ( let i = 0; i < ownedNamespaces.length; i++ ) {\n\t\tif ( !ids.has( ownedNamespaces[ i ]._id ) ) {\n\t\t\tids.add( ownedNamespaces[ i ]._id );\n\t\t\tnewOwnedNamespaces.push( ownedNamespaces[ i ] );\n\t\t}\n\t}\n\tconst enrolledNamespaces = user.enrolledNamespaces;\n\tconst newEnrolledNamespaces = [];\n\tids = new Set();\n\tfor ( let i = 0; i < enrolledNamespaces.length; i++ ) {\n\t\tif ( !ids.has( enrolledNamespaces[ i ]._id ) ) {\n\t\t\tids.add( enrolledNamespaces[ i ]._id );\n\t\t\tnewEnrolledNamespaces.push( enrolledNamespaces[ i ] );\n\t\t}\n\t}\n\tconst needsSanitizing = newOwnedNamespaces.length !== ownedNamespaces.length ||\n\t\tnewEnrolledNamespaces.length !== enrolledNamespaces.length;\n\n\tif ( needsSanitizing ) {\n\t\tuser.ownedNamespaces = newOwnedNamespaces;\n\t\tuser.enrolledNamespaces = newEnrolledNamespaces;\n\t}\n\tdebug( 'Does user need sanitizing? '+needsSanitizing );\n\treturn [ user, needsSanitizing ];\n};\n\n\n// MAIN //\n\n/**\n * Makes a POST request to the server to sanitize the user.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} user - user object\n * @returns {(Promise|null)} promise or null\n */\nexport const sanitizeRequest = ( dispatch, user ) => {\n\ttry {\n\t\treturn axios.post( server+'/sanitize_user', {\n\t\t\tid: user.id\n\t\t});\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn null;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to sanitize the user with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to sanitize the user\n */\nexport const sanitizeRequestInjector = dispatch => {\n\treturn async ( user ) => {\n\t\tconst result = await sanitizeRequest( dispatch, user );\n\t\treturn result;\n\t};\n};\n\n/**\n * Makes a POST request to the server to fetch the user's credentials.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} obj - object with a `id` property and a `token` property\n * @returns {(Object|null)} user object or null\n */\nexport const fetchCredentials = async ( dispatch, obj ) => {\n\tdebug( 'Fetch user credentials...' );\n\tlocalStorage.setItem( 'ISLE_USER_'+server, JSON.stringify( obj ) );\n\ttry {\n\t\tconst res = await axios.post( server+'/credentials_dashboard', {\n\t\t\tid: obj.id\n\t\t});\n\t\tlet user = res.data;\n\t\tif ( user.picture ) {\n\t\t\tuser.picture = server + '/avatar/' + user.picture;\n\t\t}\n\t\tuser = {\n\t\t\t...obj,\n\t\t\t...user\n\t\t};\n\t\tlet [ sanitizedUser, needsSanitizing ] = sanitizeUser( user );\n\t\tdispatch( loggedIn( user ) );\n\t\tif ( needsSanitizing ) {\n\t\t\tsanitizeRequest( dispatch, obj );\n\t\t}\n\t\treturn sanitizedUser;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn null;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to fetch the user's credentials with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to fetch the user's credentials\n */\nexport const fetchCredentialsInjector = dispatch => {\n\treturn async ( obj ) => {\n\t\tconst result = await fetchCredentials( dispatch, obj );\n\t\treturn result;\n\t};\n};\n\n/**\n * Makes a POST request to authenticate the user via Shibboleth.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} shibboleth - shibboleth object\n * @param {string} shibboleth.eppn - user EPPN\n * @param {string} shibboleth.affil - user affiliation\n * @param {string} shibboleth.time - time of authentication\n * @param {string} shibboleth.salt - salt\n * @param {string} shibboleth.token - token\n * @returns {(Object|null)} user object or null\n */\nexport const shibboleth = async ( dispatch, { eppn, name, affil, time, salt, token }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/shibboleth', {\n\t\t\teppn, name, affil, time, salt, token\n\t\t});\n\t\tdispatch( receivedToken( res.data ) );\n\t\treturn res;\n\t}\n\tcatch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn null;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to authenticate the user via Shibboleth with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to authenticate the user via Shibboleth\n */\nexport const shibbolethInjector = dispatch => {\n\treturn async ({ eppn, name, affil, time, salt, token }) => {\n\t\tconst result = await shibboleth( dispatch, { eppn, name, affil, time, salt, token } );\n\t\treturn result;\n\t};\n};\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React from 'react';\nimport axios from 'axios';\nimport qs from 'querystring';\nimport logger from 'debug';\nimport i18next from 'i18next';\nimport server from 'constants/server';\nimport { getLessons } from 'actions/lesson';\nimport { addNotification, addErrorNotification } from 'actions/notification';\nimport { ADD_ENROLLED_NAMESPACE, GET_ALL_COHORTS, RETRIEVED_COHORTS, RETRIEVED_ENROLLABLE_COHORTS } from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle-dashboard:actions:cohorts' );\n\n\n// MAIN //\n\n/**\n * Returns an action for a new enrolled namespace.\n *\n * @param {Object} namespace - namespace object\n * @param {string} namespace._id - namespace ID\n * @param {string} namespace.title - namespace title\n * @param {string} namespace.description - namespace description\n * @param {Array} namespace.owners - namespace owners\n * @returns {Object} action\n */\nexport function addEnrolledNamespace({ title, owners, description, _id }) {\n\treturn {\n\t\ttype: ADD_ENROLLED_NAMESPACE,\n\t\tpayload: {\n\t\t\ttitle,\n\t\t\tdescription,\n\t\t\towners,\n\t\t\t_id\n\t\t}\n\t};\n}\n\n/**\n * Returns an action for retrieving all enrollable cohorts.\n *\n * @param {Array} cohorts - cohorts\n * @param {Object} user - user object\n * @returns {Object} action\n */\nexport function retrievedEnrollableCohorts( cohorts, user ) {\n\treturn {\n\t\ttype: RETRIEVED_ENROLLABLE_COHORTS,\n\t\tpayload: {\n\t\t\tcohorts,\n\t\t\tuser\n\t\t}\n\t};\n}\n\n/**\n * Returns an action for retrieved cohorts.\n *\n * @param {Array} cohorts - cohorts\n * @param {Object} user - user object\n * @returns {Object} action\n */\nexport function retrievedCohorts( cohorts, user ) {\n\treturn {\n\t\ttype: RETRIEVED_COHORTS,\n\t\tpayload: {\n\t\t\tcohorts,\n\t\t\tuser\n\t\t}\n\t};\n}\n\n/**\n * Returns an action for retrieving all cohorts.\n *\n * @param {Array} cohorts - cohorts\n * @returns {Object} action\n */\nexport function retrievedAllCohorts( cohorts ) {\n\treturn {\n\t\ttype: GET_ALL_COHORTS,\n\t\tpayload: {\n\t\t\tcohorts\n\t\t}\n\t};\n}\n\n\n// EXPORTS //\n\n/**\n * Makes a GET request for retrieving all enrollable cohorts.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} user - user object\n */\nexport const getEnrollableCohorts = async ( dispatch, user ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_enrollable_cohorts' );\n\t\tconst cohorts = res.data.cohorts;\n\t\tdebug( 'Retrieved '+cohorts.length+' cohorts...' );\n\t\tdispatch( retrievedEnrollableCohorts( cohorts, user ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function making a GET request for retrieving all enrollable cohorts with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make GET request for retrieving all enrollable cohorts\n */\nexport const getEnrollableCohortsInjector = dispatch => {\n\treturn async ( user ) => {\n\t\tawait getEnrollableCohorts( dispatch, user );\n\t};\n};\n\n/**\n * Makes a GET request for retrieving all cohorts for the selected course.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.namespaceID - course ID\n */\nexport const getCohorts = async ( dispatch, { namespaceID }) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_cohorts?'+qs.stringify({ namespaceID }) );\n\t\tdispatch( retrievedCohorts( res.data.cohorts ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function making a GET request for retrieving all cohorts for the selected course with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make GET request for retrieving all cohorts for the selected course\n */\nexport const getCohortsInjector = ( dispatch ) => {\n\treturn async ({ namespaceID, userToken }) => {\n\t\tawait getCohorts( dispatch, { namespaceID, userToken });\n\t};\n};\n\n/**\n * Makes a POST request for adding the user to the selected cohort.\n *\n * @param {Function} dispatch - dispatch function\n * @param {string} cohortID - cohort ID\n * @param {Object} namespace - namespace object\n */\nexport const addUserToCohort = async ( dispatch, cohortID, namespace ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/add_to_cohort', { cohortID });\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( addEnrolledNamespace( namespace ) );\n\t\tconst namespaceName = namespace.title;\n\t\tgetLessons( dispatch, namespaceName );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function making a POST request for adding the user to the selected cohort with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make POST request for adding the user to the selected cohort\n */\nexport const addUserToCohortInjector = ( dispatch ) => {\n\treturn async ( cohortID, namespace ) => {\n\t\tawait addUserToCohort( dispatch, cohortID, namespace );\n\t};\n};\n\n/**\n * Makes a POST request for deleting the selected cohort.\n *\n * @param {Function} dispatch - dispatch function\n * @param {string} _id - cohort ID\n * @param {string} namespaceID - namespace identifier corresponding to the cohort\n */\nexport const deleteCohort = async ( dispatch, _id, namespaceID ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/delete_cohort', { _id });\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( retrievedEnrollableCohorts( null ) );\n\t\tif ( namespaceID ) {\n\t\t\tgetCohorts( dispatch, {\n\t\t\t\tnamespaceID\n\t\t\t});\n\t\t}\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function making a POST request for deleting the selected cohort with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make POST request for deleting the selected cohort\n */\nexport const deleteCohortInjector = ( dispatch ) => {\n\treturn async ( _id, namespaceID ) => {\n\t\tawait deleteCohort( dispatch, _id, namespaceID );\n\t};\n};\n\n/**\n * Makes a POST request for creating a new cohort.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} cohort - cohort object\n * @param {string} namespaceID - namespace identifier corresponding to the cohort\n */\nexport const createCohort = async ( dispatch, cohort, namespaceID ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/create_cohort', cohort );\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( retrievedEnrollableCohorts( null ) );\n\t\tgetCohorts( dispatch, { namespaceID });\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function making a POST request for creating a new cohort with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make POST request for creating a new cohort\n */\nexport const createCohortInjector = ( dispatch ) => {\n\treturn async ( cohort, namespaceID ) => {\n\t\tawait createCohort( dispatch, cohort, namespaceID );\n\t};\n};\n\n/**\n * Makes a POST request for updating the selected cohort.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} cohort - cohort object\n * @param {string} namespaceID - namespace identifier corresponding to the cohort\n */\nexport const updateCohort = async ( dispatch, cohort, namespaceID ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/update_cohort', { cohort });\n\t\tlet msg = res.data.message;\n\t\tlet notification;\n\t\tif ( res.data.newEmails && res.data.newEmails.length > 0 ) {\n\t\t\tnotification = {\n\t\t\t\tchildren: <div>\n\t\t\t\t\t<p>{msg}</p>\n\t\t\t\t\t<p>{i18next.t('common:email-invitations-sent')}</p>\n\t\t\t\t\t<p>{res.data.newEmails.join( '\\n' )}</p>\n\t\t\t\t</div>,\n\t\t\t\tlevel: 'success',\n\t\t\t\tautoDismiss: 0,\n\t\t\t\tdismissible: 'button'\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tnotification = {\n\t\t\t\tmessage: msg,\n\t\t\t\tlevel: 'success'\n\t\t\t};\n\t\t}\n\t\taddNotification( dispatch, notification );\n\t\tdispatch( retrievedEnrollableCohorts( null ) );\n\t\tgetCohorts( dispatch, { namespaceID });\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function making a POST request for updating the selected cohort with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make POST request for updating the selected cohort\n */\nexport const updateCohortInjector = ( dispatch ) => {\n\treturn async ( cohort, namespaceID ) => {\n\t\tawait updateCohort( dispatch, cohort, namespaceID );\n\t};\n};\n\n/**\n * Makes a POST request for retrieving the list of cohorts.\n *\n * @param {Function} dispatch - dispatch function\n */\nexport const getAllCohorts = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_all_cohorts' );\n\t\tdispatch( retrievedAllCohorts( res.data.cohorts ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function making a POST request for retrieving the list of all cohorts with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make POST request for retrieving the list of all cohorts\n */\nexport const getAllCohortsInjector = ( dispatch ) => {\n\treturn async () => {\n\t\tawait getAllCohorts( dispatch );\n\t};\n};\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport axios from 'axios';\nimport qs from 'querystring';\nimport server from 'constants/server';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport { addNotification, addErrorNotification } from 'actions/notification';\nimport { DELETED_LESSON, GET_ALL_LESSONS, GET_TEMPLATE_LESSONS, GET_ROOMS, UPDATED_LESSON, RETRIEVED_LESSONS, RETRIEVED_PUBLIC_LESSONS } from 'constants/action_types.js';\n\n\n// EXPORTS //\n\n/**\n * Returns an action signifying a lesson has been deleted.\n *\n * @param {string} lessonName - name of the lesson\n * @returns {Object} action\n */\nexport function deletedLesson( lessonName ) {\n\treturn {\n\t\ttype: DELETED_LESSON,\n\t\tpayload: {\n\t\t\tlessonName\n\t\t}\n\t};\n}\n\n/**\n * Returns an action indicating that a lesson has been updated.\n *\n * @param {string} lessonName - name of the lesson\n * @param {Object} props - properties of the lesson\n * @returns {Object} action\n */\nexport function updatedLesson( lessonName, props ) {\n\treturn {\n\t\ttype: UPDATED_LESSON,\n\t\tpayload: {\n\t\t\tlessonName,\n\t\t\tprops\n\t\t}\n\t};\n}\n\n/**\n * Returns an action indicating that lessons have been retrieved.\n *\n * @param {Array} lessons - lessons\n * @param {string} namespaceName - namespace name\n * @returns {Object} action\n */\nexport function retrievedLessons({ lessons, namespaceName }) {\n\treturn {\n\t\ttype: RETRIEVED_LESSONS,\n\t\tpayload: {\n\t\t\tlessons,\n\t\t\tnamespaceName\n\t\t}\n\t};\n}\n\n/**\n * Returns an action indicating that all lessons have been retrieved for an admin user.\n *\n * @param {Array} lessons - lessons\n * @returns {Object} action\n */\nexport function retrievedAllLessons( lessons ) {\n\treturn {\n\t\ttype: GET_ALL_LESSONS,\n\t\tpayload: {\n\t\t\tlessons\n\t\t}\n\t};\n}\n\n/**\n * Returns an action indicating that all lessons that may serve as templates have been retrieved.\n *\n * @param {Array} templateLessons - lessons that may serve as templates\n * @returns {Object} action\n */\nexport function retrievedTemplateLessons( templateLessons ) {\n\treturn {\n\t\ttype: GET_TEMPLATE_LESSONS,\n\t\tpayload: {\n\t\t\ttemplateLessons\n\t\t}\n\t};\n}\n\n/**\n * Returns an action indicating that all chat rooms have been retrieved.\n *\n * @param {Array} rooms - chat rooms\n * @returns {Object} action\n */\nexport function retrievedRooms( rooms ) {\n\treturn {\n\t\ttype: GET_ROOMS,\n\t\tpayload: {\n\t\t\trooms\n\t\t}\n\t};\n}\n\n/**\n * Returns an action indicating that all public lessons have been retrieved.\n *\n * @param {Array} lessons - lessons\n * @returns {Object} action\n */\nexport function retrievedPublicLessons( lessons ) {\n\treturn {\n\t\ttype: RETRIEVED_PUBLIC_LESSONS,\n\t\tpayload: {\n\t\t\tlessons\n\t\t}\n\t};\n}\n\n/**\n * Makes a POST request to retrieve all public lessons.\n *\n * @param {Function} dispatch - dispatch function\n */\nexport const getPublicLessons = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_public_lessons' );\n\t\tdispatch( retrievedPublicLessons( res.data.lessons ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to retrieve all public lessons.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to retrieve all public lessons\n */\nexport const getPublicLessonsInjector = ( dispatch ) => {\n\treturn async () => {\n\t\tawait getPublicLessons( dispatch );\n\t};\n};\n\n/**\n * Makes a GET request to retrieve the ISLE file for a lesson.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.lessonName - name of the lesson\n * @param {string} options.namespaceName - namespace name\n * @returns {(Object|null)} file data or null if the file does not exist\n */\nexport const getIsleFile = async ( dispatch, { lessonName, namespaceName }) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_isle_file?'+qs.stringify({\n\t\t\tlessonName,\n\t\t\tnamespaceName\n\t\t}) );\n\t\treturn res.data;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn null;\n\t}\n};\n\n/**\n * Returns a function to make a GET request to retrieve the ISLE file for a lesson.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to retrieve the ISLE file for a lesson\n */\nexport const getIsleFileInjector = ( dispatch ) => {\n\treturn async ({ lessonName, namespaceName }) => {\n\t\tconst file = await getIsleFile( dispatch, { lessonName, namespaceName });\n\t\treturn file;\n\t};\n};\n\n/**\n * Makes a GET request to retrieve all lessons for a given namespace.\n *\n * @param {Function} dispatch - dispatch function\n * @param {string} namespaceName - namespace name\n */\nexport const getLessons = async ( dispatch, namespaceName ) => {\n\tif ( namespaceName ) {\n\t\ttry {\n\t\t\tconst res = await axios.get( server+'/get_lessons?'+qs.stringify({\n\t\t\t\tnamespaceName\n\t\t\t}) );\n\t\t\tlet lessons = res.data.lessons;\n\t\t\tlessons = lessons.map(( lesson, index ) => {\n\t\t\t\tlesson.colorIndex = index % 20;\n\t\t\t\tlesson.url = server+'/'+namespaceName+'/'+lesson.title;\n\t\t\t\tif ( lesson.lockUntil ) {\n\t\t\t\t\tlesson.lockUntil = new Date( lesson.lockUntil.time );\n\t\t\t\t}\n\t\t\t\tif ( !lesson.createdAt ) {\n\t\t\t\t\tlesson.createdAt = new Date( 0 ).toLocaleString();\n\t\t\t\t}\n\t\t\t\tif ( !lesson.updatedAt ) {\n\t\t\t\t\tlesson.updatedAt = lesson.createdAt;\n\t\t\t\t}\n\t\t\t\treturn lesson;\n\t\t\t});\n\t\t\tdispatch( retrievedLessons({ lessons, namespaceName }) );\n\t\t} catch ( err ) {\n\t\t\taddErrorNotification( dispatch, err );\n\t\t}\n\t}\n};\n\n/**\n * Returns a function to make a GET request to retrieve all lessons for a given namespace.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to retrieve all lessons for a given namespace\n */\nexport const getLessonsInjector = ( dispatch ) => {\n\treturn async ( namespaceName ) => {\n\t\tawait getLessons( dispatch, namespaceName );\n\t};\n};\n\n/**\n * Makes a POST request to copy a lesson from a source namespace to a target namespace.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.sourceName - source lesson name\n * @param {string} options.targetName - target lesson name\n * @param {string} options.source - source namespace name\n * @param {string} options.target - target namespace name\n * @returns {(Object|Error)} response data or an error if encountered\n */\nexport const copyLesson = async ( dispatch, { sourceName, target, targetName, source }) => {\n\tif ( sourceName && target && source ) {\n\t\ttry {\n\t\t\tconst res = await axios.post( server+'/copy_lesson', {\n\t\t\t\ttarget,\n\t\t\t\tsource,\n\t\t\t\tsourceName,\n\t\t\t\ttargetName\n\t\t\t});\n\t\t\taddNotification( dispatch, {\n\t\t\t\tmessage: res.data.message,\n\t\t\t\tlevel: 'success'\n\t\t\t});\n\t\t\treturn res;\n\t\t} catch ( err ) {\n\t\t\taddErrorNotification( dispatch, err );\n\t\t\treturn err;\n\t\t}\n\t}\n};\n\n/**\n * Returns a function to make a POST request to copy a lesson from a source namespace to a target namespace.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to copy a lesson from a source namespace to a target namespace\n */\nexport const copyLessonInjector = ( dispatch ) => {\n\treturn async ({ sourceName, target, targetName, source }) => {\n\t\tawait copyLesson( dispatch, { sourceName, target, targetName, source } );\n\t};\n};\n\n/**\n * Makes a POST request to copy all lessons from a source namespace to a target namespace.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.source - source namespace name\n * @param {string} options.target - target namespace name\n * @returns {(Object|Error)} response data or an error if encountered\n */\nexport const copyNamespaceLessons = async ( dispatch, { target, source }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/copy_namespace_lessons', {\n\t\t\ttarget,\n\t\t\tsource\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\treturn res;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn err;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to copy all lessons from a source namespace to a target namespace.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to copy all lessons from a source namespace to a target namespace\n */\nexport const copyNamespaceLessonsInjector = ( dispatch ) => {\n\treturn async ({ target, source }) => {\n\t\tconst res = await copyNamespaceLessons( dispatch, { target, source } );\n\t\treturn res;\n\t};\n};\n\n/**\n * Makes a POST request to delete a lesson.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.lessonName - lesson name\n * @param {string} options.namespaceName - namespace name\n * @returns {(Object|Error)} response data or an error if encountered\n */\nexport const deleteLesson = async ( dispatch, { lessonName, namespaceName }) => {\n\tif ( !namespaceName || !lessonName ) {\n\t\tconst err = new Error( 'Missing `namespaceName` or `lessonName`.' );\n\t\taddErrorNotification( dispatch, err );\n\t\treturn err;\n\t}\n\ttry {\n\t\tconst res = await axios.post( server+'/delete_lesson', {\n\t\t\tnamespaceName,\n\t\t\tlessonName\n\t\t});\n\t\tdispatch( deletedLesson( lessonName ) );\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\treturn res;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn err;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to delete a lesson.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to delete a lesson\n */\nexport const deleteLessonInjector = ( dispatch ) => {\n\treturn async ({ lessonName, namespaceName }) => {\n\t\tawait deleteLesson( dispatch, { lessonName, namespaceName } );\n\t};\n};\n\n/**\n * Makes a POST request to show a lesson in the gallery of the dashboard.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.lessonName - lesson name\n * @param {string} options.namespaceName - namespace name\n */\nexport const showLessonInGallery = async ( dispatch, { lessonName, namespaceName }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/show_lesson', {\n\t\t\tnamespaceName,\n\t\t\tlessonName\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( updatedLesson( lessonName, { public: true }) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to show a lesson in the gallery of the dashboard.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to show a lesson in the gallery of the dashboard\n */\nexport const showLessonInGalleryInjector = ( dispatch ) => {\n\treturn async ({ lessonName, namespaceName }) => {\n\t\tawait showLessonInGallery( dispatch, { lessonName, namespaceName });\n\t};\n};\n\n\n/**\n * Makes a POST request to hide a lesson in the gallery of the dashboard.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.lessonName - lesson name\n * @param {string} options.namespaceName - namespace name\n */\nexport const hideLessonInGallery = async ( dispatch, { lessonName, namespaceName }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/hide_lesson', {\n\t\t\tnamespaceName,\n\t\t\tlessonName\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( updatedLesson( lessonName, { public: false }) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to hide a lesson in the gallery of the dashboard.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to hide a lesson in the gallery of the dashboard\n */\nexport const hideLessonInGalleryInjector = ( dispatch ) => {\n\treturn async ({ lessonName, namespaceName }) => {\n\t\tawait hideLessonInGallery( dispatch, { lessonName, namespaceName });\n\t};\n};\n\n/**\n * Makes a POST request to make a lesson available to users, i.e. set it to being active.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.lessonName - lesson name\n * @param {string} options.namespaceName - namespace name\n */\nexport const activateLesson = async ( dispatch, { lessonName, namespaceName }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/activate_lesson?', {\n\t\t\tnamespaceName,\n\t\t\tlessonName\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( updatedLesson( lessonName, { active: true }) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to make a lesson available to users, i.e. set it to being active.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to make a lesson available to users, i.e. set it to being active\n */\nexport const activateLessonInjector = ( dispatch ) => {\n\treturn async ({ lessonName, namespaceName }) => {\n\t\tawait activateLesson( dispatch, { lessonName, namespaceName });\n\t};\n};\n\n/**\n * Makes a POST request to make a lesson hidden from users, i.e. set it to being inactive.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.lessonName - lesson name\n * @param {string} options.namespaceName - namespace name\n */\nexport const deactivateLesson = async ( dispatch, { lessonName, namespaceName }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/deactivate_lesson', {\n\t\t\tnamespaceName,\n\t\t\tlessonName\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( updatedLesson( lessonName, { active: false }) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to make a lesson hidden from users, i.e. set it to being inactive.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to make a lesson hidden from users, i.e. set it to being inactive\n */\nexport const deactivateLessonInjector = ( dispatch ) => {\n\treturn async ({ lessonName, namespaceName }) => {\n\t\tawait deactivateLesson( dispatch, { lessonName, namespaceName });\n\t};\n};\n\n/**\n * Makes a POST request to update a lesson.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.lessonName - lesson name\n * @param {string} options.namespaceName - namespace name\n * @param {string} options.newTitle - new title\n * @param {string} options.newDescription - new description\n * @param {string} options.lockAfter - date on which the lesson should be made unavailable to users\n * @param {string} options.lockUntil - date on which the lesson should be made available to users\n * @param {boolean} options.template - controls whether the lesson shall be a template or not\n * @param {boolean} options.hideFromDashboard - controls whether the lesson shall be hidden from the dashboard (but may still be active and accessible)\n * @returns {boolean} true if the lesson was updated, false otherwise\n */\nexport const updateLesson = async ( dispatch, { lessonName, namespaceName, newTitle, newDescription, lockAfter, lockUntil, template, hideFromDashboard }) => {\n\tif ( namespaceName && lessonName ) {\n\t\ttry {\n\t\t\tconst query = {\n\t\t\t\tnamespaceName,\n\t\t\t\tlessonName,\n\t\t\t\tnewTitle,\n\t\t\t\tnewDescription,\n\t\t\t\tlockAfter,\n\t\t\t\tlockUntil,\n\t\t\t\thideFromDashboard\n\t\t\t};\n\t\t\tif ( isBoolean( template ) ) {\n\t\t\t\tquery.template = template;\n\t\t\t}\n\t\t\tconst res = await axios.post( server+'/update_lesson', query );\n\t\t\tdispatch( deletedLesson( lessonName ) );\n\t\t\taddNotification( dispatch, {\n\t\t\t\tmessage: res.data.message,\n\t\t\t\tlevel: 'success'\n\t\t\t});\n\t\t\tgetLessons( dispatch, namespaceName );\n\t\t\treturn true;\n\t\t} catch ( err ) {\n\t\t\taddErrorNotification( dispatch, err );\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * Returns a function to make a POST request to update a lesson.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to update a lesson\n */\nexport const updateLessonInjector = ( dispatch ) => {\n\treturn async ({ lessonName, namespaceName, newTitle, newDescription, lockAfter, lockUntil, hideFromDashboard, template }) => {\n\t\tconst bool = await updateLesson( dispatch, { lessonName, namespaceName, newTitle, newDescription, lockAfter, lockUntil, hideFromDashboard, template });\n\t\treturn bool;\n\t};\n};\n\n/**\n * Makes a GET request to retrieve all lessons for an admin user.\n *\n * @param {Function} dispatch - dispatch function\n */\nexport const getAllLessons = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_all_lessons' );\n\t\tdispatch( retrievedAllLessons( res.data.lessons ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a GET request to retrieve all lessons for an admin user.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to retrieve all lessons for an admin user\n */\nexport const getAllLessonsInjector = ( dispatch ) => {\n\treturn async () => {\n\t\tawait getAllLessons( dispatch );\n\t};\n};\n\n/**\n * Makes a GET request to retrieve all template lessons.\n *\n * @param {Function} dispatch - dispatch function\n */\nexport const getTemplateLessons = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_template_lessons' );\n\t\tdispatch( retrievedTemplateLessons( res.data.lessons ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a GET request to retrieve all template lessons.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to retrieve all template lessons\n */\nexport const getTemplateLessonsInjector = ( dispatch ) => {\n\treturn async () => {\n\t\tawait getTemplateLessons( dispatch );\n\t};\n};\n\n\n/**\n * Makes a GET request to retrieve all chat rooms\n *\n * @param {Function} dispatch - dispatch function\n */\nexport const getRooms = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_open_rooms' );\n\t\tdispatch( retrievedRooms( res.data.rooms ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a GET request to retrieve all chat rooms\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to retrieve all chat rooms\n */\nexport const getRoomsInjector = ( dispatch ) => {\n\treturn async () => {\n\t\tawait getRooms( dispatch );\n\t};\n};\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport { ADD_NOTIFICATION, ADD_ERROR_NOTIFICATION } from 'constants/action_types.js';\n\n\n// EXPORTS //\n\n/**\n * Dispatches an action object to add a notification.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} notification - Notification object\n */\nexport function addNotification( dispatch, notification ) {\n\tdispatch({\n\t\ttype: ADD_NOTIFICATION,\n\t\tpayload: notification\n\t});\n}\n\n/**\n * Returns a function to dispatch an action object to add a notification.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to dispatch action object to add a notification\n */\nexport const addNotificationInjector = dispatch => {\n\treturn notification => {\n\t\taddNotification( dispatch, notification );\n\t};\n};\n\n/**\n * Dispatches an action object to add an error notification.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Error} err - error object\n */\nexport function addErrorNotification( dispatch, err ) {\n\tlet msg;\n\tif ( err.response ) {\n\t\tmsg = 'Server response: ' + err.response.status + '.\\n';\n\t\tmsg += err.response.data;\n\t} else {\n\t\tmsg = err.message;\n\t}\n\tdispatch({\n\t\ttype: ADD_ERROR_NOTIFICATION,\n\t\tpayload: msg\n\t});\n}\n\n/**\n * Returns a function to dispatch an action object to add an error notification with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to dispatch action object to add an error notification\n */\nexport const addErrorNotificationInjector = dispatch => {\n\treturn message => {\n\t\taddErrorNotification( dispatch, message );\n\t};\n};\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React from 'react';\nimport axios from 'axios';\nimport server from 'constants/server';\nimport i18next from 'i18next';\nimport { addNotification, addErrorNotification } from 'actions/notification';\nimport { UPDATED_SETTINGS, UPDATED_TRANSLATIONS, GET_CUSTOM_TRANSLATIONS, GET_SETTINGS_PUBLIC, GET_SETTINGS } from 'constants/action_types.js';\n\n\n// EXPORTS //\n\n/**\n * Makes a GET request to the server to retrieve the server instance settings.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {void}\n */\nexport const getSettings = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_settings' );\n\t\tdispatch({\n\t\t\ttype: GET_SETTINGS,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch ( err ) {\n\t\treturn addErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a GET request to the server to retrieve the server instance settings with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to the server to retrieve the server instance settings\n */\nexport const getSettingsInjector = dispatch => {\n\treturn async () => {\n\t\tawait getSettings( dispatch );\n\t};\n};\n\n/**\n * Makes a GET request to the server to retrieve the server instance's public settings.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {void}\n */\nexport const getPublicSettings = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_public_settings' );\n\t\tdispatch({\n\t\t\ttype: GET_SETTINGS_PUBLIC,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch ( err ) {\n\t\treturn addErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a GET request to the server to retrieve the server instance's public settings with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to the server to retrieve the server instance's public settings\n */\nexport const getPublicSettingsInjector = dispatch => {\n\treturn async () => {\n\t\tawait getPublicSettings( dispatch );\n\t};\n};\n\n/**\n * Makes a POST request to the server to update a server instance setting.\n *\n * @param {Function} dispatch - dispatch function\n * @param {string} name - name of the setting to update\n * @param {string} value - value of the setting to update\n * @returns {void}\n */\nexport const updateSettings = async ( dispatch, name, value ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/update_settings', {\n\t\t\tname, value\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\ttitle: i18next.t('common:updated'),\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch({\n\t\t\ttype: UPDATED_SETTINGS,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch ( err ) {\n\t\treturn addErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to update a server instance setting with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to update a server instance setting\n */\nexport const updateSettingsInjector = dispatch => {\n\treturn async ( name, value ) => {\n\t\tawait updateSettings( dispatch, name, value );\n\t};\n};\n\n/**\n * Makes a POST request to the server to add a custom translation.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} translation - the translation to add\n * @param {string} translation.language - the locale of the translation\n * @param {string} translation.ns - the namespace of the translation\n * @param {string} translation.key - the translation's key\n * @param {string} translation.value - the translation's value\n * @returns {(Object|Error)} the translation added or an error\n */\nexport const addCustomTranslation = async ( dispatch, { language, ns, key, value }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/add_custom_translation', {\n\t\t\tlanguage, ns, key, value\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\ttitle: i18next.t('common:updated'),\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch({\n\t\t\ttype: UPDATED_TRANSLATIONS,\n\t\t\tpayload: res.data\n\t\t});\n\t\treturn res;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn err;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to add a custom translation with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to add a custom translation\n */\nexport const addCustomTranslationInjector = dispatch => {\n\treturn async ({ language, ns, key, value }) => {\n\t\tconst res = await addCustomTranslation( dispatch, { language, ns, key, value });\n\t\treturn res;\n\t};\n};\n\n/**\n * Makes a POST request to the server to get all custom translations.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {void}\n */\nexport const getCustomTranslations = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_translations' );\n\t\tdispatch({\n\t\t\ttype: GET_CUSTOM_TRANSLATIONS,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch ( err ) {\n\t\treturn addErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to get all custom translations with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to get all custom translations\n */\nexport const getCustomTranslationsInjector = dispatch => {\n\treturn async () => {\n\t\tawait getCustomTranslations( dispatch );\n\t};\n};\n\n/**\n * Makes a POST request to the server to remove a custom translation.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} translation - the translation to remove\n * @param {string} translation.language - the locale of the translation\n * @param {string} translation.ns - the namespace of the translation\n * @param {string} translation.key - the translation's key\n * @returns {(Object|Error)} the server response or an error\n */\nexport const removeCustomTranslation = async ( dispatch, { language, ns, key }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/remove_custom_translation', {\n\t\t\tlanguage, ns, key\n\t\t});\n\t\taddNotification( dispatch, {\n\t\t\ttitle: i18next.t('common:removed'),\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch({\n\t\t\ttype: UPDATED_TRANSLATIONS,\n\t\t\tpayload: res.data\n\t\t});\n\t\treturn res;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn err;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to remove a custom translation with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to remove a custom translation\n */\nexport const removeCustomTranslationInjector = dispatch => {\n\treturn async ({ language, ns, key }) => {\n\t\tconst res = await removeCustomTranslation( dispatch, { language, ns, key });\n\t\treturn res;\n\t};\n};\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport axios from 'axios';\nimport logger from 'debug';\nimport qs from 'querystring';\nimport i18next from 'i18next';\nimport server from 'constants/server';\nimport { fetchCredentials } from 'actions/authentication.js';\nimport { getEnrollableCohorts } from 'actions/cohort.js';\nimport { addNotification, addErrorNotification } from 'actions/notification.js';\nimport { AUTHENTICATED, USER_PICTURE_MODIFIED, DELETED_USER, GET_USERS, LOGGED_IN, LOGGED_OUT, RECEIVED_TOKEN, REQUEST_TFA, USER_UPDATED, USER_UPDATED_BY_ADMIN } from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle-dashboard:actions:user' );\n\n\n// EXPORTS //\n\n/**\n * Returns an action signaling that the user has been authenticated.\n *\n * @param {Object} user - user object\n * @returns {Object} action\n */\nexport function loggedIn( user ) {\n\treturn {\n\t\ttype: LOGGED_IN,\n\t\tpayload: {\n\t\t\temail: user.email,\n\t\t\tverifiedEmail: user.verifiedEmail,\n\t\t\tname: user.name,\n\t\t\tenrolledNamespaces: user.enrolledNamespaces,\n\t\t\townedNamespaces: user.ownedNamespaces,\n\t\t\torganization: user.organization,\n\t\t\twriteAccess: user.writeAccess,\n\t\t\tadministrator: user.administrator,\n\t\t\tlessonData: user.lessonData,\n\t\t\tpicture: user.picture,\n\t\t\tcreatedAt: user.createdAt,\n\t\t\tupdatedAt: user.updatedAt,\n\t\t\tscore: user.score,\n\t\t\tspentTime: user.spentTime,\n\t\t\tlicensed: user.licensed,\n\t\t\tcustomFields: user.customFields,\n\t\t\tavailableCustomFields: user.availableCustomFields,\n\t\t\ttwoFactorAuth: user.twoFactorAuth\n\t\t}\n\t};\n}\n\n/**\n * Returns an action signaling that the user has logged-in and a JSON web token has been received.\n *\n * @param {Object} options - function options\n * @param {string} options.token - JSON web token\n * @param {string} options.id - user id\n * @returns {Object} action\n */\nexport function receivedToken({ token, id }) {\n\treturn {\n\t\ttype: RECEIVED_TOKEN,\n\t\tpayload: {\n\t\t\ttoken,\n\t\t\tid\n\t\t}\n\t};\n}\n\n/**\n* Returns an action signaling that a request for a two-factor authentication token has been made.\n*\n* @param {Object} options - function options\n* @param {string} options.email - user email\n* @param {string} options.password - user password\n* @returns {Object} action\n*/\nexport function requestTFA({ email, password }) {\n\treturn {\n\t\ttype: REQUEST_TFA,\n\t\tpayload: {\n\t\t\temail,\n\t\t\tpassword\n\t\t}\n\t};\n}\n\n/**\n * Returns an action signaling that the user has been logged-out.\n *\n * @returns {Object} action\n */\nexport function loggedOut() {\n\treturn {\n\t\ttype: LOGGED_OUT\n\t};\n}\n\n/**\n * Returns an action signaling that the user has been authenticated.\n *\n * @returns {Object} action\n */\nexport function authenticated() {\n\treturn {\n\t\ttype: AUTHENTICATED\n\t};\n}\n\n/**\n * Returns an action signaling that the user's picture has been updated.\n *\n * @param {Object} picture - user picture\n * @returns {Object} action\n */\nexport function updateUserPicture( picture ) {\n\treturn {\n\t\ttype: USER_PICTURE_MODIFIED,\n\t\tpayload: {\n\t\t\tpicture\n\t\t}\n\t};\n}\n\n/**\n * Returns an action signaling that the user's name or organization has been updated.\n *\n * @param {Object} user - user object\n * @param {string} user.name - user name\n * @param {string} user.organization - user organization\n * @returns {Object} action\n */\nexport const updatedUser = ({ name, organization }) => {\n\treturn {\n\t\ttype: USER_UPDATED,\n\t\tpayload: {\n\t\t\tname,\n\t\t\torganization\n\t\t}\n\t};\n};\n\n/**\n * Returns an action signaling that a user has been updated by an administrator.\n *\n * @param {Object} user - user object\n * @returns {Object} action\n */\nexport const updatedUserByAdmin = ( user ) => {\n\treturn {\n\t\ttype: USER_UPDATED_BY_ADMIN,\n\t\tpayload: user\n\t};\n};\n\n/**\n * Makes a GET request to the server to retrieve list of users.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {void}\n */\nexport const getUsers = async ( dispatch ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/get_users' );\n\t\tdispatch({\n\t\t\ttype: GET_USERS,\n\t\t\tpayload: {\n\t\t\t\tusers: res.data.users\n\t\t\t}\n\t\t});\n\t} catch ( err ) {\n\t\treturn addErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a GET request to the server to retrieve list of users with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to the server to retrieve list of users\n */\nexport const getUsersInjector = dispatch => {\n\treturn async () => {\n\t\tawait getUsers( dispatch );\n\t};\n};\n\n/**\n * Makes a POST request to the server to impersonate a user.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.id - user id\n * @param {string} options.password - user password\n */\nexport const impersonateUser = async ( dispatch, { id, password }) => {\n\tdebug( 'Impersonating user with id '+id );\n\ttry {\n\t\tconst res = await axios.post( server+'/impersonate', { id, password });\n\t\tconst user = await fetchCredentials( dispatch, {\n\t\t\tid: res.data.id\n\t\t});\n\t\t// Save user token to local storage:\n\t\tconst JWT = {\n\t\t\ttoken: res.data.token,\n\t\t\tid: res.data.id\n\t\t};\n\t\tconst userVal = 'ISLE_USER_' + server;\n\t\tlocalStorage.setItem( userVal, JSON.stringify( JWT ) );\n\t\tif ( user ) {\n\t\t\tgetEnrollableCohorts( dispatch, user );\n\t\t}\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to impersonate a user with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to impersonate a user\n */\nexport const impersonateUserInjector = dispatch => {\n\treturn async ({ id, password }) => {\n\t\tawait impersonateUser( dispatch, { id, password } );\n\t};\n};\n\n/**\n * Makes a POST request to the server to delete a user.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.id - user id\n */\nexport const deleteUser = async ( dispatch, { id }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/delete_user', { id });\n\t\taddNotification( dispatch, {\n\t\t\ttitle: i18next.t('common:deleted'),\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch({\n\t\t\ttype: DELETED_USER,\n\t\t\tpayload: {\n\t\t\t\tid\n\t\t\t}\n\t\t});\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to delete a user with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to delete a user\n */\nexport const deleteUserInjector = dispatch => {\n\treturn async ({ id }) => {\n\t\tawait deleteUser( dispatch, { id } );\n\t};\n};\n\n/**\n * Makes POST requests to the server to upload a user's profile picture.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {Object} options.avatarData - user avatar picture data\n * @param {Object} options.thumbnailData - user thumbnail picture data\n */\nexport const uploadProfilePic = async ( dispatch, { avatarData, thumbnailData }) => {\n\ttry {\n\t\tlet res = await axios.post( server+'/upload_profile_pic', avatarData );\n\t\tconst message = res.data.message;\n\t\tlet filename = res.data.filename;\n\t\tfilename = server + '/avatar/' + filename;\n\t\tdispatch( updateUserPicture( filename ) );\n\n\t\tres = await axios.post( server+'/upload_thumbnail_pic', thumbnailData );\n\t\taddNotification( dispatch, {\n\t\t\ttitle: i18next.t('profile-pic-title'),\n\t\t\tmessage,\n\t\t\tlevel: 'success',\n\t\t\tposition: 'tl'\n\t\t});\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make POST requests to the server to upload a user's profile picture with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make POST requests to the server to upload a user's profile picture\n */\nexport const uploadProfilePicInjector = ( dispatch ) => {\n\treturn async ({ avatarData, thumbnailData }) => {\n\t\tawait uploadProfilePic( dispatch, { avatarData, thumbnailData });\n\t};\n};\n\n/**\n * Makes a POST request to the server to authenticate a user as an instructor.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.writeAccessToken - write access token to enable instructor access\n * @returns {boolean} true if the user is now an instructor, false otherwise\n */\nexport const authenticate = async ( dispatch, { writeAccessToken }) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/set_write_access', { token: writeAccessToken });\n\t\tdispatch( authenticated() );\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message+' You can now create your own courses on ISLE and have access to the gallery of public lessons.',\n\t\t\tlevel: 'success',\n\t\t\tautoDismiss: 10\n\t\t});\n\t\treturn true;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn false;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to authenticate a user as an instructor with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to authenticate a user as an instructor\n */\nexport const authenticateInjector = ( dispatch ) => {\n\treturn async ({ writeAccessToken }) => {\n\t\tconst result = await authenticate( dispatch, { writeAccessToken });\n\t\treturn result;\n\t};\n};\n\n/**\n * Makes a POST request to the server to trigger an email to be sent to the user to change their password.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} options - request options\n * @param {string} options.email - user email\n */\nexport const forgotPassword = async ( dispatch, { email }) => {\n\ttry {\n\t\tawait axios.get( server+'/forgot_password?'+qs.stringify({ email }) );\n\t\taddNotification( dispatch, {\n\t\t\tmessage: 'Check your email inbox for a link to choose a new password.',\n\t\t\tlevel: 'success'\n\t\t});\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to trigger an email to be sent to the user to change their password with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to trigger an email to be sent to the user to change their password\n */\nexport const forgotPasswordInjector = ( dispatch ) => {\n\treturn async ({ email }) => {\n\t\tawait forgotPassword( dispatch, { email });\n\t};\n};\n\n/**\n * Makes a POST request to the server to change a user's data.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} form - form data\n * @param {string} form.name - user name\n * @param {string} form.organization- user organization\n * @param {Object} form.customFields - user custom fields\n */\nexport const updateUser = async ( dispatch, form ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/update_user', form );\n\t\tdispatch( updatedUser({\n\t\t\tname: form.name,\n\t\t\torganization: form.organization,\n\t\t\tcustomFields: form.customFields\n\t\t}) );\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to change a user's data with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to change a user's data\n */\nexport const updateUserInjector = ( dispatch ) => {\n\treturn async ({ name, organization, password, customFields }) => {\n\t\tawait updateUser( dispatch, { name, organization, password, customFields });\n\t};\n};\n\n/**\n * Makes a POST request to the server to create a new user.\n *\n * @param {Object} form - form data\n * @returns {Promise} promise that resolves to the server response\n */\nexport const createUser = ( form ) => {\n\treturn axios.post( server+'/create_user', form );\n};\n\n/**\n * Makes a POST request to the server to login a user.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} form - form data\n * @returns {Object} server response\n */\nexport const handleLogin = async ( dispatch, form ) => {\n\tconst res = await axios.post( server+'/login', form );\n\tif ( res.data.message === 'finish-login-via-tfa' ) {\n\t\tdispatch( requestTFA( res.data ) );\n\t} else {\n\t\tdispatch( receivedToken( res.data ) );\n\t}\n\treturn res;\n};\n\n/**\n * Returns a function to make a POST request to the server to login a user with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to login a user\n */\nexport const handleLoginInjector = ( dispatch ) => {\n\treturn async ( form ) => {\n\t\tconst result = await handleLogin( dispatch, form );\n\t\treturn result;\n\t};\n};\n\n/**\n * Makes a POST request to the server to login a user with a TFA code.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} form - form data\n * @returns {(Object|Error)} server response or an error if the TFA code is invalid\n */\nexport const handleLoginTFA = async ( dispatch, form ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/login_tfa', form );\n\t\tdispatch( receivedToken( res.data ) );\n\t\treturn res;\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t\treturn err;\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to login a user with a TFA code with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to login a user with a TFA code\n */\nexport const handleLoginTFAInjector = ( dispatch ) => {\n\treturn async ( form ) => {\n\t\tconst result = await handleLoginTFA( dispatch, form );\n\t\treturn result;\n\t};\n};\n\n/**\n * Restores a users' login session.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} user - user object\n */\nexport const restoreLogin = ( dispatch, user ) => {\n\tdispatch( loggedIn( user ) );\n};\n\n/**\n * Returns a function to restore a users' login session with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to restore a users' login session\n */\nexport const restoreLoginInjector = ( dispatch ) => {\n\treturn ( user ) => {\n\t\trestoreLogin( dispatch, user );\n\t};\n};\n\n/**\n * Logs a user out.\n *\n * @param {Function} dispatch - dispatch function\n */\nexport const logout = ( dispatch ) => {\n\tdebug( 'Logging out the current user...' );\n\tlocalStorage.removeItem( 'ISLE_USER_'+server );\n\tdispatch( loggedOut() );\n};\n\n/**\n * Returns a function to log a user out with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to log a user out\n */\nexport const logoutInjector = ( dispatch ) => {\n\treturn () => {\n\t\tlogout( dispatch );\n\t};\n};\n\n/**\n * Makes a GET request to the server to check whether a user's locally stored data has to be updated.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} user - user object\n */\nexport const userUpdateCheck = async ( dispatch, user ) => {\n\ttry {\n\t\tconst res = await axios.get( server+'/user_update_check?'+qs.stringify({\n\t\t\tupdatedAt: user.updatedAt\n\t\t}) );\n\t\tdebug( 'Received response: '+res.data );\n\t\tif ( !res.data.hasMostRecent ) {\n\t\t\tconst res = await axios.post( server+'/credentials_dashboard', {\n\t\t\t\tid: user.id\n\t\t\t});\n\t\t\tlet newUser = res.data;\n\t\t\tif ( newUser.picture ) {\n\t\t\t\tnewUser.picture = server + '/avatar/' + newUser.picture;\n\t\t\t}\n\t\t\tnewUser = {\n\t\t\t\tid: user.id,\n\t\t\t\ttoken: user.token,\n\t\t\t\t...newUser\n\t\t\t};\n\t\t\tdebug( 'Updated user data...' );\n\t\t\tdispatch( loggedIn( newUser ) );\n\t\t}\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a GET request to the server to check whether a user's locally stored data has to be updated with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a GET request to the server to check whether a user's locally stored data has to be updated\n */\nexport const userUpdateCheckInjector = ( dispatch ) => {\n\treturn async ( user ) => {\n\t\tawait userUpdateCheck( dispatch, user );\n\t};\n};\n\n/**\n * Makes a POST request to the server to confirm a user's email address.\n *\n * @param {string} token - user token\n * @returns {string} server response message or error message\n */\nexport const confirmEmail = async ( token ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/confirm_email', {\n\t\t\ttoken\n\t\t});\n\t\treturn res.data.message;\n\t} catch ( err ) {\n\t\tif ( err.response && err.response.data ) {\n\t\t\treturn err.response.data;\n\t\t}\n\t\treturn err.message;\n\t}\n};\n\n/**\n * Make a POST request to the server to trigger a new email for confirming a user's email address.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} user - user object\n */\nexport const resendConfirmEmail = async ( dispatch, user ) => {\n\ttry {\n\t\tawait axios.post( server+'/resend_confirm_email' );\n\t\taddNotification( dispatch, {\n\t\t\ttitle: 'Email sent',\n\t\t\tmessage: i18next.t('common:verification-email-sent'),\n\t\t\tlevel: 'success',\n\t\t\tposition: 'tl'\n\t\t});\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server to trigger a new email for confirming a user's email address with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server to trigger a new email for confirming a user's email address\n */\nexport const resendConfirmEmailInjector = ( dispatch ) => {\n\treturn async ( user ) => {\n\t\tawait resendConfirmEmail( dispatch, user );\n\t};\n};\n\n/**\n * Makes a POST request to the server by an administrator to update an arbitrary user's data.\n *\n * @param {Function} dispatch - dispatch function\n * @param {Object} form - form object with new user data\n */\nexport const adminUpdateUser = async ( dispatch, form ) => {\n\ttry {\n\t\tconst res = await axios.post( server+'/admin_update_user', form );\n\t\taddNotification( dispatch, {\n\t\t\tmessage: res.data.message,\n\t\t\tlevel: 'success'\n\t\t});\n\t\tdispatch( updatedUserByAdmin( form ) );\n\t} catch ( err ) {\n\t\taddErrorNotification( dispatch, err );\n\t}\n};\n\n/**\n * Returns a function to make a POST request to the server by an administrator to update an arbitrary user's data with a bound dispatch function.\n *\n * @param {Function} dispatch - dispatch function\n * @returns {Function} function to make a POST request to the server by an administrator to update an arbitrary user's data\n */\nexport const adminUpdateUserInjector = ( dispatch ) => {\n\treturn async ( form ) => {\n\t\tawait adminUpdateUser( dispatch, form );\n\t};\n};\n","/**\n* The MIT License (MIT)\n*\n* Copyright (c) 2015 Tobias Ahlin\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy of\n* this software and associated documentation files (the \"Software\"), to deal in\n* the Software without restriction, including without limitation the rights to\n* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n* the Software, and to permit persons to whom the Software is furnished to do so,\n* subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// MODULES //\n\nimport React from 'react';\n\n\n// MAIN //\n\nconst Spinner = () => {\n\treturn ( <div className=\"sk-cube-grid\">\n\t\t<div className=\"sk-cube sk-cube1\"></div>\n\t\t<div className=\"sk-cube sk-cube2\"></div>\n\t\t<div className=\"sk-cube sk-cube3\"></div>\n\t\t<div className=\"sk-cube sk-cube4\"></div>\n\t\t<div className=\"sk-cube sk-cube5\"></div>\n\t\t<div className=\"sk-cube sk-cube6\"></div>\n\t\t<div className=\"sk-cube sk-cube7\"></div>\n\t\t<div className=\"sk-cube sk-cube8\"></div>\n\t\t<div className=\"sk-cube sk-cube9\"></div>\n\t</div> );\n};\n\n\n// EXPORTS //\n\nexport default Spinner;\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React, { Component } from 'react';\nimport Spinner from './spinner.js';\n\n\n// MAIN //\n\nfunction asyncComponent( importComponent ) {\n\tclass AsyncComponent extends Component {\n\t\tconstructor( props ) {\n\t\t\tsuper( props );\n\n\t\t\tthis.state = {\n\t\t\t\tcomponent: null\n\t\t\t};\n\t\t}\n\n\t\tasync componentDidMount() {\n\t\t\tconst { default: component } = await importComponent();\n\t\t\tthis.setState({ // eslint-disable-line react/no-did-mount-set-state\n\t\t\t\tcomponent: component\n\t\t\t});\n\t\t}\n\n\t\trender() {\n\t\t\tconst C = this.state.component;\n\t\t\treturn C ? <C {...this.props} /> : <Spinner />;\n\t\t}\n\t}\n\treturn AsyncComponent;\n}\n\n\n// EXPORTS //\n\nexport default asyncComponent;\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// EXPORTS //\n\nexport const ADD_ENROLLED_NAMESPACE = 'ADD_ENROLLED_NAMESPACE';\nexport const ADD_ERROR_NOTIFICATION = 'ADD_ERROR_NOTIFICATION';\nexport const ADD_NOTIFICATION = 'ADD_NOTIFICATION';\nexport const APPEND_CREATED_NAMESPACE = 'APPEND_CREATED_NAMESPACE';\nexport const AUTHENTICATED = 'AUTHENTICATED';\nexport const CHANGED_NAMESPACE = 'CHANGED_NAMESPACE';\nexport const CREATED_ANNOUNCEMENT = 'CREATED_ANNOUNCEMENT';\nexport const CREATED_CUSTOM_FIELD = 'CREATED_CUSTOM_FIELD';\nexport const CREATED_BACKUP = 'CREATED_BACKUP';\nexport const CREATED_ROLE = 'CREATED_ROLE';\nexport const CREATED_TICKET = 'CREATED_TICKET';\nexport const DELETED_BACKUP = 'DELETED_BACKUP';\nexport const DELETED_CURRENT_NAMESPACE = 'DELETED_CURRENT_NAMESPACE';\nexport const DELETED_CUSTOM_FIELD = 'DELETED_CUSTOM_FIELD';\nexport const DELETED_EVENT = 'DELETED_EVENT';\nexport const DELETED_FILE = 'DELETED_FILE';\nexport const DELETED_LESSON = 'DELETED_LESSON';\nexport const DELETED_ROLE = 'DELETED_ROLE';\nexport const DELETED_TICKET = 'DELETED_TICKET';\nexport const DELETED_USER = 'DELETED_USER';\nexport const DELETED_ANNOUNCEMENT = 'DELETED_ANNOUNCEMENT';\nexport const DISABLED_TFA = 'DISABLED_TFA';\nexport const EDITED_ANNOUNCEMENT = 'EDITED_ANNOUNCEMENT';\nexport const ENABLED_TFA = 'ENABLED_TFA';\nexport const FIELD_POSITION_DECREMENTED = 'FIELD_POSITION_DECREMENTED';\nexport const FIELD_POSITION_INCREMENTED = 'FIELD_POSITION_INCREMENTED';\nexport const GET_ALL_COHORTS = 'GET_ALL_COHORTS';\nexport const GET_ALL_FILES = 'GET_ALL_FILES';\nexport const GET_ALL_LESSONS = 'GET_ALL_LESSONS';\nexport const GET_ALL_NAMESPACES = 'GET_ALL_NAMESPACES';\nexport const GET_ALL_ROLES = 'GET_ALL_ROLES';\nexport const GET_BACKUPS = 'GET_BACKUPS';\nexport const GET_EVENTS = 'GET_EVENTS';\nexport const GET_ALL_TICKETS = 'GET_ALL_TICKETS';\nexport const GET_COURSE_TICKETS = 'GET_COURSE_TICKETS';\nexport const GET_CUSTOM_FIELDS = 'GET_CUSTOM_FIELDS';\nexport const GET_CUSTOM_TRANSLATIONS = 'GET_CUSTOM_TRANSLATIONS';\nexport const GET_OVERVIEW_STATISTICS = 'GET_OVERVIEW_STATISTICS';\nexport const GET_HISTORICAL_OVERVIEW_STATISTICS = 'GET_HISTORICAL_OVERVIEW_STATISTICS';\nexport const GET_REQUEST_STATISTICS = 'GET_REQUEST_STATISTICS';\nexport const GET_ROOMS = 'GET_ROOMS';\nexport const GET_SETTINGS = 'GET_SETTINGS';\nexport const GET_SETTINGS_PUBLIC = 'GET_SETTINGS_PUBLIC';\nexport const GET_TEMPLATE_LESSONS = 'GET_TEMPLATE_LESSONS';\nexport const GET_TFA_QRCODE = 'GET_TFA_QRCODE';\nexport const GET_USERS = 'GET_USERS';\nexport const GET_USER_TICKETS = 'GET_USER_TICKETS';\nexport const LESSON_ORDER = 'LESSON_ORDER';\nexport const LESSON_ORDER_DIRECTION = 'LESSON_ORDER_DIRECTION';\nexport const RECEIVED_FILES = 'RECEIVED_FILES';\nexport const RECEIVED_LICENSE = 'RECEIVED_LICENSE';\nexport const RECEIVED_NAMESPACE_FILES = 'RECEIVED_NAMESPACE_FILES';\nexport const RECEIVED_TOKEN = 'RECEIVED_TOKEN';\nexport const REMOVED_LICENSE = 'REMOVED_LICENSE';\nexport const REQUEST_TFA = 'REQUEST_TFA';\nexport const RETRIEVED_BADGES = 'RETRIEVED_BADGES';\nexport const RETRIEVED_COHORTS = 'RETRIEVED_COHORTS';\nexport const RETRIEVED_LESSONS = 'RETRIEVED_LESSONS';\nexport const RETRIEVED_PUBLIC_LESSONS = 'RETRIEVED_PUBLIC_LESSONS';\nexport const SEARCH_PHRASE_SET = 'SEARCH_PHRASE_SET';\nexport const TICKET_CLOSED = 'TICKET_CLOSED';\nexport const TICKET_OPENED = 'TICKET_OPENED';\nexport const TICKET_MESSAGE_ADDED = 'TICKET_MESSAGE_ADDED';\nexport const TICKET_PRIORITY_UPDATED = 'TICKET_PRIORITY_UPDATED';\nexport const TRIGGERED_EVENT = 'TRIGGERED_EVENT';\nexport const UPDATED_LESSON = 'UPDATED_LESSON';\nexport const UPDATED_OWNED_NAMESPACE = 'UPDATED_OWNED_NAMESPACE';\nexport const LOGGED_IN = 'LOGGED_IN';\nexport const LOGGED_OUT = 'LOGGED_OUT';\nexport const USER_UPDATED = 'USER_UPDATED';\nexport const USER_UPDATED_BY_ADMIN = 'USER_UPDATED_BY_ADMIN';\nexport const USER_PICTURE_MODIFIED = 'USER_PICTURE_MODIFIED';\nexport const USER_RECEIVED_BADGES = 'USER_RECEIVED_BADGES';\nexport const UPDATED_CUSTOM_FIELD = 'UPDATED_CUSTOM_FIELD';\nexport const UPDATED_ROLE = 'UPDATED_ROLE';\nexport const UPDATED_SETTINGS = 'UPDATED_SETTINGS';\nexport const UPDATED_STUDENT_PROGRESS = 'UPDATED_STUDENT_PROGRESS';\nexport const UPDATED_TRANSLATIONS = 'UPDATED_TRANSLATIONS';\nexport const RETRIEVED_ENROLLABLE_COHORTS = 'RETRIEVED_ENROLLABLE_COHORTS';\n","\n/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport serverJSON from './../../config/server.json';\n\n\n// VARIABLES //\n\nexport const REMOTE = serverJSON.publicUrl;\nexport const LOCAL = 'http://localhost:17777';\n\n\n// MAIN //\n\nlet server;\nif ( process.env.NODE_ENV === 'development' ) { // eslint-disable-line no-process-env\n\tserver = process.env.REACT_APP_SERVER === 'remote' ? REMOTE : LOCAL; // eslint-disable-line no-process-env\n} else {\n\tserver = window.location.origin;\n}\n\n\n// EXPORTS //\n\nexport default server;\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport axios from 'axios';\nimport i18next from './i18n';\nimport { store } from './../index.js';\n\n\n// MAIN //\n\naxios.interceptors.request.use( ( config ) => {\n\tconfig.headers[ 'Accept-Language' ] = i18next.language;\n\tconst state = store.getState();\n\tconst token = state.user.token;\n\tif ( token ) {\n\t\tconfig.headers.Authorization = `JWT ${token}`;\n\t}\n\treturn config;\n});\n\nconst namespaceClient = axios.create();\nnamespaceClient.interceptors.request.use( ( config ) => {\n\tconfig.headers[ 'Accept-Language' ] = i18next.language;\n\tconst state = store.getState();\n\tconst token = state.user.token;\n\tif ( token ) {\n\t\tconfig.headers.Authorization = `JWT ${token}`;\n\t}\n\tconfig.headers[ 'X-Context-Level' ] = 'namespace';\n\n\tconst target = config.data.namespaceID || config.params.namespaceID || state.namespace._id;\n\tconfig.headers[ 'X-Context-Target' ] = target;\n\treturn config;\n});\n\nconst programClient = axios.create();\n\nconst lessonClient = axios.create();\nlessonClient.interceptors.request.use( ( config ) => {\n\tconfig.headers[ 'Accept-Language' ] = i18next.language;\n\tconst state = store.getState();\n\tconst token = state.user.token;\n\tif ( token ) {\n\t\tconfig.headers.Authorization = `JWT ${token}`;\n\t}\n\tconfig.headers[ 'X-Context-Level' ] = 'lesson';\n\n\tlet target = config.data.lessonID || config.params.lessonID;\n\ttarget += state.namespace._id;\n\tconfig.headers[ 'X-Context-Target' ] = target;\n\n\treturn config;\n});\n\nconst globalClient = axios.create();\nglobalClient.interceptors.request.use( ( config ) => {\n\tconfig.headers[ 'Accept-Language' ] = i18next.language;\n\tconst token = store.getState().user.token;\n\tif ( token ) {\n\t\tconfig.headers.Authorization = `JWT ${token}`;\n\t}\n\tconfig.headers[ 'X-Context-Level' ] = 'global';\n\tconfig.headers[ 'X-Context-Target' ] = true;\n\treturn config;\n});\n\n\n// EXPORTS //\n\nexport const namespaceAxios = namespaceClient;\nexport const programAxios = programClient;\nexport const lessonAxios = lessonClient;\nexport const globalAxios = globalClient;\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport HttpApi from 'i18next-http-backend/cjs';\nimport Backend from 'i18next-chained-backend';\nimport server from 'constants/server';\nimport { store } from './../index.js';\n\n\n// MAIN //\n\ni18n.use( Backend )\n\t.use( LanguageDetector )\n\t.use( initReactI18next )\n\t.init({\n\t\tdebug: false,\n\t\tlng: localStorage.getItem( 'i18nextLng' ) || 'en',\n\t\tfallbackLng: 'en',\n\t\tbackend: {\n\t\t\tbackends: [\n\t\t\t\tHttpApi,\n\t\t\t\tHttpApi,\n\t\t\t\tHttpApi\n\t\t\t],\n\t\t\tbackendOptions: [\n\t\t\t\t{\n\t\t\t\t\tloadPath: './locales/{{lng}}/{{ns}}.json'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tloadPath: server+'/locales/{{lng}}/{{ns}}.json'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tloadPath: 'https://cdn.jsdelivr.net/npm/@isle-project/locales/components/{{ns}}/{{lng}}.json'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\treact: {\n\t\t\tuseSuspense: false\n\t\t},\n\t\tinterpolation: {\n\t\t\tescapeValue: false // Not needed for React!\n\t\t}\n\t});\n\n\ni18n.store.on( 'added', function onLoaded( lng, ns ) {\n\tconst state = store.getState();\n\tconst translations = state.translations;\n\tconst custom = translations[ lng ][ ns ];\n\tif ( custom ) {\n\t\tconst keys = Object.keys( custom );\n\t\tif ( !i18n.store.data[ lng ][ ns+'_ORIGINAL' ] ) {\n\t\t\ti18n.store.data[ lng ][ ns+'_ORIGINAL' ] = {};\n\t\t}\n\t\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\t\ti18n.store.data[ lng ][ ns+'_ORIGINAL' ][ keys[ i ] ] = i18n.store.data[ lng ][ ns ][ keys[ i ] ];\n\t\t\ti18n.store.data[ lng ][ ns ][ keys[ i ] ] = custom[ keys[ i ] ];\n\t\t}\n\t}\n});\n\n\n// EXPORTS //\n\nexport default i18n;\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport * as types from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst initialState = {\n\tcohorts: [],\n\tevents: [],\n\tfiles: [],\n\tlessons: [],\n\tlessonsMap: {},\n\tnamespaces: [],\n\troles: [],\n\trooms: [],\n\ttickets: [],\n\tusers: [],\n\tstatistics: {},\n\trequestStatistics: [],\n\thistoricalStatistics: [],\n\tbackups: [],\n\tlicense: null,\n\tsettings: {}\n};\n\n\n// EXPORTS //\n\nexport default function admin( state = initialState, action ) {\n\tswitch ( action.type ) {\n\tcase types.GET_USERS: {\n\t\tlet users = action.payload.users;\n\t\tusers = users.map( x => {\n\t\t\tconst keys = objectKeys( x.lessonData );\n\t\t\tlet chatMessages = 0;\n\t\t\tlet nActions = 0;\n\t\t\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\t\t\tconst key = keys[ i ];\n\t\t\t\tchatMessages += x.lessonData[ key ].chatMessages;\n\t\t\t\tconst types = objectKeys( x.lessonData[ key ].actionTypes );\n\t\t\t\tfor ( let j = 0; j < types.length; j++ ) {\n\t\t\t\t\tnActions += x.lessonData[ key ].actionTypes[ types[ j ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tx.nActions = nActions;\n\t\t\tx.chatMessages = chatMessages;\n\t\t\tx.createdAt = new Date( x.createdAt );\n\t\t\tx.updatedAt = new Date( x.updatedAt );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tusers\n\t\t});\n\t}\n\tcase types.GET_ALL_COHORTS: {\n\t\tlet cohorts = action.payload.cohorts;\n\t\tcohorts = cohorts.map( x => {\n\t\t\tx.startDate = new Date( x.startDate );\n\t\t\tx.endDate = new Date( x.endDate );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tcohorts\n\t\t});\n\t}\n\tcase types.GET_ALL_FILES: {\n\t\tlet files = action.payload.files;\n\t\tfiles = files.map( x => {\n\t\t\tx.updatedAt = new Date( x.updatedAt );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tfiles\n\t\t});\n\t}\n\tcase types.DELETED_FILE: {\n\t\tconst files = state.files.filter( x => x._id !== action.payload.id );\n\t\treturn Object.assign({}, state, {\n\t\t\tfiles\n\t\t});\n\t}\n\tcase types.GET_ALL_LESSONS: {\n\t\tlet lessons = action.payload.lessons;\n\t\tconst lessonsMap = { ...state.lessonsMap };\n\t\tlessons = lessons.map( x => {\n\t\t\tx.createdAt = new Date( x.createdAt );\n\t\t\tx.updatedAt = new Date( x.updatedAt );\n\t\t\tlessonsMap[ x._id ] = x.title;\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tlessons,\n\t\t\tlessonsMap\n\t\t});\n\t}\n\tcase types.GET_ALL_NAMESPACES: {\n\t\tlet namespaces = action.payload.namespaces;\n\t\tnamespaces = namespaces.map( x => {\n\t\t\tx.createdAt = new Date( x.createdAt );\n\t\t\tx.updatedAt = new Date( x.updatedAt );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tnamespaces\n\t\t});\n\t}\n\tcase types.GET_EVENTS: {\n\t\tlet events = action.payload.events;\n\t\tevents = events.map( x => {\n\t\t\tx.time = new Date( x.time );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tevents\n\t\t});\n\t}\n\tcase types.GET_ROOMS: {\n\t\tlet rooms = action.payload.rooms;\n\t\trooms = rooms.map( x => {\n\t\t\tx.startTime = new Date( x.startTime );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\trooms\n\t\t});\n\t}\n\tcase types.DELETED_EVENT: {\n\t\tconst events = state.events.filter( x => x._id !== action.payload.id );\n\t\treturn Object.assign({}, state, {\n\t\t\tevents\n\t\t});\n\t}\n\tcase types.DELETED_USER: {\n\t\tconst users = state.users.filter( x => x._id !== action.payload.id );\n\t\treturn Object.assign({}, state, {\n\t\t\tusers\n\t\t});\n\t}\n\tcase types.TRIGGERED_EVENT: {\n\t\tconst events = state.events.slice();\n\t\tfor ( let i = 0; i < events.length; i++ ) {\n\t\t\tif ( events[ i ]._id === action.payload.id ) {\n\t\t\t\tevents[ i ].done = true;\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tevents\n\t\t});\n\t}\n\tcase types.USER_UPDATED_BY_ADMIN: {\n\t\tlet users = state.users.slice();\n\t\tfor ( let i = 0; i < users.length; i++ ) {\n\t\t\tconst user = users[ i ];\n\t\t\tif ( user._id === action.payload.id ) {\n\t\t\t\tconst keys = objectKeys( action.payload );\n\t\t\t\tfor ( let j = 0; j < keys.length; j++ ) {\n\t\t\t\t\tconst key = keys[ j ];\n\t\t\t\t\tif ( key !== 'id' ) {\n\t\t\t\t\t\tuser[ key ] = action.payload[ key ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tusers\n\t\t});\n\t}\n\tcase types.GET_OVERVIEW_STATISTICS: {\n\t\treturn Object.assign({}, state, {\n\t\t\tstatistics: action.payload.statistics\n\t\t});\n\t}\n\tcase types.GET_ALL_TICKETS: {\n\t\tlet tickets = action.payload.tickets;\n\t\ttickets = tickets.map( x => {\n\t\t\tx.createdAt = new Date( x.createdAt );\n\t\t\tx.updatedAt = new Date( x.updatedAt );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.DELETED_TICKET: {\n\t\tconst tickets = state.tickets.filter( x => x._id !== action.payload.id );\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_OPENED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.done = false;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_PRIORITY_UPDATED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.priority = action.payload.priority;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_CLOSED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.done = true;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_MESSAGE_ADDED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tconst message = action.payload.message;\n\t\t\t\tmessage.picture = message.picture.substring( message.picture.lastIndexOf( '/' )+1 );\n\t\t\t\tticket.messages.unshift( message );\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.RECEIVED_LICENSE:\n\t\treturn Object.assign({}, state, {\n\t\t\tlicense: action.payload.license\n\t\t});\n\tcase types.REMOVED_LICENSE:\n\t\treturn Object.assign({}, state, {\n\t\t\tlicense: null\n\t\t});\n\tcase types.GET_HISTORICAL_OVERVIEW_STATISTICS: {\n\t\tconst statistics = action.payload.statistics.map( x => {\n\t\t\tx.createdAt = x.createdAt.substring( 0, x.createdAt.indexOf( 'T' ) );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\thistoricalStatistics: statistics\n\t\t});\n\t}\n\tcase types.GET_REQUEST_STATISTICS: {\n\t\treturn Object.assign({}, state, {\n\t\t\trequestStatistics: action.payload.statistics\n\t\t});\n\t}\n\tcase types.GET_BACKUPS: {\n\t\treturn Object.assign({}, state, {\n\t\t\tbackups: action.payload.backups\n\t\t});\n\t}\n\tcase types.CREATED_BACKUP: {\n\t\tconst backups = state.backups.slice();\n\t\tbackups.push( action.payload.backup );\n\t\treturn Object.assign({}, state, {\n\t\t\tbackups\n\t\t});\n\t}\n\tcase types.DELETED_BACKUP: {\n\t\tconst backups = state.backups.filter( x => x._id !== action.payload.id );\n\t\treturn Object.assign({}, state, {\n\t\t\tbackups\n\t\t});\n\t}\n\tcase types.GET_SETTINGS: {\n\t\treturn Object.assign({}, state, {\n\t\t\tsettings: action.payload\n\t\t});\n\t}\n\tcase types.UPDATED_SETTINGS: {\n\t\treturn Object.assign({}, state, {\n\t\t\tsettings: action.payload.settings\n\t\t});\n\t}\n\tcase types.GET_ALL_ROLES: {\n\t\tconst roles = action.payload.roles;\n\t\treturn Object.assign({}, state, {\n\t\t\troles\n\t\t});\n\t}\n\tcase types.CREATED_ROLE: {\n\t\tconst roles = state.roles.slice();\n\t\troles.push( action.payload.role );\n\t\treturn Object.assign({}, state, {\n\t\t\troles\n\t\t});\n\t}\n\tcase types.DELETED_ROLE: {\n\t\tconst roles = state.roles.filter( x => x._id !== action.payload.id );\n\t\treturn Object.assign({}, state, {\n\t\t\troles\n\t\t});\n\t}\n\tcase types.UPDATED_ROLE: {\n\t\tconst { role } = action.payload;\n\t\tconst roles = state.roles.map( x => {\n\t\t\tif ( role._id === x._id ) {\n\t\t\t\treturn role;\n\t\t\t}\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\troles\n\t\t});\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport * as types from 'constants/action_types.js';\n\n\n// EXPORTS //\n\nexport default function badges( state = null, action ) {\n\tswitch ( action.type ) {\n\tcase types.RETRIEVED_BADGES: {\n\t\treturn action.payload.badges;\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport * as types from 'constants/action_types.js';\nimport isArray from '@stdlib/assert/is-array';\nimport isRegExpString from '@stdlib/assert/is-regexp-string';\nimport reFromString from '@stdlib/utils/regexp-from-string';\nimport contains from '@stdlib/assert/contains';\n\n\n// FUNCTIONS //\n\nfunction titleCompare( a, b ) {\n\treturn ( '' + a.title ).localeCompare( b.title );\n}\n\n\n// EXPORTS //\n\nexport default function cohorts( state = null, action ) {\n\tswitch ( action.type ) {\n\tcase types.RETRIEVED_ENROLLABLE_COHORTS: {\n\t\tlet cohorts = action.payload.cohorts;\n\t\tif ( !isArray( cohorts ) ) {\n\t\t\treturn cohorts;\n\t\t}\n\t\tcohorts = cohorts.filter( elem => {\n\t\t\tlet emailFilter = elem.emailFilter || '';\n\t\t\tif ( isRegExpString( emailFilter ) ) {\n\t\t\t\temailFilter = reFromString( emailFilter );\n\t\t\t\treturn emailFilter.test( action.payload.user.email );\n\t\t\t}\n\t\t\treturn contains( action.payload.user.email, emailFilter || '' );\n\t\t});\n\t\treturn cohorts.sort( titleCompare );\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport * as types from 'constants/action_types.js';\n\n\n// FUNCTIONS //\n\nfunction titleCompare( a, b ) {\n\treturn ( '' + a.title ).localeCompare( b.title );\n}\n\n\n// VARIABLES //\n\nconst initialState = {\n\t_id: null,\n\ttitle: '',\n\tdescription: '',\n\towners: '',\n\tenableTicketing: false,\n\tannouncements: [],\n\tlessons: [],\n\tcohorts: [],\n\tfiles: [],\n\townerFiles: [],\n\ttickets: []\n};\n\n\n// EXPORTS //\n\nexport default function namespace( state = initialState, action ) {\n\tswitch ( action.type ) {\n\tcase types.CHANGED_NAMESPACE: {\n\t\treturn Object.assign({}, state, {\n\t\t\t_id: action.payload._id,\n\t\t\ttitle: action.payload.title,\n\t\t\tdescription: action.payload.description,\n\t\t\tannouncements: action.payload.announcements,\n\t\t\tenableTicketing: action.payload.enableTicketing,\n\t\t\towners: action.payload.owners,\n\t\t\tcohorts: action.payload.cohorts\n\t\t});\n\t}\n\tcase types.DELETED_CURRENT_NAMESPACE: {\n\t\treturn initialState;\n\t}\n\tcase types.UPDATED_STUDENT_PROGRESS: {\n\t\tconst { cohort, email, lessonID, progress } = action.payload;\n\t\tconst cohorts = state.cohorts;\n\t\tfor ( let i = 0; i < cohorts.length; i++ ) {\n\t\t\tif ( cohorts[ i ].title === cohort ) {\n\t\t\t\tconst members = cohorts[ i ].members;\n\t\t\t\tfor ( let j = 0; j < members.length; j++ ) {\n\t\t\t\t\tif ( members[ j ].email === email ) {\n\t\t\t\t\t\tconst member = members[ j ];\n\t\t\t\t\t\tmember.lessonData[ lessonID ].progress = progress / 100;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, { cohorts });\n\t}\n\tcase types.RETRIEVED_LESSONS: {\n\t\tif ( action.payload.namespaceName === state.title ) {\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tlessons: action.payload.lessons\n\t\t\t});\n\t\t}\n\t\treturn state;\n\t}\n\tcase types.RETRIEVED_COHORTS: {\n\t\treturn Object.assign({}, state, {\n\t\t\tcohorts: action.payload.cohorts.sort( titleCompare )\n\t\t});\n\t}\n\tcase types.DELETED_LESSON: {\n\t\tlet lessons = state.lessons.slice();\n\t\tlessons = lessons.filter( x => x.title !== action.payload.lessonName );\n\t\treturn Object.assign({}, state, {\n\t\t\tlessons\n\t\t});\n\t}\n\tcase types.UPDATED_LESSON: {\n\t\tlet lessons = state.lessons.slice();\n\t\tconst { props, lessonName } = action.payload;\n\t\tfor ( let i = 0; i < lessons.length; i++ ) {\n\t\t\tif ( lessons[ i ].title === lessonName ) {\n\t\t\t\tfor ( let key in props ) {\n\t\t\t\t\tif ( hasOwnProp( props, key ) ) {\n\t\t\t\t\t\tlessons[ i ][ key ] = props[ key ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tlessons\n\t\t});\n\t}\n\tcase types.RECEIVED_NAMESPACE_FILES: {\n\t\tlet lessons = state.lessons;\n\t\tlet files = action.payload.files;\n\t\tfiles = files.map( file => {\n\t\t\tfile.updatedAt = new Date( file.updatedAt );\n\t\t\tfor ( let i = 0; i < lessons.length; i++ ) {\n\t\t\t\tif ( lessons[ i ]._id === file.lesson ) {\n\t\t\t\t\tfile.lesson = lessons[ i ];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn file;\n\t\t});\n\t\tconst newState = {};\n\t\tif ( action.payload.owner ) {\n\t\t\tnewState.ownerFiles = files;\n\t\t} else {\n\t\t\tnewState.files = files;\n\t\t}\n\t\treturn Object.assign({}, state, newState );\n\t}\n\tcase types.EDITED_ANNOUNCEMENT: {\n\t\tconst announcements = state.announcements.slice();\n\t\tfor (let i = 0; i < announcements.length; i++) {\n\t\t\tif (announcements[i].createdAt === action.payload.announcement.createdAt) {\n\t\t\t\tannouncements[i] = action.payload.announcement;\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tannouncements: announcements\n\t\t});\n\t}\n\tcase types.CREATED_ANNOUNCEMENT: {\n\t\tconst announcements = state.announcements.slice();\n\t\tannouncements.unshift(action.payload.announcement);\n\t\treturn Object.assign({}, state, {\n\t\t\tannouncements: announcements\n\t\t});\n\t}\n\tcase types.DELETED_ANNOUNCEMENT: {\n\t\tconst announcements = state.announcements.slice();\n\t\tannouncements.splice(action.payload.index, 1);\n\n\t\treturn Object.assign({}, state, {\n\t\t\tannouncements: announcements\n\t\t});\n\t}\n\tcase types.GET_COURSE_TICKETS: {\n\t\tlet tickets = action.payload.tickets;\n\t\ttickets = tickets.map( x => {\n\t\t\tx.createdAt = new Date( x.createdAt );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_OPENED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.done = false;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_CLOSED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.done = true;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_PRIORITY_UPDATED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.priority = action.payload.priority;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_MESSAGE_ADDED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tconst message = action.payload.message;\n\t\t\t\tmessage.picture = message.picture.substring( message.picture.lastIndexOf( '/' )+1 );\n\t\t\t\tticket.messages.unshift( message );\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.LOGGED_OUT: {\n\t\treturn initialState;\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport * as types from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst initialState = {\n\tmessage: '',\n\tlevel: '',\n\tposition: 'tl',\n\tchildren: null,\n\ttime: null,\n\tautoDismiss: 5\n};\n\n\n// EXPORTS //\n\nexport default function namespace( state = initialState, action ) {\n\tswitch ( action.type ) {\n\tcase types.ADD_NOTIFICATION: {\n\t\treturn Object.assign({}, initialState, {\n\t\t\t...action.payload,\n\t\t\ttime: new Date()\n\t\t});\n\t}\n\tcase types.ADD_ERROR_NOTIFICATION: {\n\t\treturn {\n\t\t\ttitle: 'Error encountered',\n\t\t\tmessage: action.payload,\n\t\t\tlevel: 'error',\n\t\t\tposition: 'tl',\n\t\t\tautoDismiss: 5,\n\t\t\ttime: new Date()\n\t\t};\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport * as types from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst initialState = {};\n\n\n// EXPORTS //\n\nexport default function translations( state = initialState, action ) {\n\tswitch ( action.type ) {\n\t\tcase types.GET_CUSTOM_TRANSLATIONS: {\n\t\t\treturn Object.assign( {}, state, action.payload );\n\t\t}\n\t\tcase types.UPDATED_TRANSLATIONS: {\n\t\t\treturn Object.assign( {}, state, action.payload.translations );\n\t\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport * as types from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst initialState = {};\n\n\n// EXPORTS //\n\nexport default function settings( state = initialState, action ) {\n\tswitch ( action.type ) {\n\tcase types.GET_SETTINGS_PUBLIC: {\n\t\treturn Object.assign({}, state, action.payload );\n\t}\n\tcase types.UPDATED_SETTINGS: {\n\t\treturn Object.assign({}, state, action.payload.settings );\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport * as types from 'constants/action_types.js';\nimport server from 'constants/server';\n\n\n// VARIABLES //\n\nconst initialState = {\n\tlessons: null\n};\n\n\n// EXPORTS //\n\nexport default function namespace( state = initialState, action ) {\n\tswitch ( action.type ) {\n\tcase types.RETRIEVED_PUBLIC_LESSONS: {\n\t\tlet lessons = action.payload.lessons;\n\t\tlessons = lessons.map( (lesson, index) => {\n\t\t\tlesson.colorIndex = index % 20;\n\t\t\tlesson.url = server+'/'+lesson.namespace+'/'+lesson.title;\n\t\t\tif ( !lesson.createdAt ) {\n\t\t\t\tlesson.createdAt = new Date( 0 ).toLocaleString();\n\t\t\t}\n\t\t\tif ( !lesson.updatedAt ) {\n\t\t\t\tlesson.updatedAt = lesson.createdAt;\n\t\t\t}\n\t\t\treturn lesson;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tlessons\n\t\t});\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport { LOCATION_CHANGE } from 'connected-react-router';\nimport lowercase from '@stdlib/string/lowercase';\nimport * as types from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst initialState = {\n\tphrase: null,\n\ttype: 'sequentially',\n\tdirection: 'ascending'\n};\n\n\n// EXPORTS //\n\nexport default function search( state = initialState, action ) {\n\tswitch ( action.type ) {\n\tcase types.SEARCH_PHRASE_SET: {\n\t\treturn Object.assign({}, state, {\n\t\t\tphrase: lowercase( action.payload.phrase )\n\t\t});\n\t}\n\tcase types.LESSON_ORDER: {\n\t\treturn Object.assign({}, state, {\n\t\t\ttype: action.payload.type\n\t\t});\n\t}\n\tcase types.LESSON_ORDER_DIRECTION: {\n\t\treturn Object.assign({}, state, {\n\t\t\tdirection: action.payload.direction\n\t\t});\n\t}\n\tcase types.LOGGED_OUT: {\n\t\treturn initialState;\n\t}\n\tcase LOCATION_CHANGE: {\n\t\treturn initialState;\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport groupBy from '@stdlib/utils/group-by';\nimport copy from '@stdlib/utils/copy';\nimport * as types from 'constants/action_types.js';\n\n\n// VARIABLES //\n\nconst initialState = {\n\tloggedIn: false,\n\temail: '',\n\tverifiedEmail: false,\n\tname: '',\n\torganization: '',\n\twriteAccess: false,\n\tadministrator: false,\n\tenrolledNamespaces: [],\n\townedNamespaces: [],\n\tlessonData: {},\n\tpicture: null,\n\tcreatedAt: null,\n\tupdatedAt: null,\n\tscore: null,\n\tspentTime: null,\n\tfiles: null,\n\tbadges: null,\n\tid: null,\n\ttoken: null,\n\ttickets: [],\n\tlicensed: false,\n\tcustomFields: null,\n\tavailableCustomFields: [],\n\ttwoFactorAuth: false,\n\trequestTFA: null,\n\ttemplateLessons: []\n};\n\n\n// FUNCTIONS //\n\nfunction getNamespace( namespaces, name ) {\n\tfor ( let i= 0; i < namespaces.length; i++ ) {\n\t\tif ( namespaces[i].title === name ) {\n\t\t\treturn namespaces[i];\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default function user( state = initialState, action ) {\n\tswitch ( action.type ) {\n\tcase types.RECEIVED_TOKEN: {\n\t\treturn Object.assign({}, state, {\n\t\t\ttoken: action.payload.token,\n\t\t\tid: action.payload.id\n\t\t});\n\t}\n\tcase types.LOGGED_IN: {\n\t\treturn Object.assign({}, state, {\n\t\t\temail: action.payload.email,\n\t\t\tverifiedEmail: action.payload.verifiedEmail,\n\t\t\tname: action.payload.name,\n\t\t\tenrolledNamespaces: action.payload.enrolledNamespaces,\n\t\t\townedNamespaces: action.payload.ownedNamespaces,\n\t\t\torganization: action.payload.organization,\n\t\t\twriteAccess: action.payload.writeAccess,\n\t\t\tadministrator: action.payload.administrator,\n\t\t\tpicture: action.payload.picture,\n\t\t\tlessonData: action.payload.lessonData,\n\t\t\tcreatedAt: action.payload.createdAt,\n\t\t\tupdatedAt: action.payload.updatedAt,\n\t\t\tscore: action.payload.score,\n\t\t\tspentTime: action.payload.spentTime,\n\t\t\tlicensed: action.payload.licensed,\n\t\t\tcustomFields: action.payload.customFields,\n\t\t\tavailableCustomFields: action.payload.availableCustomFields,\n\t\t\ttwoFactorAuth: action.payload.twoFactorAuth,\n\t\t\tloggedIn: true\n\t\t});\n\t}\n\tcase types.AUTHENTICATED: {\n\t\treturn Object.assign({}, state, {\n\t\t\twriteAccess: true\n\t\t});\n\t}\n\tcase types.LOGGED_OUT: {\n\t\treturn initialState;\n\t}\n\tcase types.USER_UPDATED: {\n\t\treturn Object.assign({}, state, {\n\t\t\tname: action.payload.name,\n\t\t\torganization: action.payload.organization,\n\t\t\tcustomFields: action.payload.customFields\n\t\t});\n\t}\n\tcase types.USER_PICTURE_MODIFIED: {\n\t\treturn Object.assign({}, state, {\n\t\t\tpicture: action.payload.picture\n\t\t});\n\t}\n\tcase types.APPEND_CREATED_NAMESPACE: {\n\t\tconst arr = state.ownedNamespaces.slice();\n\t\tarr.push( action.payload.namespace );\n\t\treturn Object.assign({}, state, {\n\t\t\townedNamespaces: arr\n\t\t});\n\t}\n\tcase types.DELETED_CURRENT_NAMESPACE: {\n\t\tconst arr = [];\n\t\tfor ( let i = 0; i < state.ownedNamespaces.length; i++ ) {\n\t\t\tconst item = state.ownedNamespaces[ i ];\n\t\t\tif ( item._id !== action.payload.id ) {\n\t\t\t\tarr.push( item );\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\townedNamespaces: arr\n\t\t});\n\t}\n\tcase types.RETRIEVED_LESSONS: {\n\t\tconst arr = state.enrolledNamespaces.slice();\n\t\tfor ( let i = 0; i < arr.length; i++ ) {\n\t\t\tconst course = arr[ i ];\n\t\t\tif ( course.title === action.payload.namespaceName ) {\n\t\t\t\tarr[ i ].lessons = action.payload.lessons;\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tenrolledNamespaces: arr\n\t\t});\n\t}\n\tcase types.UPDATED_OWNED_NAMESPACE: {\n\t\tconst arr = state.ownedNamespaces.slice();\n\t\tfor ( let i = 0; i < arr.length; i++ ) {\n\t\t\tconst item = arr[ i ];\n\t\t\tif ( item._id === action.payload._id ) {\n\t\t\t\tarr[ i ] = action.payload;\n\t\t\t} else {\n\t\t\t\tarr[ i ] = item;\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\townedNamespaces: arr\n\t\t});\n\t}\n\tcase types.ADD_ENROLLED_NAMESPACE: {\n\t\tconst arr = state.enrolledNamespaces.slice();\n\t\tarr.push( action.payload );\n\t\treturn Object.assign({}, state, {\n\t\t\tenrolledNamespaces: arr\n\t\t});\n\t}\n\tcase types.CREATED_ANNOUNCEMENT: {\n\t\tconst namespaceName = action.payload.namespaceName;\n\t\tconst enrolledNamespaces = copy( state.enrolledNamespaces );\n\t\tlet ns = getNamespace( enrolledNamespaces, namespaceName );\n\t\tif ( ns ) {\n\t\t\tns.announcements.unshift( action.payload.announcement );\n\t\t}\n\t\tconst ownedNamespaces = copy( state.ownedNamespaces );\n\t\tns = getNamespace( ownedNamespaces, namespaceName );\n\t\tif ( ns ) {\n\t\t\tns.announcements.unshift( action.payload.announcement );\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tenrolledNamespaces,\n\t\t\townedNamespaces\n\t\t});\n\t}\n\tcase types.EDITED_ANNOUNCEMENT: {\n\t\tconst namespaceName = action.payload.namespaceName;\n\t\tconst announcement = action.payload.announcement;\n\t\tconst createdAt = announcement.createdAt;\n\t\tconst enrolledNamespaces = copy( state.enrolledNamespaces );\n\t\tlet ns = getNamespace( enrolledNamespaces, namespaceName );\n\t\tif ( ns ) {\n\t\t\tfor ( let i = 0; i < ns.announcements.length; i++ ) {\n\t\t\t\tif ( ns.announcements[ i ].createdAt === createdAt ) {\n\t\t\t\t\tns.announcements[ i ] = announcement;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst ownedNamespaces = copy( state.ownedNamespaces );\n\t\tns = getNamespace( ownedNamespaces, namespaceName );\n\t\tif ( ns ) {\n\t\t\tfor ( let i = 0; i < ns.announcements.length; i++ ) {\n\t\t\t\tif ( ns.announcements[ i ].createdAt === createdAt ) {\n\t\t\t\t\tns.announcements[ i ] = announcement;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tenrolledNamespaces,\n\t\t\townedNamespaces\n\t\t});\n\t}\n\tcase types.DELETED_ANNOUNCEMENT: {\n\t\tconst namespaceName = action.payload.namespaceName;\n\t\tconst enrolledNamespaces = copy( state.enrolledNamespaces );\n\t\tlet ns = getNamespace( enrolledNamespaces, namespaceName );\n\t\tif ( ns ) {\n\t\t\tns.announcements.splice( action.payload.index, 1 );\n\t\t}\n\t\tconst ownedNamespaces = copy( state.ownedNamespaces );\n\t\tns = getNamespace( ownedNamespaces, namespaceName );\n\t\tif ( ns ) {\n\t\t\tns.announcements.splice( action.payload.index, 1 );\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tenrolledNamespaces,\n\t\t\townedNamespaces\n\t\t});\n\t}\n\tcase types.RECEIVED_FILES: {\n\t\treturn Object.assign({}, state, {\n\t\t\tfiles: groupBy( action.payload.files, ( v ) => {\n\t\t\t\treturn v.namespace;\n\t\t\t})\n\t\t});\n\t}\n\tcase types.GET_USER_TICKETS: {\n\t\tlet tickets = action.payload.tickets;\n\t\ttickets = tickets.map( x => {\n\t\t\tx.createdAt = new Date( x.createdAt );\n\t\t\treturn x;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.CREATED_TICKET: {\n\t\tconst tickets = state.tickets.slice();\n\t\ttickets.push({\n\t\t\t...action.payload,\n\t\t\tmessages: [],\n\t\t\tuser: {\n\t\t\t\tpicture: state.picture.substring( state.picture.lastIndexOf( '/' )+1 ),\n\t\t\t\tname: state.name,\n\t\t\t\temail: state.email\n\t\t\t}\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_OPENED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.done = false;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_CLOSED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tticket.done = true;\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.TICKET_MESSAGE_ADDED: {\n\t\tconst tickets = state.tickets.map( ticket => {\n\t\t\tif ( ticket._id === action.payload.id ) {\n\t\t\t\tconst message = action.payload.message;\n\t\t\t\tmessage.picture = message.picture.substring( message.picture.lastIndexOf( '/' )+1 );\n\t\t\t\tticket.messages.unshift( message );\n\t\t\t}\n\t\t\treturn ticket;\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\ttickets\n\t\t});\n\t}\n\tcase types.USER_RECEIVED_BADGES: {\n\t\treturn Object.assign({}, state, {\n\t\t\tbadges: action.payload.badges\n\t\t});\n\t}\n\tcase types.GET_CUSTOM_FIELDS:\n\tcase types.FIELD_POSITION_DECREMENTED:\n\tcase types.FIELD_POSITION_INCREMENTED: {\n\t\treturn Object.assign({}, state, {\n\t\t\tavailableCustomFields: action.payload.customFields\n\t\t});\n\t}\n\tcase types.DELETED_CUSTOM_FIELD: {\n\t\tconst fields = [];\n\t\tfor ( let i = 0; i < state.availableCustomFields.length; i++ ) {\n\t\t\tconst item = state.availableCustomFields[ i ];\n\t\t\tif ( item._id !== action.payload.id ) {\n\t\t\t\tfields.push( item );\n\t\t\t}\n\t\t}\n\t\treturn Object.assign({}, state, {\n\t\t\tavailableCustomFields: fields\n\t\t});\n\t}\n\tcase types.CREATED_CUSTOM_FIELD: {\n\t\tconst availableCustomFields = state.availableCustomFields.slice();\n\t\tavailableCustomFields.push({\n\t\t\t...action.payload\n\t\t});\n\t\treturn Object.assign({}, state, {\n\t\t\tavailableCustomFields\n\t\t});\n\t}\n\tcase types.ENABLED_TFA: {\n\t\treturn Object.assign({}, state, {\n\t\t\ttwoFactorAuth: action.payload.verified\n\t\t});\n\t}\n\tcase types.DISABLED_TFA: {\n\t\treturn Object.assign({}, state, {\n\t\t\ttwoFactorAuth: !action.payload.disabled\n\t\t});\n\t}\n\tcase types.REQUEST_TFA: {\n\t\treturn Object.assign({}, state, {\n\t\t\trequestTFA: {\n\t\t\t\temail: action.payload.email,\n\t\t\t\tpassword: action.payload.password\n\t\t\t}\n\t\t});\n\t}\n\tcase types.GET_TEMPLATE_LESSONS: {\n\t\treturn Object.assign({}, state, {\n\t\t\ttemplateLessons: action.payload.templateLessons\n\t\t});\n\t}\n\tdefault:\n\t\treturn state;\n\t}\n}\n\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport admin from './admin';\nimport badges from './badges';\nimport cohorts from './cohorts';\nimport namespace from './namespace';\nimport notification from './notification';\nimport translations from './translations';\nimport settings from './settings';\nimport gallery from './gallery';\nimport search from './search';\nimport user from './user';\n\n\n// EXPORTS //\n\nexport default ( history ) => combineReducers({\n\tadmin,\n\tbadges,\n\tcohorts,\n\tgallery,\n\tnamespace,\n\tnotification,\n\trouter: connectRouter( history ),\n\tsearch,\n\tsettings,\n\ttranslations,\n\tuser\n});\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport NotificationSystem from 'react-notification-system';\n\n\n// VARIABLES //\n\nconst style = {\n\tNotificationItem: {\n\t\tDefaultStyle: {\n\t\t\tmargin: '20px 2px 2px 1px'\n\t\t},\n\t\tinfo: {\n\t\t\tcolor: 'black',\n\t\t\tbackgroundColor: 'white',\n\t\t\tboxShadow: '0 0 4px darkslategray',\n\t\t\theight: '400px',\n\t\t\twidth: '400px',\n\t\t\tborderTop: 'none'\n\t\t}\n\t}\n};\n\n\n// MAIN //\n\nclass NotificationContainer extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\tcomponentDidUpdate( prevProps, prevState ) {\n\t\tconst notification = this.props.notification;\n\t\tconst prevNotification = prevProps.notification;\n\t\tif ( prevNotification.time !== notification.time ) {\n\t\t\tthis.notificationSystem.addNotification( notification );\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<NotificationSystem\n\t\t\t\tstyle={style}\n\t\t\t\tref={( elem ) => {\n\t\t\t\t\tthis.notificationSystem = elem;\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nNotificationContainer.propTypes = {\n\tnotification: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps( state ) {\n\treturn {\n\t\tnotification: state.notification\n\t};\n}\n\nexport default connect(\n\tmapStateToProps\n)( NotificationContainer );\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport capitalize from '@stdlib/string/capitalize';\nimport { ConnectedRouter } from 'connected-react-router';\nimport axios from 'axios';\nimport asyncComponent from 'components/async';\nimport server from 'constants/server';\nimport { fetchCredentialsInjector } from 'actions/authentication.js';\nimport { getEnrollableCohortsInjector } from 'actions/cohort.js';\nimport { getPublicSettingsInjector, getCustomTranslationsInjector } from 'actions/settings.js';\nimport { receivedToken } from 'actions/user.js';\nimport NotificationSystem from './notification.js';\nimport './app.css';\n\n\n// VARIABLES //\n\nconst AsyncFooterBar = asyncComponent(() => import( 'containers/visible-footer-bar' ));\nconst AsyncTerms = asyncComponent(() => import( 'containers/visible-terms' ));\nconst AsyncPrivacy = asyncComponent(() => import( 'containers/visible-privacy' ));\nconst AsyncHeaderBar = asyncComponent(() => import( 'containers/visible-header-bar' ));\nconst AsyncForgotPassword = asyncComponent(() => import( 'containers/visible-forgot-password' ));\nconst AsyncCreateNamespace = asyncComponent(() => import( 'containers/visible-create-namespace' ));\nconst AsyncEditNamespace = asyncComponent(() => import( 'containers/visible-edit-namespace' ));\nconst AsyncNewPassword = asyncComponent(() => import( 'containers/visible-new-password' ));\nconst AsyncCompleteRegistration = asyncComponent(() => import( 'containers/visible-complete-registration' ));\nconst AsyncConfirmEmail = asyncComponent(() => import( 'containers/visible-confirm-email' ));\nconst AsyncShibboleth = asyncComponent(() => import( 'containers/visible-shibboleth' ));\nconst AsyncAdminPage = asyncComponent(() => import( 'containers/visible-admin' ));\nconst AsyncAdminSettings = asyncComponent(() => import( 'containers/visible-admin-settings' ));\nconst AsyncLogin = asyncComponent(() => import( 'containers/visible-login' ));\nconst AsyncLoginTFA = asyncComponent(() => import( 'containers/visible-login-tfa' ));\nconst AsyncSignup = asyncComponent(() => import( 'containers/visible-signup' ));\nconst AsyncNamespaceData = asyncComponent(() => import( 'containers/visible-namespace-data' ));\nconst AsyncGallery = asyncComponent(() => import( 'containers/visible-gallery' ));\nconst AsyncLessonsPage = asyncComponent(() => import( 'containers/visible-lessons-page' ));\nconst AsyncProfilePage = asyncComponent(() => import( 'containers/visible-profile-page' ));\nconst AsyncEnrollPage = asyncComponent(() => import( 'containers/visible-enroll-page' ));\nconst USER_STORAGE_ID = 'ISLE_USER_'+server;\n\n\n// VARIABLES //\n\nconst ALL_LOGGEDIN_PATHS = [\n\t'/create-namespace',\n\t'/edit-namespace/:namespace',\n\t'/edit-namespace',\n\t'/namespace-data/:namespace',\n\t'/profile',\n\t'/lessons/:namespace',\n\t'/lessons',\n\t'/gallery',\n\t'/enroll',\n\t'/admin',\n\t'/admin-settings'\n];\nconst RE_PUBLIC_PAGES = /(?:courses|new-password|complete-registration|confirm-email|shibboleth|signup|login|login-tfa|terms|privacy)/;\nconst debug = logger( 'isle-dashboard' );\n\n\n// FUNCTIONS //\n\nfunction generateTitle( ) {\n\tconsole.log( window.location.hash );\n\tconst title = capitalize( window.location.hash.replace( /^\\//, '' ) );\n\tconsole.log( title );\n\treturn `${title} | ISLE Dashboard`;\n}\n\n\n// MAIN //\n\nclass App extends Component {\n\tasync componentDidMount() {\n\t\tconst history = this.props.history;\n\t\tthis.props.getCustomTranslations();\n\t\tthis.props.getPublicSettings();\n\t\tif (\n\t\t\t!this.props.isLoggedIn &&\n\t\t\t!RE_PUBLIC_PAGES.test( history.location.pathname )\n\t\t) {\n\t\t\tlet isle = localStorage.getItem( USER_STORAGE_ID );\n\t\t\tif ( isle ) {\n\t\t\t\tisle = JSON.parse( isle );\n\t\t\t\tconst user = await this.props.fetchCredentials( isle );\n\t\t\t\tif ( user ) {\n\t\t\t\t\tthis.props.getEnrollableCohorts( user );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axios.get( server+'/saml-xmw/session' );\n\t\t\t\t\tthis.props.dispatch( receivedToken( res.data ) );\n\t\t\t\t\tconst user = await this.props.fetchCredentials( res.data );\n\t\t\t\t\tif ( user ) {\n\t\t\t\t\t\tthis.props.getEnrollableCohorts( user );\n\t\t\t\t\t}\n\t\t\t\t} catch ( err ) {\n\t\t\t\t\thistory.replace( '/login' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( this.props.isLoggedIn ) {\n\t\t\tdebug( 'User is logged in, check local storage...' );\n\t\t\tconst isle = localStorage.getItem( USER_STORAGE_ID );\n\t\t\tif ( !isle ) {\n\t\t\t\tdebug( 'User is logged in, but no local storage found -> write to local storage' );\n\t\t\t\tlocalStorage.setItem( USER_STORAGE_ID, JSON.stringify({\n\t\t\t\t\ttoken: this.props.user.token,\n\t\t\t\t\tid: this.props.user.id\n\t\t\t\t}) );\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst history = this.props.history;\n\t\tconst isLoggingOut = prevProps.isLoggedIn && !this.props.isLoggedIn;\n\t\tconst isLoggingIn = !prevProps.isLoggedIn && this.props.isLoggedIn;\n\t\tconst pathname = history.location.pathname;\n\t\tif ( isLoggingIn ) {\n\t\t\tif ( pathname === '/login-tfa' ) {\n\t\t\t\tconst path = this.props.user.writeAccess ? '/lessons' : '/profile';\n\t\t\t\thistory.push( path );\n\t\t\t}\n\t\t\telse if ( pathname && pathname !== '/' && pathname !== '/login' && pathname !== '/shibboleth' ) {\n\t\t\t\tdebug( 'User has logged in, redirecting to: '+pathname );\n\t\t\t\thistory.push( history.location.pathname );\n\t\t\t} else {\n\t\t\t\tconst path = this.props.user.writeAccess ? '/lessons' : '/profile';\n\t\t\t\tdebug( 'User has logged in, redirecting to default page: '+pathname );\n\t\t\t\thistory.push( path );\n\t\t\t}\n\t\t}\n\t\telse if ( isLoggingOut ) {\n\t\t\thistory.push( '/login' );\n\t\t}\n\t\telse if (\n\t\t\tthis.props.isLoggedIn && pathname &&\n\t\t\t( pathname === '/' || pathname === '/login' || pathname === '/login-tfa' || pathname === '/shibboleth' )\n\t\t) {\n\t\t\tconst path = this.props.user.writeAccess ? '/lessons' : '/profile';\n\t\t\thistory.push( path );\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { settings } = this.props;\n\t\tlet AuthenticationBarrier = null;\n\t\tif ( this.props.isLoggedIn ) {\n\t\t\tAuthenticationBarrier =\n\t\t\t\t<Fragment>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath={ALL_LOGGEDIN_PATHS}\n\t\t\t\t\t\tcomponent={AsyncHeaderBar}\n\t\t\t\t\t\thistory={this.props.history}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/create-namespace\"\n\t\t\t\t\t\tcomponent={AsyncCreateNamespace}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/edit-namespace/:namespace\"\n\t\t\t\t\t\tcomponent={AsyncEditNamespace}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/namespace-data/:namespace\" exact\n\t\t\t\t\t\tcomponent={AsyncNamespaceData}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/namespace-data/:namespace/:subpage\"\n\t\t\t\t\t\tcomponent={AsyncNamespaceData}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/profile\"\n\t\t\t\t\t\tcomponent={AsyncProfilePage}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/lessons\" exact\n\t\t\t\t\t\tcomponent={AsyncLessonsPage}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/lessons/:namespace\"\n\t\t\t\t\t\tcomponent={AsyncLessonsPage}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/gallery\"\n\t\t\t\t\t\tcomponent={AsyncGallery}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/enroll\"\n\t\t\t\t\t\tcomponent={AsyncEnrollPage}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/admin\" exact\n\t\t\t\t\t\tcomponent={AsyncAdminPage}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/admin/:subpage\"\n\t\t\t\t\t\tcomponent={AsyncAdminPage}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/admin/settings\" exact\n\t\t\t\t\t\tcomponent={AsyncAdminSettings}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/admin/settings/:subpage\"\n\t\t\t\t\t\tcomponent={AsyncAdminSettings}\n\t\t\t\t\t/>\n\t\t\t\t</Fragment>;\n\t\t}\n\t\treturn (\n\t\t\t<HelmetProvider>\n\t\t\t\t<ConnectedRouter history={this.props.history}>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t{AuthenticationBarrier}\n\t\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t\t<title>{generateTitle()}</title>\n\t\t\t\t\t\t</Helmet>\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath=\"/*\"\n\t\t\t\t\t\t\tcomponent={AsyncFooterBar}\n\t\t\t\t\t\t\thistory={this.props.history}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Route exact path=\"/\" component={AsyncLogin} />\n\t\t\t\t\t\t<Route path=\"/login\" component={AsyncLogin} />\n\t\t\t\t\t\t<Route path=\"/login-tfa\" component={AsyncLoginTFA} />\n\t\t\t\t\t\t<Route path=\"/new-password\" component={AsyncNewPassword} />\n\t\t\t\t\t\t<Route path=\"/complete-registration\" component={AsyncCompleteRegistration} />\n\t\t\t\t\t\t<Route path=\"/confirm-email\" component={AsyncConfirmEmail} />\n\t\t\t\t\t\t<Route path=\"/shibboleth\" component={AsyncShibboleth} />\n\t\t\t\t\t\t{settings.allowUserRegistrations ? <Route path=\"/signup\" component={AsyncSignup} /> : null}\n\t\t\t\t\t\t<Route path=\"/forgot-password\" component={AsyncForgotPassword} />\n\t\t\t\t\t\t<Route path=\"/terms\" component={AsyncTerms} />\n\t\t\t\t\t\t<Route path=\"/privacy\" component={AsyncPrivacy} />\n\t\t\t\t\t\t<NotificationSystem />\n\t\t\t\t\t</div>\n\t\t\t\t</ConnectedRouter>\n\t\t\t</HelmetProvider>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nApp.propTypes = {\n\tdispatch: PropTypes.func.isRequired,\n\tfetchCredentials: PropTypes.func.isRequired,\n\tgetCustomTranslations: PropTypes.func.isRequired,\n\tgetEnrollableCohorts: PropTypes.func.isRequired,\n\tgetPublicSettings: PropTypes.func.isRequired,\n\thistory: PropTypes.object.isRequired,\n\tisLoggedIn: PropTypes.bool.isRequired,\n\tsettings: PropTypes.object.isRequired,\n\tuser: PropTypes.object.isRequired\n};\n\n\n// EXPORTS //\n\nexport default connect( mapStateToProps, mapDispatchToProps )( App );\n\nfunction mapStateToProps( state ) {\n\treturn {\n\t\tisLoggedIn: state.user.loggedIn,\n\t\tuser: state.user,\n\t\tsettings: state.settings\n\t};\n}\n\nfunction mapDispatchToProps( dispatch ) {\n\treturn {\n\t\tdispatch: dispatch,\n\t\tfetchCredentials: fetchCredentialsInjector( dispatch ),\n\t\tgetCustomTranslations: getCustomTranslationsInjector( dispatch ),\n\t\tgetPublicSettings: getPublicSettingsInjector( dispatch ),\n\t\tgetEnrollableCohorts: getEnrollableCohortsInjector( dispatch )\n\t};\n}\n","/**\n* MIT License\n*\n* Copyright (c) 2013-present, Facebook, Inc.\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/* eslint-disable no-process-env, no-console */\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register( config ) {\n\tif ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${window.location.origin}${window.location.pathname}service-worker.js`;\n\t\t\tif ( isLocalhost ) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker( swUrl, config );\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW( swUrl, config );\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW( swUrl, config ) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif ( installingWorker === null ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif ( installingWorker.state === 'installed' ) {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\tAt this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t\tbut the previous service worker will still serve the older\n\t\t\t\t\t\t\t\tcontent until all client tabs are closed.\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\tAt this point, everything has been precached.\n\t\t\t\t\t\t\t\tIt's the perfect time to display a\n\t\t\t\t\t\t\t\t\"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error( 'Error during service worker registration:', error );\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType !== null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ( 'serviceWorker' in navigator ) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport 'react-dates/initialize';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport localforage from 'localforage';\nimport { Provider } from 'react-redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { createHashHistory } from 'history';\nimport { createStore, applyMiddleware } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from 'reducers';\nimport App from 'containers/app.js';\nimport * as serviceWorker from './service_worker.js';\nimport './helpers/axios';\nimport 'css/animations.css';\nimport 'css/index.css';\n\n\n// VARIABLES //\n\nconst persistConfig = {\n\tkey: 'root',\n\tblacklist: [ 'router', 'license', 'requestTFA' ],\n\tstorage: localforage\n};\nconst history = createHashHistory();\nconst rootReducer = createRootReducer( history );\nconst persistedReducer = persistReducer( persistConfig, rootReducer );\n\n// Apply the middleware to the store:\nconst middleware = routerMiddleware( history );\nexport const store = createStore( persistedReducer, applyMiddleware( middleware ) );\nconst persistor = persistStore( store );\n\n\n// MAIN //\n\nReactDOM.render(\n\t<Provider store={store} >\n\t\t<PersistGate loading={null} persistor={persistor}>\n\t\t\t<App history={history} />\n\t\t</PersistGate>\n\t</Provider>,\n\tdocument.getElementById( 'root' )\n);\n\nserviceWorker.register();\n"],"names":["debug","logger","sanitizeRequest","dispatch","user","axios","server","id","err","addErrorNotification","sanitizeRequestInjector","async","fetchCredentials","obj","localStorage","setItem","JSON","stringify","data","picture","sanitizedUser","needsSanitizing","ownedNamespaces","newOwnedNamespaces","ids","Set","i","length","has","_id","add","push","enrolledNamespaces","newEnrolledNamespaces","sanitizeUser","loggedIn","fetchCredentialsInjector","shibbolethInjector","eppn","name","affil","time","salt","token","result","res","receivedToken","shibboleth","retrievedEnrollableCohorts","cohorts","type","RETRIEVED_ENROLLABLE_COHORTS","payload","getEnrollableCohorts","getEnrollableCohortsInjector","getCohorts","namespaceID","qs","RETRIEVED_COHORTS","addUserToCohort","cohortID","namespace","addNotification","message","level","title","owners","description","ADD_ENROLLED_NAMESPACE","addEnrolledNamespace","namespaceName","getLessons","addUserToCohortInjector","deleteCohortInjector","deleteCohort","createCohortInjector","cohort","createCohort","updateCohortInjector","notification","msg","newEmails","children","i18next","join","autoDismiss","dismissible","updateCohort","getAllCohorts","GET_ALL_COHORTS","getAllCohortsInjector","deletedLesson","lessonName","DELETED_LESSON","updatedLesson","props","UPDATED_LESSON","retrievedLessons","lessons","RETRIEVED_LESSONS","getPublicLessons","RETRIEVED_PUBLIC_LESSONS","getPublicLessonsInjector","getIsleFileInjector","file","getIsleFile","map","lesson","index","colorIndex","url","lockUntil","Date","createdAt","toLocaleString","updatedAt","getLessonsInjector","copyLessonInjector","sourceName","target","targetName","source","copyLesson","copyNamespaceLessonsInjector","copyNamespaceLessons","deleteLessonInjector","Error","deleteLesson","showLessonInGalleryInjector","public","showLessonInGallery","hideLessonInGalleryInjector","hideLessonInGallery","activateLessonInjector","active","activateLesson","deactivateLessonInjector","deactivateLesson","updateLessonInjector","newTitle","newDescription","lockAfter","hideFromDashboard","template","bool","query","isBoolean","updateLesson","getAllLessons","GET_ALL_LESSONS","getAllLessonsInjector","getTemplateLessons","templateLessons","GET_TEMPLATE_LESSONS","getTemplateLessonsInjector","getRooms","rooms","GET_ROOMS","getRoomsInjector","ADD_NOTIFICATION","addNotificationInjector","response","status","ADD_ERROR_NOTIFICATION","getSettingsInjector","GET_SETTINGS","getSettings","getPublicSettingsInjector","GET_SETTINGS_PUBLIC","getPublicSettings","updateSettingsInjector","value","UPDATED_SETTINGS","updateSettings","addCustomTranslationInjector","language","ns","key","UPDATED_TRANSLATIONS","addCustomTranslation","getCustomTranslationsInjector","GET_CUSTOM_TRANSLATIONS","getCustomTranslations","removeCustomTranslationInjector","removeCustomTranslation","LOGGED_IN","email","verifiedEmail","organization","writeAccess","administrator","lessonData","score","spentTime","licensed","customFields","availableCustomFields","twoFactorAuth","RECEIVED_TOKEN","getUsersInjector","GET_USERS","users","getUsers","impersonateUserInjector","password","JWT","userVal","impersonateUser","deleteUserInjector","DELETED_USER","deleteUser","uploadProfilePic","avatarData","thumbnailData","filename","USER_PICTURE_MODIFIED","position","uploadProfilePicInjector","authenticate","writeAccessToken","AUTHENTICATED","authenticateInjector","forgotPasswordInjector","forgotPassword","updateUser","form","USER_UPDATED","updatedUser","updateUserInjector","createUser","handleLogin","REQUEST_TFA","requestTFA","handleLoginInjector","handleLoginTFAInjector","handleLoginTFA","restoreLoginInjector","restoreLogin","logout","removeItem","LOGGED_OUT","logoutInjector","userUpdateCheckInjector","hasMostRecent","newUser","userUpdateCheck","confirmEmail","resendConfirmEmailInjector","resendConfirmEmail","adminUpdateUser","USER_UPDATED_BY_ADMIN","adminUpdateUserInjector","className","importComponent","AsyncComponent","Component","constructor","super","this","state","component","default","setState","render","C","APPEND_CREATED_NAMESPACE","CHANGED_NAMESPACE","CREATED_ANNOUNCEMENT","CREATED_CUSTOM_FIELD","CREATED_BACKUP","CREATED_ROLE","CREATED_TICKET","DELETED_BACKUP","DELETED_CURRENT_NAMESPACE","DELETED_CUSTOM_FIELD","DELETED_EVENT","DELETED_FILE","DELETED_ROLE","DELETED_TICKET","DELETED_ANNOUNCEMENT","DISABLED_TFA","EDITED_ANNOUNCEMENT","ENABLED_TFA","FIELD_POSITION_DECREMENTED","FIELD_POSITION_INCREMENTED","GET_ALL_FILES","GET_ALL_NAMESPACES","GET_ALL_ROLES","GET_BACKUPS","GET_EVENTS","GET_ALL_TICKETS","GET_COURSE_TICKETS","GET_CUSTOM_FIELDS","GET_OVERVIEW_STATISTICS","GET_HISTORICAL_OVERVIEW_STATISTICS","GET_REQUEST_STATISTICS","GET_TFA_QRCODE","GET_USER_TICKETS","LESSON_ORDER","LESSON_ORDER_DIRECTION","RECEIVED_FILES","RECEIVED_LICENSE","RECEIVED_NAMESPACE_FILES","REMOVED_LICENSE","RETRIEVED_BADGES","SEARCH_PHRASE_SET","TICKET_CLOSED","TICKET_OPENED","TICKET_MESSAGE_ADDED","TICKET_PRIORITY_UPDATED","TRIGGERED_EVENT","UPDATED_OWNED_NAMESPACE","USER_RECEIVED_BADGES","UPDATED_ROLE","UPDATED_STUDENT_PROGRESS","serverJSON","window","location","origin","config","headers","store","Authorization","namespaceClient","interceptors","request","use","params","lessonClient","lessonID","globalClient","namespaceAxios","globalAxios","i18n","Backend","LanguageDetector","initReactI18next","init","lng","getItem","fallbackLng","backend","backends","HttpApi","backendOptions","loadPath","react","useSuspense","interpolation","escapeValue","custom","translations","keys","Object","initialState","events","files","lessonsMap","namespaces","roles","tickets","statistics","requestStatistics","historicalStatistics","backups","license","settings","admin","action","types","x","objectKeys","chatMessages","nActions","actionTypes","j","assign","startDate","endDate","filter","startTime","slice","done","ticket","priority","substring","lastIndexOf","messages","unshift","indexOf","backup","role","badges","titleCompare","a","b","localeCompare","isArray","elem","emailFilter","isRegExpString","reFromString","test","contains","sort","enableTicketing","announcements","ownerFiles","progress","members","hasOwnProp","newState","owner","announcement","splice","phrase","direction","search","lowercase","LOCATION_CHANGE","getNamespace","arr","item","copy","groupBy","v","fields","verified","disabled","style","NotificationItem","DefaultStyle","margin","info","color","backgroundColor","boxShadow","height","width","borderTop","NotificationContainer","componentDidUpdate","prevProps","prevState","notificationSystem","ref","propTypes","PropTypes","connect","AsyncFooterBar","asyncComponent","AsyncTerms","AsyncPrivacy","AsyncHeaderBar","AsyncForgotPassword","AsyncCreateNamespace","AsyncEditNamespace","AsyncNewPassword","AsyncCompleteRegistration","AsyncConfirmEmail","AsyncShibboleth","AsyncAdminPage","AsyncAdminSettings","AsyncLogin","AsyncLoginTFA","AsyncSignup","AsyncNamespaceData","AsyncGallery","AsyncLessonsPage","AsyncProfilePage","AsyncEnrollPage","USER_STORAGE_ID","ALL_LOGGEDIN_PATHS","RE_PUBLIC_PAGES","App","history","isLoggedIn","pathname","isle","parse","replace","isLoggingOut","isLoggingIn","path","AuthenticationBarrier","Fragment","exact","console","log","hash","capitalize","generateTitle","allowUserRegistrations","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","persistConfig","blacklist","storage","localforage","createHashHistory","rootReducer","combineReducers","gallery","router","connectRouter","persistedReducer","persistReducer","middleware","routerMiddleware","createStore","applyMiddleware","persistor","persistStore","ReactDOM","loading","document","getElementById","addEventListener","fetch","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"sourceRoot":""}