{"version":3,"file":"static/js/LineplotMenu.17633424.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/data-explorer/menu/lineplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js"],"sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport SelectInput from '@isle-project/components/input/select';\nimport selectStyles from '@isle-project/components/input/select/styles';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport LinePlot from '@isle-project/components/plots/lineplot';\nimport { DATA_EXPLORER_SHARE_LINEPLOT, DATA_EXPLORER_LINEPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// FUNCTIONS //\n\nfunction createOption( label ) {\n\treturn {\n\t\tlabel,\n\t\tvalue: label\n\t};\n}\n\n\n// MAIN //\n\nconst LinePlotMenu = ( props ) => {\n\tconst { categorical, data, defaultValue, variables, groupingVariables, t, session, logAction, onCreated } = props;\n\tconst [ x, setX ] = useState( null );\n\tconst [ y, setY ] = useState( defaultValue || variables[ 0 ] );\n\tconst [ group, setGroup ] = useState( null );\n\tconst [ showPoints, setShowPoints ] = useState( false );\n\tconst generateLinePlot = () => {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx,\n\t\t\ty,\n\t\t\tgroup,\n\t\t\tplotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_LINEPLOT, action );\n\t\t};\n\t\tconst output = <LinePlot\n\t\t\tdata={data} x={x} y={y}\n\t\t\tgroup={group} showPoints={showPoints}\n\t\t\tonShare={onShare} action={action} id={plotId}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_LINEPLOT, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Line Plot')}\n\t\t\t\t<QuestionButton title={t('Line Plot')} content={t('Line Plot-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<FormGroup controlId=\"lineplot-form-select\">\n\t\t\t\t\t<FormLabel>{t('x-axis')}</FormLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tlegend={t('x-axis')}\n\t\t\t\t\t\tdefaultValue={null}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Quantitative',\n\t\t\t\t\t\t\t\toptions: variables.map( createOption )\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Categorical',\n\t\t\t\t\t\t\t\toptions: categorical.map( createOption )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tonChange={( elem ) => {\n\t\t\t\t\t\t\tsetX( elem ? elem.value : null );\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder=\"Select... (optional)\"\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tstyles={selectStyles}\n\t\t\t\t\t\tmenuPortalTarget={document.body}\n\t\t\t\t\t\tmenuPlacement=\"auto\"\n\t\t\t\t\t\tmenuShouldScrollIntoView={false}\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('y-axis')}\n\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={setY}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('group-by')}\n\t\t\t\t\tdefaultValue={group}\n\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\tclearable={true}\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\tonChange={setGroup}\n\t\t\t\t/>\n\t\t\t\t<CheckboxInput\n\t\t\t\t\tlegend={t('show-point-markers')}\n\t\t\t\t\tdefaultValue={showPoints}\n\t\t\t\t\tonChange={setShowPoints}\n\t\t\t\t/>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateLinePlot}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nLinePlotMenu.defaultProps = {\n\tdefaultValue: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {}\n};\n\nLinePlotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultValue: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tcategorical: PropTypes.array.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default LinePlotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"names":["createOption","label","value","LinePlotMenu","props","categorical","data","defaultValue","variables","groupingVariables","t","session","logAction","onCreated","useState","x","setX","y","setY","group","setGroup","showPoints","setShowPoints","as","title","content","controlId","legend","options","map","onChange","elem","placeholder","isClearable","styles","selectStyles","menuPortalTarget","document","body","menuPlacement","menuShouldScrollIntoView","clearable","variant","block","onClick","plotId","randomstring","action","output","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_LINEPLOT","id","DATA_EXPLORER_LINEPLOT","defaultProps","popover","trigger","placement","rootClose","overlay","size","className","uid","generateUID","CheckboxInput","bind","disabled","useRef","useContext","SessionContext","state","setValue","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onKeyPress","onSpanChange","noop"],"sourceRoot":""}