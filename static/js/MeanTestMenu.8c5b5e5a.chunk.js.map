{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/meantest.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js"],"names":[],"mappings":"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","file":"static/js/MeanTestMenu.8c5b5e5a.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport NumberInput from '@isle-project/components/input/number';\nimport SelectInput from '@isle-project/components/input/select';\nimport TeX from '@isle-project/components/tex';\nimport MeanTest from '@isle-project/components/tests/meantest';\nimport { DATA_EXPLORER_TESTS_MEAN } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// MAIN //\n\nconst MeanTestMenu = ( props ) => {\n\tconst { data, showDecision, quantitative, t } = props;\n\tconst [ type, setType ] = useState( 'T Test' );\n\tconst [ variable, setVariable ] = useState( null );\n\tconst [ mu0, setMu0 ] = useState( 0 );\n\tconst [ direction, setDirection ] = useState( 'two-sided' );\n\tconst [ alpha, setAlpha ] = useState( 0.05 );\n\tconst [ stdev, setStdev ] = useState( null );\n\n\tconst calculateMeanTest = () => {\n\t\tconst output = <MeanTest\n\t\t\tdata={data}\n\t\t\tvariable={variable}\n\t\t\tshowDecision={showDecision}\n\t\t\tmu0={mu0}\n\t\t\tdirection={direction}\n\t\t\tstdev={stdev}\n\t\t\ttype={type}\n\t\t\talpha={alpha}\n\t\t/>;\n\t\tprops.logAction( DATA_EXPLORER_TESTS_MEAN, {\n\t\t\tvariable, mu0, direction, alpha, type, stdev, showDecision\n\t\t});\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card\n\t\t\tstyle={{ fontSize: '14px' }}\n\t\t>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('One-Sample Mean Test')}\n\t\t\t\t<QuestionButton title={t('One-Sample Mean Test')} content={t('One-Sample Mean Test-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body className=\"d-grid gap-3\" >\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('type-of-test')}\n\t\t\t\t\tdefaultValue={type}\n\t\t\t\t\toptions={[ 'T Test', 'Z Test' ]}\n\t\t\t\t\tonChange={setType}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('variable')}\n\t\t\t\t\tdefaultValue={null}\n\t\t\t\t\toptions={quantitative}\n\t\t\t\t\tonChange={setVariable}\n\t\t\t\t/>\n\t\t\t\t{ type === 'Z Test' ?\n\t\t\t\t\t<NumberInput\n\t\t\t\t\t\tlegend={t('standard-deviation')}\n\t\t\t\t\t\tdefaultValue={stdev}\n\t\t\t\t\t\tstep=\"any\"\n\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\tonChange={setStdev}\n\t\t\t\t\t\tinputStyle={{\n\t\t\t\t\t\t\twidth: 140\n\t\t\t\t\t\t}}\n\t\t\t\t\t/> : null\n\t\t\t\t}\n\t\t\t\t<NumberInput\n\t\t\t\t\tlegend={<span><TeX raw=\"H_0\" /> mean value (<TeX raw=\"\\mu_0\" />)</span>}\n\t\t\t\t\tdefaultValue={mu0}\n\t\t\t\t\tstep=\"any\"\n\t\t\t\t\tonChange={setMu0}\n\t\t\t\t/>\n\t\t\t\t<NumberInput\n\t\t\t\t\tlegend={<span>{t('significance-level')}<TeX raw=\"\\alpha\" /></span>}\n\t\t\t\t\tdefaultValue={alpha}\n\t\t\t\t\tmin={0.0}\n\t\t\t\t\tmax={1.0}\n\t\t\t\t\ttooltipPlacement=\"left\"\n\t\t\t\t\tstep=\"any\"\n\t\t\t\t\tonChange={setAlpha}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('direction')}\n\t\t\t\t\tdefaultValue={direction}\n\t\t\t\t\toptions={[ 'less', 'greater', 'two-sided' ]}\n\t\t\t\t\tonChange={setDirection}\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"primary\" onClick={calculateMeanTest}\n\t\t\t\t\tdisabled={!variable}\n\t\t\t\t>\n\t\t\t\t\t{t('calculate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nMeanTestMenu.defaultProps = {\n\tlogAction() {},\n\tshowDecision: true\n};\n\nMeanTestMenu.propTypes = {\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func.isRequired,\n\tshowDecision: PropTypes.bool\n};\n\n\n// EXPORTS //\n\nexport default MeanTestMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverHeader from 'react-bootstrap/PopoverHeader';\nimport PopoverBody from 'react-bootstrap/PopoverBody';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverHeader>{props.title}</PopoverHeader>\n\t\t<PopoverBody>{props.content}</PopoverBody>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\taria-label={props.title}\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\n\n// PROPERTIES //\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\n/**\n * Creates a tooltip for a number input.\n *\n * @param {Object} options - function options\n * @param {number} options.min - minimum value\n * @param {number} options.max - maximum value\n * @param {number} options.step - step size\n * @param {Function} options.t - translation function\n * @returns {string} tooltip\n */\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n"],"sourceRoot":""}