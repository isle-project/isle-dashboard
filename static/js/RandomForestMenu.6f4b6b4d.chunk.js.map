{"version":3,"file":"static/js/RandomForestMenu.6f4b6b4d.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/collapse/index.js","../node_modules/@isle-project/components/data-explorer/menu/random_forest.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js"],"sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Collapse = Loadable( () => import( /* webpackChunkName: \"Collapse\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Collapse;\n","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport unique from 'uniq';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport copy from '@stdlib/utils/copy';\nimport floor from '@stdlib/math/base/special/floor';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport SelectInput from '@isle-project/components/input/select';\nimport NumberInput from '@isle-project/components/input/number';\nimport Collapse from '@isle-project/components/collapse';\nimport RandomForest from '@isle-project/components/models/random-forest';\nimport { DATA_EXPLORER_RANDOM_FOREST } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// VARIABLES //\n\nconst DESCRIPTION = 'Instead of growing a single decision tree, a random forest as an ensemble method constructs many decision trees at once and returns the average of the predictions (regression case) or the majority vote (classification case) of the individual trees';\n\n\n// FUNCTIONS //\n\nfunction chooseTries( x, type ) {\n\tif ( !x ) {\n\t\treturn 1;\n\t}\n\tif ( type === 'Classificiation' ) {\n\t\treturn floor( sqrt( x.length ) );\n\t}\n\tif ( x.length < 3 ) {\n\t\treturn 1;\n\t}\n\treturn floor( x.length / 3 );\n}\n\n\n// MAIN //\n\nclass RandomForestMenu extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\ty: props.categorical[ 0 ],\n\t\t\tx: props.quantitative[ 0 ],\n\t\t\ttype: 'Classification',\n\t\t\tnTrees: 50,\n\t\t\tnTry: 1,\n\t\t\timpurityMeasure: 'gini',\n\t\t\tscoreThreshold: 0.01,\n\t\t\tmaxTreeDepth: 20,\n\t\t\tminItemsCount: 50\n\t\t};\n\t}\n\n\tcompute = () => {\n\t\tlet { y, x, type, nTrees, nTry, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount } = this.state;\n\t\tconst output = <RandomForest\n\t\t\tx={x} y={y} type={type} nTrees={nTrees} nTry={nTry}\n\t\t\timpurityMeasure={impurityMeasure}\n\t\t\tscoreThreshold={scoreThreshold}\n\t\t\tmaxTreeDepth={maxTreeDepth}\n\t\t\tminItemsCount={minItemsCount}\n\t\t\tquantitative={this.props.quantitative}\n\t\t\tdata={this.props.data}\n\t\t\tonPredict={( forest, counter ) => {\n\t\t\t\tconst newData = copy( this.props.data, 1 );\n\t\t\t\tif ( type === 'Classification' ) {\n\t\t\t\t\tconst newCategorical = this.props.categorical.slice();\n\t\t\t\t\tconst yhat = forest.predict( newData ).map( x => String( x ) );\n\t\t\t\t\tlet name = 'pred_forest' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'correct_forest' + counter;\n\t\t\t\t\tconst yvalues = this.props.data[ y ];\n\t\t\t\t\tnewData[ name ] = yhat.map( ( x, i ) => x === String( yvalues[ i ] ) ? 'Yes' : 'No' );\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tthis.props.onGenerate( this.props.quantitative, newCategorical, newData );\n\t\t\t\t}\n\t\t\t}}\n\t\t/>;\n\t\tthis.props.logAction( DATA_EXPLORER_RANDOM_FOREST, {\n\t\t\ty, x, type, nTrees, nTry\n\t\t});\n\t\tthis.props.onCreated( output );\n\t}\n\n\trender() {\n\t\tconst { categorical, quantitative, t } = this.props;\n\t\tconst { x, y, type, nTrees, nTry } = this.state;\n\t\treturn (\n\t\t\t<Card\n\t\t\t\tstyle={{ fontSize: '14px', maxWidth: 600 }}\n\t\t\t>\n\t\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t\t{t('Random Forest')}\n\t\t\t\t\t<QuestionButton title={t('Random Forest')} content={DESCRIPTION} />\n\t\t\t\t</Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('type')}\n\t\t\t\t\t\toptions={[ 'Classification' ]}\n\t\t\t\t\t\tdefaultValue={type}\n\t\t\t\t\t\tonChange={( type ) => {\n\t\t\t\t\t\t\tif ( type !== this.state.type ) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\ty: type === 'Classification' ? categorical[ 0 ] : quantitative[ 0 ],\n\t\t\t\t\t\t\t\t\tnTry: chooseTries( this.state.x, type )\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('outcome-y')}\n\t\t\t\t\t\toptions={type === 'Classification' ? categorical : quantitative}\n\t\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\t\tonChange={( y ) => this.setState({ y })}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('predictors-x')} multi\n\t\t\t\t\t\toptions={unique( quantitative.concat( categorical ) )}\n\t\t\t\t\t\tdefaultValue={x || ''}\n\t\t\t\t\t\tonChange={( x ) => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\tnTry: chooseTries( x, type )\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput\n\t\t\t\t\t\tlegend={t('number-of-trees')}\n\t\t\t\t\t\tdefaultValue={nTrees}\n\t\t\t\t\t\tinputStyle={{ float: 'right' }}\n\t\t\t\t\t\tonChange={( nTrees) => this.setState({ nTrees })}\n\t\t\t\t\t\ttooltipPlacement=\"top\"\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput\n\t\t\t\t\t\tlegend={t('predictors-to-check')}\n\t\t\t\t\t\tdefaultValue={nTry}\n\t\t\t\t\t\tinputStyle={{ float: 'right' }}\n\t\t\t\t\t\tonChange={( nTry ) => this.setState({ nTry })}\n\t\t\t\t\t\ttooltipPlacement=\"top\"\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tmax={isArray( x ) ? x.length : 1}\n\t\t\t\t\t/>\n\t\t\t\t\t<Collapse header={t('change-tree-features')} headerStyle={{ fontSize: '1rem' }} >\n\t\t\t\t\t\t<NumberInput legend={t('score-threshold-for-split')}\n\t\t\t\t\t\t\tmin={0} max={1} step={0.001}\n\t\t\t\t\t\t\tdefaultValue={this.state.scoreThreshold} onChange={( scoreThreshold ) => this.setState({ scoreThreshold })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<NumberInput legend={t('maximum-tre-depth')}\n\t\t\t\t\t\t\tmin={1} max={50}\n\t\t\t\t\t\t\tdefaultValue={this.state.maxTreeDepth} onChange={( maxTreeDepth ) => this.setState({ maxTreeDepth })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<NumberInput legend={t('min-obs-leafs')}\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tdefaultValue={this.state.minItemsCount}\n\t\t\t\t\t\t\tonChange={( minItemsCount ) => this.setState({ minItemsCount })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Collapse>\n\t\t\t\t\t{ type === 'Classification' ? <SelectInput\n\t\t\t\t\t\tlegend={t('impurity-measure')}\n\t\t\t\t\t\tdefaultValue={this.state.impurityMeasure}\n\t\t\t\t\t\toptions={[ 'gini', 'entropy' ]}\n\t\t\t\t\t\tonChange={( impurityMeasure ) => this.setState({ impurityMeasure })}\n\t\t\t\t\t/> : null }\n\t\t\t\t\t<Button disabled={!x || x.length === 0} variant=\"primary\" block onClick={this.compute}>\n\t\t\t\t\t\t{t('calculate')}\n\t\t\t\t\t</Button>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nRandomForestMenu.defaultProps = {\n\tlogAction() {}\n};\n\nRandomForestMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default RandomForestMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n"],"names":["Collapse","Loadable","chooseTries","x","type","floor","sqrt","length","RandomForestMenu","props","state","y","nTrees","nTry","impurityMeasure","scoreThreshold","maxTreeDepth","minItemsCount","output","quantitative","data","onPredict","forest","counter","newData","copy","newCategorical","categorical","slice","yhat","predict","map","String","name","contains","push","yvalues","i","onGenerate","logAction","DATA_EXPLORER_RANDOM_FOREST","onCreated","this","t","style","fontSize","maxWidth","as","title","content","legend","options","defaultValue","onChange","setState","multi","unique","concat","inputStyle","float","tooltipPlacement","min","max","isArray","header","headerStyle","step","disabled","variant","block","onClick","compute","Component","defaultProps","popover","id","trigger","placement","rootClose","overlay","size","className","tooltip","PINF","NINF","debug","logger","uid","generateUID","NumberInput","useRef","bind","propValue","value","onBlur","useTranslation","session","useContext","SessionContext","useState","setValue","useEffect","globalValue","global","lesson","isNumber","handleChange","useCallback","event","valid","target","validity","newValue","parseFloat","isnan","finishChange","splitted","split","isNull","createTooltip","inline","input","padding","htmlFor","current","numbersOnly","width","paddingLeft","marginLeft","onKeyPress","onKeyDown","onKeyUp","autoComplete","description","show","marginBottom","marginTop","isString"],"sourceRoot":""}