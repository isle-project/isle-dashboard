{"version":3,"sources":["../node_modules/@isle-project/components/internal/fullscreen-button/index.js","../node_modules/@isle-project/components/panel/main.js"],"names":[],"mappings":"0sBAYA,kBALyB,eAAU,IAAM,uF,giCCQzC,KAAM,QAAS,CAAC,CAAE,SAAU,UAAW,YAAa,OAAQ,YAAa,UAAW,cAAiB,CACpG,KAAM,CAAE,GAAM,gBAAgB,SAC9B,MAAM,UAGG,oBAAC,sBAAD,CAAa,GAAI,WACzB,oBAAC,OAAD,CAAM,UAAU,gBAAiB,UACjC,oBAAC,MAAD,CAAK,MAAO,CAAE,MAAO,UACnB,YAAc,oBAAC,UAAD,CAAS,QAAqB,EAAZ,UAAe,WAAkB,YAAc,UAAU,QAC1F,oBAAC,SAAD,CACC,aAAwB,EAAZ,UAAe,WAAkB,YAC7C,UAAW,gBAAgB,UAAY,yBAA2B,2BAClE,QAAS,cAEE,KACX,OACD,oBAAC,UAAD,CAAS,QAAS,aAAe,EAAG,UACnC,oBAAC,SAAD,CACC,aAAY,EAAG,SACf,UAAU,2BACV,QAAS,UAEE,OAnBP,MA+CH,MAAS,IAAkN,CAAlN,UAAE,WAAW,OAAQ,UAAW,OAAQ,UAAW,YAAa,iBAAkB,WAAY,YAAa,OAAQ,MAAO,UAAW,cAAe,YAAa,gBAAiB,SAAU,QAA5L,GAAuM,eAAvM,GAAuM,CAArM,YAAW,SAAQ,YAAW,SAAQ,YAAW,cAAa,mBAAkB,aAAY,cAAa,SAAQ,QAAO,YAAW,gBAAe,cAAa,kBAAiB,WAAU,WAC1M,KAAM,CAAE,UAAW,cAAiB,mBAAU,YAAc,iBAAmB,IACzE,QAAU,iBAAQ,MAClB,KAAO,oBAAC,eAAD,gCACR,MADQ,CAEZ,UAAW,SAAS,YACpB,MAAO,gBACN,OAAQ,UAAY,OAAS,QAC1B,OAEJ,IAAK,UAEH,WAAa,oBAAC,kBAAD,CACd,OACA,KAAM,SACN,OACA,UACA,MAAK,KACD,KACL,oBAAC,OAAD,CACC,YAA0B,UAC1B,WAAY,IAAM,CACjB,aAAc,CAAC,YAEhB,YAA0B,OAC1B,WAEC,QAEF,oBAAC,oBAAD,CAAW,MAAO,gCACd,WADc,CAEjB,QAAS,UAAY,OAAS,OAC5B,UAAW,eACZ,UAED,OAAS,oBAAC,sBAAD,CACT,MAAO,gCACH,aADG,CAEN,QAAS,UAAY,OAAS,OAE/B,UAAW,iBACV,QAAwB,MAE3B,MAAK,WACK,oBAAC,2BAAD,CAAW,iBAAkB,CACrC,wBAAyB,GACzB,aAAc,IACN,QAAQ,UAGf,MAGI,MAMR,MAAM,UAAY,CACjB,UAAW,4BACX,OAAQ,+BAAoB,CAC3B,4BACA,4BAED,UAAW,4BACX,OAAQ,+BAAoB,CAC3B,4BACA,4BAED,YAAa,0BACb,iBAAkB,0BAClB,WAAY,0BACZ,YAAa,4BACb,UAAW,0BACX,UAAW,4BACX,YAAa,4BACb,cAAe,4BACf,gBAAiB,4BACjB,MAAO,4BACP,OAAQ,2BAGT,MAAM,aAAe,CACpB,UAAW,GACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,YAAa,GACb,iBAAkB,GAClB,WAAY,GACZ,YAAa,KACb,UAAW,GACX,UAAW,GACX,YAAa,GACb,cAAe,GACf,gBAAiB,GACjB,MAAO,GACP,OAAQ,MAMT,SAAe,iBAAe","file":"static/js/Panel.06b693b2.chunk.js","sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst FullscreenButton = Loadable( () => import( /* webpackChunkName: \"FullscreenButton\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default FullscreenButton;\n","// MODULES //\n\nimport React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport Card from 'react-bootstrap/Card';\nimport FocusTrap from 'focus-trap-react';\nimport Tooltip from '@isle-project/components/tooltip';\nimport FullscreenButton from '@isle-project/components/internal/fullscreen-button';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport './panel.css';\n\n\n// FUNCTIONS //\n\nconst Header = ({ children, headerTag, hideTooltip, onHide, minimizable, minimized, onMinimize }) => {\n\tconst { t } = useTranslation( 'panel' );\n\tif ( !children ) {\n\t\treturn null;\n\t}\n\treturn ( <Card.Header as={headerTag} >\n\t\t<span className=\"unselectable\" >{children}</span>\n\t\t<div style={{ float: 'right' }} >\n\t\t{ minimizable ? <Tooltip tooltip={minimized ? t( 'maximize' ) : t( 'minimize' )} placement=\"left\" >\n\t\t\t<button\n\t\t\t\taria-label={minimized ? t( 'maximize' ) : t( 'minimize' )}\n\t\t\t\tclassName={`panel-button ${minimized ? 'far fa-window-maximize' : 'fas fa-window-minimize'}`}\n\t\t\t\tonClick={onMinimize}\n\t\t\t/>\n\t\t</Tooltip> : null }\n\t\t{ onHide ?\n\t\t\t<Tooltip tooltip={hideTooltip || t( 'close' )} >\n\t\t\t\t<button\n\t\t\t\t\taria-label={t( 'close' )}\n\t\t\t\t\tclassName=\"panel-button fa fa-times\"\n\t\t\t\t\tonClick={onHide}\n\t\t\t\t/>\n\t\t\t</Tooltip> : null\n\t\t}\n\t\t</div>\n\t</Card.Header> );\n};\n\n\n// MAIN //\n\n/**\n* Card component.\n*\n* @property {string} className - CSS class name\n* @property {(string|node)} header - panel heading\n* @property {string} headerTag - tag used for the panel heading\n* @property {(string|node)} footer - panel footer\n* @property {boolean} trapFocus - whether to trap the user's focus in the panel\n* @property {boolean} minimizable - whether the panel can be minimized\n* @property {boolean} defaultMinimized - controls whether the panel should be minimized by default (only applicable when `minimizable` is set to `true`)\n* @property {boolean} fullscreen - whether the panel can be made fullscreen (only for instructors)\n* @property {string} hideTooltip - tooltip displayed over the hide button\n* @property {Function} onHide - callback invoked when the close button is clicked\n* @property {Object} style - CSS inline styles for container\n* @property {Object} bodyStyle - CSS inline styles for body\n* @property {string} bodyClassName - CSS class name for body\n* @property {Object} footerStyle - CSS inline styles for footer\n* @property {string} footerClassName - CSS class name for footer\n*/\nconst Panel = ({ className, header, headerTag, footer, trapFocus, minimizable, defaultMinimized, fullscreen, hideTooltip, onHide, style, bodyStyle, bodyClassName, footerStyle, footerClassName, children, tReady, ...rest }) => {\n\tconst [ minimized, setMinimized ] = useState( minimizable ? defaultMinimized : false );\n\tconst cardRef = useRef( null );\n\tconst card = <Card\n\t\t{...rest}\n\t\tclassName={`panel ${className}`}\n\t\tstyle={{\n\t\t\theight: minimized ? '53px' : void 0,\n\t\t\t...style\n\t\t}}\n\t\tref={cardRef}\n\t>\n\t\t{ fullscreen ? <FullscreenButton\n\t\t\theader={header}\n\t\t\tbody={children}\n\t\t\tfooter={footer}\n\t\t\tclassName={className}\n\t\t\towner\n\t\t/> : null }\n\t\t<Header\n\t\t\tminimizable={minimizable} minimized={minimized}\n\t\t\tonMinimize={() => {\n\t\t\t\tsetMinimized( !minimized );\n\t\t\t}}\n\t\t\thideTooltip={hideTooltip} onHide={onHide}\n\t\t\theaderTag={headerTag}\n\t\t>\n\t\t\t{header}\n\t\t</Header>\n\t\t<Card.Body style={{\n\t\t\t...bodyStyle,\n\t\t\tdisplay: minimized ? 'none' : null\n\t\t}} className={bodyClassName} >\n\t\t\t{children}\n\t\t</Card.Body>\n\t\t{footer ? <Card.Footer\n\t\t\tstyle={{\n\t\t\t\t...footerStyle,\n\t\t\t\tdisplay: minimized ? 'none' : null\n\t\t\t}}\n\t\t\tclassName={footerClassName}\n\t\t>{footer}</Card.Footer> : null}\n\t</Card>;\n\tif ( trapFocus ) {\n\t\treturn ( <FocusTrap focusTrapOptions={{\n\t\t\tclickOutsideDeactivates: true,\n\t\t\tinitialFocus: () => {\n\t\t\t\treturn cardRef.current;\n\t\t\t}\n\t\t}} >\n\t\t\t{card}\n\t\t</FocusTrap> );\n\t}\n\treturn card;\n};\n\n\n// PROPERTIES //\n\nPanel.propTypes = {\n\tclassName: PropTypes.string,\n\theader: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\theaderTag: PropTypes.string,\n\tfooter: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tminimizable: PropTypes.bool,\n\tdefaultMinimized: PropTypes.bool,\n\tfullscreen: PropTypes.bool,\n\thideTooltip: PropTypes.string,\n\ttrapFocus: PropTypes.bool,\n\tbodyStyle: PropTypes.object,\n\tfooterStyle: PropTypes.object,\n\tbodyClassName: PropTypes.string,\n\tfooterClassName: PropTypes.string,\n\tstyle: PropTypes.object,\n\tonHide: PropTypes.func\n};\n\nPanel.defaultProps = {\n\tclassName: '',\n\theader: null,\n\theaderTag: 'h3',\n\tfooter: null,\n\tminimizable: false,\n\tdefaultMinimized: false,\n\tfullscreen: false,\n\thideTooltip: null,\n\ttrapFocus: false,\n\tbodyStyle: {},\n\tfooterStyle: {},\n\tbodyClassName: '',\n\tfooterClassName: '',\n\tstyle: {},\n\tonHide: null\n};\n\n\n// EXPORTS //\n\nexport default withPropCheck( Panel );\n"],"sourceRoot":""}