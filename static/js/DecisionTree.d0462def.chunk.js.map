{"version":3,"sources":["../node_modules/@isle-project/components/models/decision-tree/main.js"],"names":[],"mappings":"qmEAgBA,GAAI,SAAU,EAKd,KAAM,UAAW,CAAC,CAAE,EAAG,EAAG,KAAM,KAAM,aAAc,gBAAiB,eAAgB,aAAc,iBAAoB,CACtH,GAAI,YACC,+DAAS,GACb,WAAa,EAEb,WAAa,CAAE,GAEhB,GAAI,CACH,GAAI,MACJ,MAAK,QAAS,iBACb,KAAO,GAAI,0CAAmB,CAC7B,SAAU,EACV,WACA,KACA,aACA,UAAW,gBACX,eACA,aACA,gBAGD,KAAO,GAAI,0CAAe,CACzB,SAAU,EACV,WACA,KACA,aACA,eACA,aACA,gBAGK,WACE,EADF,CAEP,MAAO,QAqBT,0BAA2B,6CAAU,CACpC,YAAa,MAAQ,CACpB,MAAO,OAgCR,mCAAgB,IAAM,CACrB,KAAK,MAAM,UAAW,KAAK,MAAM,KAAM,WA/BvC,SAAW,EAEX,KAAM,CAAE,EAAG,EAAG,KAAM,KAAM,aAAc,gBAAiB,eAAgB,aAAc,eAAkB,KAAK,MAC9G,KAAK,MAAQ,gBACZ,KAAM,SAAS,CAAE,EAAG,EAAG,KAAM,KAAM,aAAc,gBAAiB,eAAgB,aAAc,iBAC7F,aAIE,0BAA0B,UAAW,UAAY,CACvD,GACC,UAAU,IAAM,UAAU,GAC1B,UAAU,IAAM,UAAU,GAC1B,UAAU,OAAS,UAAU,MAC7B,UAAU,kBAAoB,UAAU,iBACxC,UAAU,OAAS,UAAU,MAC7B,UAAU,eAAiB,UAAU,cACrC,UAAU,iBAAmB,UAAU,gBACvC,UAAU,eAAiB,UAAU,cACrC,UAAU,gBAAkB,UAAU,cACrC,CACD,KAAM,CAAE,EAAG,EAAG,KAAM,KAAM,aAAc,gBAAiB,eAAgB,aAAc,eAAkB,UACzG,MAAO,iBACN,KAAM,SAAS,CAAE,EAAG,EAAG,KAAM,KAAM,aAAc,gBAAiB,eAAgB,aAAc,iBAC7F,WAGL,MAAO,MAOR,QAAS,CACR,KAAM,CAAE,MAAS,KAAK,MAChB,CAAE,GAAM,KAAK,MACnB,MAAM,MAIL,iDAAC,MAAD,CAAK,MAAO,CAAE,UAAW,OAAQ,MAAO,SACvC,iDAAC,OAAD,CAAM,UAAU,SAAU,EAAE,oBAAqB,CAAE,EAAG,KAAK,MAAM,EAAG,QAAS,WAC7E,iDAAC,yCAAD,CAAU,KAAM,KAAK,OACpB,KAAK,MAAM,UAAY,iDAAC,gEAAD,CAAS,QAAS,EAAE,yBAC3C,iDAAC,8DAAD,CAAQ,QAAQ,YAAY,KAAK,KAAK,MAAO,CAAE,UAAW,IAAM,QAAS,KAAK,eAAgB,KAAK,MAAM,EAAE,0BAC/F,MARP,iDAAC,6DAAD,CAAO,QAAQ,UAAU,EAAE,wBAiBrC,aAAa,aAAe,CAC3B,gBAAiB,OACjB,eAAgB,MAChB,aAAc,EACd,cAAe,GACf,UAAW,MAGZ,aAAa,UAAY,CACxB,KAAM,oEACN,EAAG,4DAAoB,CACtB,yDACA,6DAAsB,sEACpB,WACH,EAAG,4DAAoB,CACtB,0DAAmB,4DAAoB,CAAE,yDAAkB,6DAAsB,uEACjF,yDACA,6DAAsB,sEACpB,WACH,KAAM,wDAAgB,CAAE,iBAAkB,eAAgB,WAC1D,aAAc,0DAAmB,0DAAmB,WACpD,gBAAiB,wDAAgB,CAAE,OAAQ,YAC3C,eAAgB,yDAChB,aAAc,yDACd,cAAe,yDACf,UAAW,wDAMZ,4BAAe,kDAAiB,UAAY,kEAAe","file":"static/js/DecisionTree.d0462def.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport isArray from '@stdlib/assert/is-array';\nimport Tooltip from '@isle-project/components/tooltip';\nimport { RegressionTree, ClassificationTree, TreePlot } from './tree.js';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\n\n\n// FUNCTIONS //\n\nconst fitModel = ({ x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount }) => {\n\tlet predictors;\n\tif ( isArray( x ) ) {\n\t\tpredictors = x;\n\t} else {\n\t\tpredictors = [ x ];\n\t}\n\ttry {\n\t\tlet tree;\n\t\tif ( type === 'Classification' ) {\n\t\t\ttree = new ClassificationTree({\n\t\t\t\tresponse: y,\n\t\t\t\tpredictors,\n\t\t\t\tdata: data,\n\t\t\t\tquantitative: quantitative,\n\t\t\t\tcriterion: impurityMeasure,\n\t\t\t\tscoreThreshold: scoreThreshold,\n\t\t\t\tmaxTreeDepth: maxTreeDepth,\n\t\t\t\tminItemsCount: minItemsCount\n\t\t\t});\n\t\t} else {\n\t\t\ttree = new RegressionTree({\n\t\t\t\tresponse: y,\n\t\t\t\tpredictors,\n\t\t\t\tdata: data,\n\t\t\t\tquantitative: quantitative,\n\t\t\t\tscoreThreshold: scoreThreshold,\n\t\t\t\tmaxTreeDepth: maxTreeDepth,\n\t\t\t\tminItemsCount: minItemsCount\n\t\t\t});\n\t\t}\n\t\treturn tree;\n\t} catch ( _ ) {\n\t\treturn null;\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Regression and classification trees.\n*\n* @property {Object} data - object of value arrays\n* @property {string} type - `Classification` for categorical or `Regression` for quantitative outcomes\n* @property {Array<string>} quantitative - array of variables in `data` that are `quantitative`\n* @property {string} y - outcome variable\n* @property {Array<string>} x - one or more predictor variables\n* @property {string} impurityMeasure - impurity measure (`gini` or `entropy`)\n* @property {number} scoreThreshold - score threshold for split\n* @property {number} maxTreeDepth - maximum tree depth\n* @property {number} minItemsCount - minimum # of observations in leaf nodes\n* @property {Function} onPredict - callback invoked with model object when clicking on the predict button\n*/\nclass DecisionTree extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tCOUNTER += 1;\n\n\t\tconst { x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount } = this.props;\n\t\tthis.state = {\n\t\t\ttree: fitModel({ x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.type !== prevState.type ||\n\t\t\tnextProps.impurityMeasure !== prevState.impurityMeasure ||\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.scoreThreshold !== prevState.scoreThreshold ||\n\t\t\tnextProps.maxTreeDepth !== prevState.maxTreeDepth ||\n\t\t\tnextProps.minItemsCount !== prevState.minItemsCount\n\t\t) {\n\t\t\tconst { x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount } = nextProps;\n\t\t\treturn {\n\t\t\t\ttree: fitModel({ x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\thandlePredict = () => {\n\t\tthis.props.onPredict( this.state.tree, COUNTER );\n\t};\n\n\trender() {\n\t\tconst { tree } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !tree ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('decision-tree-for', { y: this.props.y, counter: COUNTER })}</span>\n\t\t\t\t<TreePlot tree={tree.root} />\n\t\t\t\t{this.props.onPredict ? <Tooltip tooltip={t('predictions-attached')} >\n\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" style={{ marginTop: 10 }} onClick={this.handlePredict}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t</Tooltip> : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nDecisionTree.defaultProps = {\n\timpurityMeasure: 'gini',\n\tscoreThreshold: 0.0075,\n\tmaxTreeDepth: 5,\n\tminItemsCount: 50,\n\tonPredict: null\n};\n\nDecisionTree.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\ttype: PropTypes.oneOf([ 'Classification', 'Regression' ]).isRequired,\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\timpurityMeasure: PropTypes.oneOf([ 'gini', 'entropy' ]),\n\tscoreThreshold: PropTypes.number,\n\tmaxTreeDepth: PropTypes.number,\n\tminItemsCount: PropTypes.number,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( 'models' )( withPropCheck( DecisionTree ) );\n"],"sourceRoot":""}