{"version":3,"file":"static/js/MultipleLinearRegressionMenu.36bdb47e.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/dashboard/index.js","../node_modules/@isle-project/components/data-explorer/menu/multiple_linear_regression.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js"],"sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Dashboard = Loadable( () => import( /* webpackChunkName: \"Dashboard\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Dashboard;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport unique from 'uniq';\nimport copy from '@stdlib/utils/copy';\nimport contains from '@stdlib/assert/contains';\nimport SelectInput from '@isle-project/components/input/select';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport Dashboard from '@isle-project/components/dashboard';\nimport MultipleLinearRegression from '@isle-project/components/models/multiple-linear-regression';\nimport { DATA_EXPLORER_MULTIPLE_REGRESSION } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// MAIN //\n\nconst MultipleLinearRegressionMenu = ( props ) => {\n\tconst { data, categorical, quantitative, t } = props;\n\n\tconst compute = ( y, x, intercept, omitMissing ) => {\n\t\tconst output = <MultipleLinearRegression\n\t\t\tx={x} y={y} intercept={intercept} omitMissing={omitMissing}\n\t\t\tdata={data} quantitative={quantitative}\n\t\t\tonPredict={( yhat, resid, counter ) => {\n\t\t\t\tconst newData = copy( data, 1 );\n\t\t\t\tconst newQuantitative = quantitative.slice();\n\t\t\t\tlet name = 'pred_lm'+counter;\n\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t}\n\t\t\t\tname = 'resid_lm'+counter;\n\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t}\n\t\t\t\tnewData[ name ] = resid;\n\t\t\t\tprops.onGenerate( newQuantitative, newData );\n\t\t\t}}\n\t\t\tonDiagnostics={props.onCreated}\n\t\t/>;\n\t\tconst action = {\n\t\t\ty, x, intercept\n\t\t};\n\t\tprops.logAction( DATA_EXPLORER_MULTIPLE_REGRESSION, action );\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Dashboard\n\t\t\ttitle={<span>\n\t\t\t\t{t('Multiple Linear Regression')}\n\t\t\t\t<QuestionButton title={t('Multiple Linear Regression')} content={t('Multiple Linear Regression-description')} />\n\t\t\t</span>}\n\t\t\tautoStart={false}\n\t\t\tonGenerate={compute}\n\t\t>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('outcome-y')}\n\t\t\t\toptions={quantitative}\n\t\t\t\tdefaultValue={quantitative[ 0 ]}\n\t\t\t/>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('predictors-x')} multi\n\t\t\t\toptions={unique( quantitative.concat( categorical ) )}\n\t\t\t\tdefaultValue={quantitative[ 1 ]}\n\t\t\t\tcloseMenuOnSelect={false}\n\t\t\t/>\n\t\t\t<CheckboxInput\n\t\t\t\tlegend={t('include-intercept')}\n\t\t\t\tdefaultValue={true}\n\t\t\t/>\n\t\t\t<CheckboxInput\n\t\t\t\tlegend={t('omit-missing')}\n\t\t\t\tdefaultValue={false}\n\t\t\t/>\n\t\t</Dashboard>\n\t);\n};\n\n\n// PROPERTIES //\n\nMultipleLinearRegressionMenu.defaultProps = {\n\tlogAction() {}\n};\n\nMultipleLinearRegressionMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default MultipleLinearRegressionMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"names":["Dashboard","Loadable","MultipleLinearRegressionMenu","props","data","categorical","quantitative","t","title","content","autoStart","onGenerate","y","x","intercept","omitMissing","output","onPredict","yhat","resid","counter","newData","copy","newQuantitative","slice","name","contains","push","onDiagnostics","onCreated","action","logAction","DATA_EXPLORER_MULTIPLE_REGRESSION","legend","options","defaultValue","multi","unique","concat","closeMenuOnSelect","defaultProps","propTypes","PropTypes","QuestionButton","popover","id","trigger","placement","rootClose","overlay","size","variant","className","isRequired","uid","generateUID","CheckboxInput","bind","disabled","onChange","useRef","session","useContext","SessionContext","value","setValue","useState","state","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onClick","onKeyPress","onSpanChange","noop"],"sourceRoot":""}