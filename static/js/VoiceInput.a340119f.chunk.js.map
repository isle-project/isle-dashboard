{"version":3,"file":"static/js/VoiceInput.a340119f.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/input/voice/microphone.js","../node_modules/@isle-project/components/input/voice/main.js"],"sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Microphone from '-!svg-react-loader!./img/microphone.svg';\n\n\n// MAIN //\n\nclass Shim extends Component {\n\trender() {\n\t\treturn <button onClick={this.props.onClick} ></button>;\n\t}\n}\n\n\nShim.propTypes = {\n\tonClick: PropTypes.func\n};\n\nShim.defaultProps = {\n\tonClick() {}\n};\n\n\n// EXPORTS //\n\nexport default Microphone || Shim;\n","// MODULES //\n\nimport React, { Fragment, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport OverlayTrigger from '@isle-project/components/overlay-trigger';\nimport SessionContext from '@isle-project/session/context.js';\nimport { i18n } from '@isle-project/locales';\nimport Microphone from './microphone.js';\nimport './voice.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:voice-input' );\n\n\n// FUNCTIONS //\n\nfunction getSpeechRecognition() {\n\ttry {\n\t\tconst SpeechRecognition = SpeechRecognition || webkitSpeechRecognition; //eslint-disable-line\n\t\tif ( SpeechRecognition ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t} catch ( error) {\n\t\treturn false;\n\t}\n}\n\nfunction createGrammarList( grammars ) {\n\tconst SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList; //eslint-disable-line\n\tconst grammarList = new SpeechGrammarList();\n\tfor ( let i = 0; i < grammars.length; i++ ) {\n\t\tconst { src, weight } = grammars[ i ];\n\t\tgrammarList.addFromString( src, weight );\n\t}\n\treturn grammarList;\n}\n\n\n// MAIN //\n\n/**\n* A voice input component.\n*\n* @property {boolean} autorecord - controls whether to automatically start recording\n* @property {string} defaultValue - default text value\n* @property {Array} grammars - speech grammar list (unsupported)\n* @property {string} legend - legend displayed in front of input field\n* @property {string} mode - set to `full` to display a text input field alongside the microphone, `status` to only display a statusbar with the transcribed texts, `microphone` to show just a button to toggle recording, or `none` when the voice input should be invisible and purely controlled via hotkeys / voice commands\n* @property {number} maxAlternatives - maximum number of alternatives provided per speech recognition result\n* @property {Function} onChange - callback function invoked when text input value is updated\n* @property {Function} onClick - callback function invoked when clicking on the microphone button\n* @property {Function} onFinalText - callback function invoked once final text is received\n* @property {Function} onSegment - callback function invoked with text segments\n* @property {Function} onRecordingStart - callback function invoked when recording is started\n* @property {Function} onRecordingStop - callback function invoked once recording is stopped\n* @property {Function} onSubmit - callback function when submitting text input value by hitting \"Enter\"\n* @property {string} placeholder - text input placeholder\n* @property {Object} remote - object with `start`, `stop`, and `toggle` and associated hotkeys\n* @property {Function} timeout - number of milliseconds after which to timeout the recording\n* @property {Function} stopTooltip - tooltip message displayed while recording\n* @property {Function} startTooltip - tooltip message displayed while not recording\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {number} width - voice input width (in px)\n* @property {number} height - voice input height (in px)\n* @property {string} className - class name\n* @property {Object} style - CSS inline styles\n*/\nconst VoiceInput = ( props ) => {\n\tconst { autorecord, bind, defaultValue, grammars, id,\n\t\tmaxAlternatives, remote, startTooltip, stopTooltip, speechInterface,\n\t\tonChange, onClick, onFinalText, onRecordingStart, onRecordingStop, onSegment, onSubmit, timeout } = props;\n\tconst [ isRecording, setIsRecording ] = useState( autorecord );\n\tconst session = useContext( SessionContext );\n\tconst { t } = useTranslation( 'input' );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue,\n\t);\n\tconst recognizerRef = useRef();\n\tconst timerRef = useRef();\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tonChange( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, onChange ] );\n\n\tconst handleKeyDown = useCallback( ( event ) => {\n\t\tswitch ( event.keyCode ) {\n\t\tcase 13:\n\t\t\tonSubmit( value );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}, [ value, onSubmit ] );\n\n\tconst stop = useCallback( () => {\n\t\tdebug( 'Set `isRecording` to false...' );\n\t\tsetIsRecording( false );\n\t\tif ( recognizerRef.current ) {\n\t\t\trecognizerRef.current.stop();\n\t\t}\n\t\tonRecordingStop();\n\t}, [ onRecordingStop ] );\n\n\tconst start = useCallback( () => {\n\t\trecognizerRef.current = null;\n\t\tconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition; //eslint-disable-line\n\t\tif ( SpeechRecognition ) {\n\t\t\tconst recognizer = new SpeechRecognition();\n\t\t\trecognizer.lang = i18n.language;\n\t\t\trecognizer.continuous = true;\n\t\t\trecognizer.interimResults = true;\n\t\t\trecognizer.maxAlternatives = maxAlternatives;\n\t\t\trecognizer.grammars = createGrammarList( grammars );\n\n\t\t\trecognizer.onerror = ( event ) => {\n\t\t\t\tdebug( 'Encountered an error...' );\n\t\t\t\tif (\n\t\t\t\t\tevent.error === 'not-allowed' ||\n\t\t\t\t\tevent.error === 'service-not-allowed'\n\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\tsetIsRecording( false );\n\t\t\t\t\t\treturn session.addNotification({\n\t\t\t\t\t\t\ttitle: 'Not allowed',\n\t\t\t\t\t\t\tmessage: 'No permission to use the speech recognition service',\n\t\t\t\t\t\t\tlevel: 'error',\n\t\t\t\t\t\t\tposition: 'tr'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\trecognizer.start();\n\t\t\t\t} catch ( err ) {\n\t\t\t\t\tdebug( err );\n\t\t\t\t}\n\t\t\t};\n\t\t\trecognizer.onend = () => {\n\t\t\t\tdebug('onend: %s', id );\n\t\t\t\tif ( isRecording ) {\n\t\t\t\t\t// Restart recording after it stopped due to no voice input for a few seconds:\n\t\t\t\t\trecognizer.start();\n\t\t\t\t}\n\t\t\t};\n\t\t\trecognizer.onstart = () => {\n\t\t\t\tdebug('onstart: %s', id );\n\t\t\t\tonRecordingStart();\n\t\t\t};\n\t\t\trecognizer.onresult = ( event ) => {\n\t\t\t\tdebug( 'Processing result...' );\n\t\t\t\tif ( typeof ( event.results ) === 'undefined' ) {\n\t\t\t\t\tdebug( 'Something went wrong...' );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor ( let i = event.resultIndex; i < event.results.length; ++i ) {\n\t\t\t\t\tconst results = event.results[ i ];\n\t\t\t\t\tif ( event.results[ i ].isFinal ) {\n\t\t\t\t\t\tif ( timeout ) {\n\t\t\t\t\t\t\ttimerRef.current = setTimeout( stop, timeout );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdebug( 'Received final text' );\n\t\t\t\t\t\tlet text;\n\t\t\t\t\t\tif ( maxAlternatives > 1 ) {\n\t\t\t\t\t\t\ttext = new Array( results.length );\n\t\t\t\t\t\t\tfor ( let i = 0; i < results.length; i++ ) {\n\t\t\t\t\t\t\t\ttext[ i ] = results[ i ].transcript;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttext = results[ 0 ].transcript;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetValue( text );\n\t\t\t\t\t\tonFinalText( text );\n\t\t\t\t\t\tif ( speechInterface ) {\n\t\t\t\t\t\t\tspeechInterface.check( text, {\n\t\t\t\t\t\t\t\tonStart: () => {\n\t\t\t\t\t\t\t\t\tstop();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonEnd: () => {\n\t\t\t\t\t\t\t\t\tstart();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif ( timerRef.current ) {\n\t\t\t\t\t\t\tclearTimeout( timerRef.current );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet text;\n\t\t\t\t\t\tif ( maxAlternatives > 1 ) {\n\t\t\t\t\t\t\ttext = new Array( results.length );\n\t\t\t\t\t\t\tfor ( let i = 0; i < results.length; i++ ) {\n\t\t\t\t\t\t\t\ttext[ i ] = results[ i ].transcript;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttext = results[ 0 ].transcript;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetValue( text );\n\t\t\t\t\t\tonSegment( text );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\trecognizer.start();\n\t\t\trecognizerRef.current = recognizer;\n\t\t}\n\t\tdebug( 'Set `isRecording` to true...' );\n\t\tsetIsRecording( true );\n\t}, [ grammars, id, isRecording, maxAlternatives, onRecordingStart, session, speechInterface, stop, timeout, onFinalText, onSegment ] );\n\n\tconst tooltipMessage = useCallback( ( recognizable ) => {\n\t\tlet text = '';\n\t\tif ( !recognizable ) {\n\t\t\ttext = 'Your browser does not support voice recognition. You may use the Chrome Browser instead';\n\t\t}\n\t\telse if ( isRecording === true ) {\n\t\t\ttext = stopTooltip || t('click-to-stop-recording');\n\t\t}\n\t\telse {\n\t\t\ttext = startTooltip || t('click-to-start-recording');\n\t\t}\n\t\treturn text;\n\t}, [ isRecording, startTooltip, stopTooltip, t ] );\n\n\tuseEffect( () => {\n\t\tif ( remote ) {\n\t\t\twindow.onkeydown = ( event ) => {\n\t\t\t\tswitch ( event.keyCode ) {\n\t\t\t\t\tcase remote.stop:\n\t\t\t\t\t\tstop();\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase remote.start:\n\t\t\t\t\t\tif ( !isRecording ) {\n\t\t\t\t\t\t\tstart();\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase remote.toggle:\n\t\t\t\t\t\tif ( !isRecording ) {\n\t\t\t\t\t\t\tstart();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstop();\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tif ( autorecord ) {\n\t\t\tdebug( 'Should record voice...' );\n\t\t\tstart();\n\t\t}\n\t}, [ autorecord, remote, isRecording, start, stop ] );\n\n\tconst handleClick = useCallback( ( event ) => {\n\t\tonClick( event );\n\t\tif ( isRecording ){\n\t\t\tstop();\n\t\t}\n\t\telse {\n\t\t\tstart();\n\t\t}\n\t}, [ isRecording, start, stop, onClick ] );\n\n\tlet mike = 'voice-microphone';\n\tif ( isRecording === true ) {\n\t\tmike = 'voice-microphone voice-recording';\n\t}\n\tconst x = getSpeechRecognition();\n\tconst text = tooltipMessage( x );\n\tconst tooltip = <Tooltip id={`${props.id}-voice-input-tooltip`} >\n\t\t{text}\n\t</Tooltip>;\n\tswitch ( props.mode ) {\n\t\tcase 'full':\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t{ props.legend ? <label>{props.legend}</label> : null }\n\t\t\t\t\t<div className={`input voice-input ${props.className}`} style={{ height: props.height, width: props.width, ...props.style }} >\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"voice-input-text\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tplaceholder={props.placeholder !== null ? props.placeholder : t('enter-text')}\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<OverlayTrigger placement={props.tooltipPlacement} overlay={tooltip}>\n\t\t\t\t\t\t\t<Microphone onClick={handleClick} className={mike} />\n\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t</div>\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\tcase 'status':\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t{ props.legend ? <label>{props.legend}</label> : null }\n\t\t\t\t\t<div className={`voice-input-status-text ${props.className}`} style={{ height: props.height, width: props.width, ...props.style }} >\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"voice-input-status\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n\t\t\t\t\t\t\t<Microphone onClick={handleClick} className={mike} />\n\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t</div>\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\tcase 'microphone':\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t{ props.legend ? <label>{props.legend}</label> : null }\n\t\t\t\t\t<div className={`voice-solo-microphone ${props.className}`} style={{ height: props.height, width: props.width, ...props.style }}>\n\t\t\t\t\t\t<OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n\t\t\t\t\t\t\t<Microphone onClick={handleClick} className={mike} />\n\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t</div>\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\tcase 'none':\n\t\t\treturn null;\n\t}\n};\n\n\n// PROPERTIES //\n\nVoiceInput.defaultProps = {\n\tautorecord: false,\n\tdefaultValue: '',\n\tgrammars: [],\n\tlegend: '',\n\tmode: 'full',\n\tmaxAlternatives: 1,\n\tonChange() {},\n\tonClick() {},\n\tonFinalText() {},\n\tonSegment() {},\n\tonRecordingStart() {},\n\tonRecordingStop() {},\n\tonSubmit() {},\n\tplaceholder: null,\n\tremote: null,\n\tclassName: '',\n\tstyle: {},\n\ttimeout: null,\n\tstopTooltip: null,\n\tstartTooltip: null,\n\ttooltipPlacement: 'left',\n\twidth: 500,\n\theight: 36\n};\n\nVoiceInput.propTypes = {\n\tautorecord: PropTypes.bool,\n\tdefaultValue: PropTypes.string,\n\tgrammars: PropTypes.array,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmode: PropTypes.string,\n\tmaxAlternatives: PropTypes.number,\n\tonChange: PropTypes.func,\n\tonClick: PropTypes.func,\n\tonFinalText: PropTypes.func,\n\tonRecordingStart: PropTypes.func,\n\tonRecordingStop: PropTypes.func,\n\tonSegment: PropTypes.func,\n\tonSubmit: PropTypes.func,\n\tplaceholder: PropTypes.string,\n\tremote: PropTypes.object,\n\tclassName: PropTypes.string,\n\tstyle: PropTypes.object,\n\ttimeout: PropTypes.number,\n\tstopTooltip: PropTypes.string,\n\tstartTooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ]),\n\twidth: PropTypes.number,\n\theight: PropTypes.number\n};\n\n\n// EXPORTS //\n\nexport default VoiceInput;\n"],"names":["Shim","Component","render","onClick","this","props","propTypes","PropTypes","defaultProps","Microphone","debug","logger","VoiceInput","autorecord","bind","defaultValue","grammars","id","maxAlternatives","remote","startTooltip","stopTooltip","speechInterface","onChange","onFinalText","onRecordingStart","onRecordingStop","onSegment","onSubmit","timeout","isRecording","setIsRecording","useState","session","useContext","SessionContext","t","useTranslation","value","setValue","state","recognizerRef","useRef","timerRef","handleChange","useCallback","event","newValue","target","global","lesson","setState","handleKeyDown","keyCode","stop","current","start","SpeechRecognition","window","webkitSpeechRecognition","recognizer","lang","i18n","continuous","interimResults","SpeechGrammarList","webkitSpeechGrammarList","grammarList","i","length","src","weight","addFromString","createGrammarList","onerror","error","addNotification","title","message","level","position","err","onend","onstart","onresult","results","resultIndex","isFinal","text","setTimeout","Array","transcript","check","onStart","onEnd","clearTimeout","tooltipMessage","recognizable","useEffect","onkeydown","toggle","handleClick","mike","getSpeechRecognition","tooltip","Tooltip","mode","Fragment","legend","className","style","height","width","type","onKeyDown","placeholder","placement","tooltipPlacement","overlay"],"sourceRoot":""}