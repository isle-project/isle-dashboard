{"version":3,"sources":["../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/input/text-area/main.js","../node_modules/@isle-project/components/input/text-area/index.js","../node_modules/@isle-project/components/input/text/main.js","../node_modules/@isle-project/components/input/text/index.js"],"names":[],"mappings":"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","file":"static/js/3945.b49d23da.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleKeyPress = useCallback( ( event ) => {\n\t\tif ( event.which === 13 ) {\n\t\t\tonChange( !value );\n\t\t\tupdateValue( !value );\n\t\t}\n\t}, [ onChange, updateValue, value ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tonKeyPress={handleKeyPress}\n\t\tdisabled={disabled}\n\t\taria-label={props.legend}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\tif ( disabled ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{ color: 'darkgray' }}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\n/**\n * Creates a tooltip for a number input.\n *\n * @param {Object} options - function options\n * @param {number} options.min - minimum value\n * @param {number} options.max - maximum value\n * @param {number} options.step - step size\n * @param {Function} options.t - translation function\n * @returns {string} tooltip\n */\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport generateUID from '@isle-project/utils/uid';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'text-area' );\n\n\n// MAIN //\n\n/**\n* A text area component. Used as a stand-alone component, changes should be handled via the `onChange` attribute.\n*\n* @property {string} defaultValue - default value of the text area\n* @property {string} value - text value (for controlled component)\n* @property {boolean} disabled - controls whether the text area shall be disabled\n* @property {string} legend - legend text\n* @property {string} placeholder - placeholder text\n* @property {string} resizable - controls whether the text area shall be resizable (can be either `both`, `horizontal`, `vertical`, or `none`)\n* @property {number} rows - number of rows\n* @property {Object} style - CSS inline styles\n* @property {Function} onBlur - callback function invoked when the text area loses focus\n* @property {Function} onChange - callback function invoked with the new text when the area text changes\n*/\nconst TextArea = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { defaultValue, placeholder, onChange } = props;\n\tconst [ value, setValue ] = useState( props.value || defaultValue );\n\tconst { t } = useTranslation( 'input' );\n\tconst textarea = useRef();\n\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ]);\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tsetValue( event.target.value );\n\t\tonChange( event.target.value );\n\t}, [ onChange ] );\n\n\tlet legend;\n\tif ( props.legend ) {\n\t\tlegend = <FormLabel htmlFor={id} >\n\t\t\t{props.legend}\n\t\t</FormLabel>;\n\t}\n\treturn (\n\t\t<FormGroup className=\"input\" id={`${id}-form`} >\n\t\t\t{legend}\n\t\t\t<FormControl\n\t\t\t\tid={id}\n\t\t\t\tas=\"textarea\"\n\t\t\t\tplaceholder={isString( placeholder ) ? placeholder : t('enter-text')}\n\t\t\t\tref={div => { textarea.current = div; }}\n\t\t\t\tonBlur={props.onBlur}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tstyle={{\n\t\t\t\t\tresize: props.resizable,\n\t\t\t\t\t...props.style\n\t\t\t\t}}\n\t\t\t\trows={props.rows}\n\t\t\t\tvalue={props.value !== null ? props.value : value}\n\t\t\t\tdisabled={props.disabled}\n\t\t\t/>\n\t\t</FormGroup>\n\t);\n};\n\n\n// PROPERTIES //\n\nTextArea.defaultProps = {\n\tdefaultValue: '',\n\tvalue: null,\n\tdisabled: false,\n\tlegend: '',\n\tonBlur() {},\n\tonChange() {},\n\tplaceholder: null,\n\tresizable: 'none',\n\trows: 5,\n\tstyle: {}\n};\n\nTextArea.propTypes = {\n\tdefaultValue: PropTypes.string,\n\tvalue: PropTypes.string,\n\tdisabled: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tplaceholder: PropTypes.string,\n\tresizable: PropTypes.string,\n\trows: PropTypes.number,\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default TextArea;\n","// MODULES //\n\nimport TextArea from './main.js';\n\n\n// EXPORTS //\n\nexport default TextArea;\n","// MODULES //\n\nimport React, { useCallback, useRef, useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport generateUID from '@isle-project/utils/uid';\nimport SessionContext from '@isle-project/session/context.js';\nimport './text.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'text-input' );\n\n\n// MAIN //\n\n/**\n* A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {Function} onChange - function to be called when a text value is changed\n* @property {string} defaultValue - value indicating the default value of the input at start\n* @property {string} value - text value (for controlled component)\n* @property {number} width - number indicating the width of the input in pixels\n* @property {boolean} inline - Indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {string} placeholder - string indicating the value to be displayed before an initial choice is made\n* @property {Object} style - CSS inline styles\n* @property {Function} onBlur - callback function invoked when the text area loses focus\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst TextInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst { bind, defaultValue, placeholder, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst [ value, setValue ] = useState(\n\t\tprops.bind && session.state ? session.state[ props.bind ]: props.defaultValue\n\t);\n\tconst textInput = useRef();\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ]);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ]);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst value = event.target.value;\n\t\tonChange( value );\n\t\tsetValue( value );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: value\n\t\t\t});\n\t\t}\n\t}, [ bind, onChange ] );\n\n\tif ( props.inline ) {\n\t\treturn (\n\t\t\t<span className=\"input\" style={props.style} >\n\t\t\t\t{ props.legend ? <label htmlFor={id} >\n\t\t\t\t\t{props.legend}:\n\t\t\t\t</label> : <span /> }\n\t\t\t\t<input\n\t\t\t\t\tid={id}\n\t\t\t\t\tclassName=\"text-inline-input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tplaceholder={isString( placeholder ) ? placeholder : t('enter-text')}\n\t\t\t\t\tvalue={props.value !== null ? props.value : value}\n\t\t\t\t\tref={( input ) => {\n\t\t\t\t\t\ttextInput.current = input;\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: props.width\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> ({props.description}) </span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<div className=\"input text-container-div\" style={props.style} >\n\t\t\t<span>\n\t\t\t\t{ props.legend ?\n\t\t\t\t\t<label htmlFor={id} >{props.legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>\n\t\t\t<input\n\t\t\t\tid={id}\n\t\t\t\tclassName=\"text-input\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tname=\"input\"\n\t\t\t\tplaceholder={isString( placeholder ) ? placeholder : t('enter-text')}\n\t\t\t\tvalue={props.value !== null ? props.value : value}\n\t\t\t\tref={( input ) => {\n\t\t\t\t\ttextInput.current = input;\n\t\t\t\t}}\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: props.width\n\t\t\t\t}}\n\t\t\t\tonBlur={props.onBlur}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n\n// PROPERTIES //\n\nTextInput.defaultProps = {\n\tbind: null,\n\tdefaultValue: '',\n\tvalue: null,\n\tlegend: '',\n\twidth: 80,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tplaceholder: null,\n\tstyle: {}\n};\n\nTextInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.string,\n\tvalue: PropTypes.string,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tinline: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tplaceholder: PropTypes.string,\n\twidth: PropTypes.number,\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default TextInput;\n","// MODULES //\n\nimport TextInput from './main.js';\n\n\n// EXPORTS //\n\nexport default TextInput;\n"],"sourceRoot":""}