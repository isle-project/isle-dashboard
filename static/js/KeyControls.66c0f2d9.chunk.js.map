{"version":3,"file":"static/js/KeyControls.66c0f2d9.chunk.js","mappings":"gSAcMA,EAAQC,GAAAA,CAAQ,qBAChBC,EAAgB,WAChBC,EAAS,CAAE,QAAS,YAWpBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACL,WAAaC,GAAS,IAAD,wBACpB,cAAOA,IADa,kCAsBN,WACd,IAAMC,EAAOC,GAAAA,CAAY,EAAKF,MAAMG,SAEpC,GADAR,EAAM,mCAAD,OAAqC,EAAKK,MAAMI,UAAY,YAAc,WAA1E,aAAyFH,EAAKI,KAAM,QACpG,EAAKL,MAAMI,UACf,IACcE,EAAAA,YAAsB,EAAKN,MAAMI,WACzCG,iBAAkB,UAAW,EAAKC,cACtC,MAAQC,GACTd,EAAOc,EAAIC,cAGZC,SAASJ,iBAAkB,UAAW,EAAKK,qBAjCxB,qCAqCH,SAAER,GACnB,IAAMH,EAAOC,GAAAA,CAAY,EAAKF,MAAMG,SAEpC,GADAR,EAAM,sCAAD,OAAwCS,EAAY,YAAc,WAAlE,aAAiFH,EAAKI,KAAM,QAC5FD,EACJ,IACcE,EAAAA,YAAsBF,GAC9BS,oBAAqB,UAAW,EAAKL,cACzC,MAAQC,GACTd,EAAOc,EAAIC,SAGbC,SAASE,oBAAqB,UAAW,EAAKD,qBAhD1B,kCAmDN,SAAEE,GAChB,IAAMC,EAAUD,EAAME,IACtBrB,EAAM,qCAAD,OAAuCoB,IAC5C,IAAME,EAAK,EAAKjB,MAAMG,QAASY,GACzBG,EAAWJ,EAAMK,SAAWL,EAAMM,UAAYN,EAAMO,QAAUP,EAAMQ,QAC1E,GACCX,SAASY,gBAAkB,EAAKvB,MAAMI,YACrCc,GACDM,GAAAA,CAAYP,GACX,CACD,GAAKpB,EAAc4B,KAAMV,IAAaJ,SAASY,gBAAkBZ,SAASe,KAAO,CAChF,IAAMC,EAAKhB,SAASY,cAEpB,GADoBI,KAAwD,IAAhD7B,EAAO8B,QAASD,EAAGE,QAAQC,gBAA0BH,EAAGI,oBACjD,WAAfJ,EAAGE,QACtB,OAGFf,EAAMkB,iBACNlB,EAAMmB,kBACNhB,EAAIH,QAtEe,qCA0EH,SAAEA,GACnB,IAAMC,EAAUD,EAAME,IAChBE,EAAWJ,EAAMK,SAAWL,EAAMM,UAAYN,EAAMO,QAAUP,EAAMQ,QAC1E3B,EAAM,oCAAD,OAAsCoB,IAC3C,IAAME,EAAK,EAAKjB,MAAMG,QAASY,GAC/B,IAAMG,GAAYM,GAAAA,CAAYP,GAAO,CACpC,GACCpB,EAAc4B,KAAMV,IACpBJ,SAASY,gBAAkBZ,SAASe,KACnC,CACD,IAAMC,EAAKhB,SAASY,cAEpB,GADoBI,KAAwD,IAAhD7B,EAAO8B,QAASD,EAAGE,QAAQC,gBAA0BH,EAAGI,oBACjD,WAAfJ,EAAGE,QACtB,OAGFf,EAAMkB,iBACNlB,EAAMmB,kBACNhB,EAAIH,OA5Fe,EAkGpB,OAhGA,yCAED,WACCnB,EAAO,4BACPuC,KAAKC,iBACL,gCAED,SAAoBC,GACdF,KAAKlC,MAAMI,YAAcgC,EAAUhC,YACvCT,EAAO,uDACPuC,KAAKG,gBAAiBD,EAAUhC,WAChC8B,KAAKC,kBAEN,kCAED,WACCxC,EAAO,8BACPuC,KAAKG,oBACL,oBA4ED,WACC,OAAO,SACP,EAnGItC,CAAoBuC,EAAAA,WAyG1BvC,EAAYwC,aAAe,CAC1BpC,QAAS,GACTC,UAAW,MAQZL,EAAYyC,YAAcC,EAAAA,EAK1B","sources":["../node_modules/@isle-project/components/key-controls/main.js"],"sourcesContent":["\n// MODULES //\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport objectKeys from '@stdlib/utils/keys';\nimport isFunction from '@stdlib/assert/is-function';\nimport SessionContext from '@isle-project/session/context.js';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:key-controls' );\nconst RE_ALPHABETIC = /^[a-z]$/i;\nconst INPUTS = [ 'input', 'textarea' ];\n\n\n// MAIN //\n\n/**\n* Keyboard controls.\n*\n* @property {Object} actions - object mapping key codes to events\n* @property {Node} container - DOM node for which to attach event listeners\n*/\nclass KeyControls extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\tcomponentDidMount() {\n\t\tdebug( 'Component has mounted...' );\n\t\tthis.addListeners();\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tif ( this.props.container !== prevProps.container ) {\n\t\t\tdebug( 'Container has changed, re-attach event listeners...' );\n\t\t\tthis.removeListeners( prevProps.container );\n\t\t\tthis.addListeners();\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdebug( 'Component has unmounted...' );\n\t\tthis.removeListeners();\n\t}\n\n\taddListeners = () => {\n\t\tconst keys = objectKeys( this.props.actions );\n\t\tdebug( `Add keydown event listeners for ${this.props.container ? 'container' : 'document'}: ${keys.join( ', ')}` );\n\t\tif ( this.props.container ) {\n\t\t\ttry {\n\t\t\t\tconst node = ReactDOM.findDOMNode( this.props.container );\n\t\t\t\tnode.addEventListener( 'keydown', this.triggerEvent );\n\t\t\t} catch ( err ) {\n\t\t\t\tdebug( err.message );\n\t\t\t}\n\t\t} else {\n\t\t\tdocument.addEventListener( 'keydown', this.triggerDocEvent );\n\t\t}\n\t}\n\n\tremoveListeners = ( container ) => {\n\t\tconst keys = objectKeys( this.props.actions );\n\t\tdebug( `Remove keydown event listeners for ${container ? 'container' : 'document'}: ${keys.join( ', ')}` );\n\t\tif ( container ) {\n\t\t\ttry {\n\t\t\t\tconst node = ReactDOM.findDOMNode( container );\n\t\t\t\tnode.removeEventListener( 'keydown', this.triggerEvent );\n\t\t\t} catch ( err ) {\n\t\t\t\tdebug( err.message );\n\t\t\t}\n\t\t}\n\t\tdocument.removeEventListener( 'keydown', this.triggerDocEvent );\n\t}\n\n\ttriggerEvent = ( event ) => {\n\t\tconst keyName = event.key;\n\t\tdebug( `Received key press for container: ${keyName}` );\n\t\tconst fn = this.props.actions[ keyName ];\n\t\tconst modifier = event.ctrlKey || event.shiftKey || event.altKey || event.metaKey;\n\t\tif (\n\t\t\tdocument.activeElement === this.props.container &&\n\t\t\t!modifier &&\n\t\t\tisFunction( fn )\n\t\t) {\n\t\t\tif ( RE_ALPHABETIC.test( keyName ) && document.activeElement !== document.body ) {\n\t\t\t\tconst el = document.activeElement;\n\t\t\t\tconst inTextField = el && ( INPUTS.indexOf( el.tagName.toLowerCase() ) !== -1 || el.isContentEditable );\n\t\t\t\tif ( inTextField || el.tagName === 'CANVAS' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tfn( event );\n\t\t}\n\t}\n\n\ttriggerDocEvent = ( event ) => {\n\t\tconst keyName = event.key;\n\t\tconst modifier = event.ctrlKey || event.shiftKey || event.altKey || event.metaKey;\n\t\tdebug( `Received key press for document: ${keyName}` );\n\t\tconst fn = this.props.actions[ keyName ];\n\t\tif ( !modifier && isFunction( fn ) ) {\n\t\t\tif (\n\t\t\t\tRE_ALPHABETIC.test( keyName ) &&\n\t\t\t\tdocument.activeElement !== document.body\n\t\t\t) {\n\t\t\t\tconst el = document.activeElement;\n\t\t\t\tconst inTextField = el && ( INPUTS.indexOf( el.tagName.toLowerCase() ) !== -1 || el.isContentEditable );\n\t\t\t\tif ( inTextField || el.tagName === 'CANVAS' ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tfn( event );\n\t\t}\n\t}\n\n\trender() {\n\t\treturn null;\n\t}\n}\n\n\n// PROPERTIES //\n\nKeyControls.defaultProps = {\n\tactions: {},\n\tcontainer: null\n};\n\nKeyControls.propTypes = {\n\tactions: PropTypes.objectOf( PropTypes.func ),\n\tcontainer: PropTypes.oneOfType([ PropTypes.object, PropTypes.element ])\n};\n\nKeyControls.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default KeyControls;\n"],"names":["debug","logger","RE_ALPHABETIC","INPUTS","KeyControls","props","keys","objectKeys","actions","container","join","ReactDOM","addEventListener","triggerEvent","err","message","document","triggerDocEvent","removeEventListener","event","keyName","key","fn","modifier","ctrlKey","shiftKey","altKey","metaKey","activeElement","isFunction","test","body","el","indexOf","tagName","toLowerCase","isContentEditable","preventDefault","stopPropagation","this","addListeners","prevProps","removeListeners","Component","defaultProps","contextType","SessionContext"],"sourceRoot":""}