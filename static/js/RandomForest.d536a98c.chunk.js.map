{"version":3,"file":"static/js/RandomForest.d536a98c.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/models/random-forest/main.js"],"sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport isArray from '@stdlib/assert/is-array';\nimport Plotly from '@isle-project/components/plotly';\nimport Tooltip from '@isle-project/components/tooltip';\nimport { RandomForestClassifier } from '@isle-project/components/models/decision-tree/tree.js';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\n\n\n// FUNCTIONS //\n\nconst fitModel = ({ y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount }) => {\n\ttry {\n\t\tlet predictors;\n\t\tif ( isArray( x ) ) {\n\t\t\tpredictors = x;\n\t\t} else {\n\t\t\tpredictors = [ x ];\n\t\t}\n\t\tlet forest;\n\t\tif ( type === 'Classification' ) {\n\t\t\tforest = new RandomForestClassifier({\n\t\t\t\tresponse: y,\n\t\t\t\tpredictors,\n\t\t\t\tdata: data,\n\t\t\t\tquantitative: quantitative,\n\t\t\t\tcriterion: impurityMeasure,\n\t\t\t\tnTrees,\n\t\t\t\tnTry,\n\t\t\t\tscoreThreshold,\n\t\t\t\tmaxTreeDepth,\n\t\t\t\tminItemsCount\n\t\t\t});\n\t\t}\n\t\tconst importances = [];\n\t\tfor ( let i = 0; i < predictors.length; i++ ) {\n\t\t\tconst attr = predictors[ i ];\n\t\t\timportances.push( forest.importances[ attr ] );\n\t\t}\n\t\treturn {\n\t\t\tforest,\n\t\t\tpredictors,\n\t\t\timportances\n\t\t};\n\t} catch ( _ ) {\n\t\treturn {};\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Random Forests.\n*\n* @property {Object} data - object of value arrays\n* @property {string} type - currently only `Classification` for categorical responses is supported\n* @property {Array<string>} quantitative - array of variables in `data` that are `quantitative`\n* @property {(string|Factor)} y - outcome variable\n* @property {(string|Factor|Array<(string|Factor)>)} x - one or more predictor variables\n* @property {string} impurityMeasure - impurity measure (`gini` or `entropy`)\n* @property {number} nTrees - number of trees\n* @property {number} nTry - number of predictors to check at each split\n* @property {number} scoreThreshold - score threshold for split\n* @property {number} maxTreeDepth - maximum tree depth\n* @property {number} minItemsCount - minimum # of observations in leaf nodes\n* @property {Function} onPredict - callback invoked with model object when clicking on the predict button\n*/\nclass RandomForest extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tCOUNTER += 1;\n\n\t\tconst { y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount } = props;\n\t\tthis.state = {\n\t\t\t...fitModel({ y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.type !== prevState.type ||\n\t\t\tnextProps.nTrees !== prevState.nTrees ||\n\t\t\tnextProps.nTry !== prevState.nTry ||\n\t\t\tnextProps.impurityMeasure !== prevState.impurityMeasure ||\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.scoreThreshold !== prevState.scoreThreshold ||\n\t\t\tnextProps.maxTreeDepth !== prevState.maxTreeDepth ||\n\t\t\tnextProps.minItemsCount !== prevState.minItemsCount\n\t\t) {\n\t\t\tconst { y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount } = nextProps;\n\t\t\treturn {\n\t\t\t\t...fitModel({ y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\thandlePredict = () => {\n\t\tthis.props.onPredict( this.state.forest, COUNTER );\n\t}\n\n\trender() {\n\t\tconst { forest } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !forest ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('random-forest-for', { y: this.props.y, counter: COUNTER })}</span>\n\t\t\t\t<p>{t('created-from-trees', { nTrees: this.props.nTrees, nTry: this.props.nTry })}</p>\n\t\t\t\t<Plotly editable data={[{\n\t\t\t\t\ttype: 'bar',\n\t\t\t\t\tx: this.state.predictors,\n\t\t\t\t\ty: this.state.importances\n\t\t\t\t}]} layout={{\n\t\t\t\t\txaxis: {\n\t\t\t\t\t\ttitle: t('variable')\n\t\t\t\t\t},\n\t\t\t\t\tyaxis: {\n\t\t\t\t\t\ttitle: t('importance')\n\t\t\t\t\t}\n\t\t\t\t}} />\n\t\t\t\t{ this.props.onPredict ? <Tooltip tooltip={t('predictions-attached')} >\n\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" style={{ marginTop: 10 }} onClick={this.handlePredict}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t</Tooltip> : null }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nRandomForest.defaultProps = {\n\ttype: 'Classification',\n\tnTrees: 50,\n\tnTry: 1,\n\timpurityMeasure: 'gini',\n\tscoreThreshold: 0.01,\n\tmaxTreeDepth: 20,\n\tminItemsCount: 50,\n\tonPredict: null\n};\n\nRandomForest.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\ttype: PropTypes.oneOf([ 'Classification', 'Regression' ]),\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\tnTrees: PropTypes.number,\n\tnTry: PropTypes.number,\n\timpurityMeasure: PropTypes.oneOf([ 'gini', 'entropy' ]),\n\tscoreThreshold: PropTypes.number,\n\tmaxTreeDepth: PropTypes.number,\n\tminItemsCount: PropTypes.number,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( 'models' )( withPropCheck( RandomForest ) );\n"],"names":["COUNTER","fitModel","y","x","type","nTrees","nTry","impurityMeasure","data","quantitative","scoreThreshold","maxTreeDepth","minItemsCount","predictors","forest","isArray","RandomForestClassifier","response","criterion","importances","i","length","attr","push","_","RandomForest","Component","constructor","props","super","this","onPredict","state","nextProps","prevState","render","t","style","overflowX","width","className","counter","editable","layout","xaxis","title","yaxis","tooltip","variant","size","marginTop","onClick","handlePredict","defaultProps","propTypes","PropTypes","Factor","isRequired","withTranslation","withPropCheck"],"sourceRoot":""}