{"version":3,"file":"static/js/MultipleLinearRegression.015d1c09.chunk.js","mappings":"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","sources":["../node_modules/ml-regression-multivariate-linear/src/index.js","../node_modules/ml-matrix/src/pseudoInverse.js","../node_modules/@isle-project/components/models/multiple-linear-regression/main.js","../node_modules/@isle-project/utils/subtract/index.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js"],"sourcesContent":["import Matrix, { SVD, pseudoInverse } from 'ml-matrix';\nexport default class MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const {\n      intercept = true,\n      statistics = true\n    } = options;\n    this.statistics = statistics;\n\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix(x);\n      y = new Matrix(y);\n\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n\n      let xt = x.transpose();\n      const xx = xt.mmul(x);\n      const xy = xt.mmul(y);\n      const invxx = new SVD(xx).inverse();\n      const beta = xy.transpose().mmul(invxx).transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance = residuals.to2DArray().map(ri => Math.pow(ri[0], 2)).reduce((a, b) => a + b) / (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix.diagonal().map(d => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) => this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i]);\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n\n        return y;\n      }\n    } else if (Matrix.isMatrix(x)) {\n      const y = new Matrix(x.rows, this.outputs);\n\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n\n      return y;\n    }\n\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics ? {\n        regressionStatistics: {\n          standardError: this.stdError,\n          observations: this.outputs\n        },\n        variables: this.weights.map((d, i) => {\n          return {\n            label: i === this.weights.length - 1 ? 'Intercept' : `X Variable ${i + 1}`,\n            coefficients: d,\n            standardError: this.stdErrors[i],\n            tStat: this.tStats[i]\n          };\n        })\n      } : undefined\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n\n    return new MultivariateLinearRegression(true, model);\n  }\n\n}","import SVD from './dc/svd';\nimport Matrix from './matrix';\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n\n  let svdSolution = new SVD(matrix, {\n    autoTranspose: true\n  });\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport MLR from 'ml-regression-multivariate-linear';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport pow from '@stdlib/math/base/special/pow';\nimport round from '@stdlib/math/base/special/round';\nimport fCDF from '@stdlib/stats/base/dists/f/cdf';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isUndefinedOrNull from '@stdlib/assert/is-undefined-or-null';\nimport isnan from '@stdlib/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport tCDF from '@stdlib/stats/base/dists/t/cdf';\nimport Table from '@isle-project/components/table';\nimport Tooltip from '@isle-project/components/tooltip';\nimport Plotly from '@isle-project/components/plotly';\nimport { generateQQPlotConfig } from '@isle-project/components/plots/qqplot';\nimport subtract from '@isle-project/utils/subtract';\nimport mean from '@isle-project/utils/statistic/mean';\nimport extractCategoriesFromValues from '@isle-project/utils/extract-categories-from-values';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\nconst TSTAT = 't';\nconst DF = 'df';\nconst R2 = 'R²:';\n\n\n// FUNCTIONS //\n\nfunction isMissing( x ) {\n\treturn isnan( x ) || isUndefinedOrNull( x );\n}\n\nfunction isNonMissingNumber( x ) {\n\treturn isNumber( x ) && !isnan( x );\n}\n\nfunction designMatrix( x, y, data, quantitative, intercept ) {\n\tif ( !isArray( x ) ) {\n\t\tx = [ x ];\n\t}\n\tconst matrix = [];\n\tconst predictors = [];\n\tconst hash = {};\n\tconst nobs = data[ x[ 0 ] ].length;\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tfor ( let i = 0; i < nobs; i++ ) {\n\t\tconst row = [];\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\trow.push( values[ i ] );\n\t\t\t} else {\n\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\trow.push( ( val === categories[ k ] ) ? 1 : 0 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatrix.push( row );\n\t}\n\tconst yvalues = data[ y ].map( x => [ x ]);\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\nfunction designMatrixMissing( x, y, data, quantitative, intercept ) {\n\tif ( !isArray( x ) ) {\n\t\tx = [ x ];\n\t}\n\tconst matrix = [];\n\tconst predictors = [];\n\tconst hash = {};\n\tconst yvalues = [];\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tfor ( let i = 0; i < data[ x[ 0 ] ].length; i++ ) {\n\t\tconst row = [];\n\t\tlet missing = false;\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\tif ( isNonMissingNumber( values[ i ] ) ) {\n\t\t\t\t\trow.push( values[ i ] );\n\t\t\t\t} else {\n\t\t\t\t\tmissing = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tif ( isMissing( val ) ) {\n\t\t\t\t\tmissing = true;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\t\trow.push( ( val === categories[ k ] ) ? 1 : 0 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( !missing ) {\n\t\t\tmatrix.push( row );\n\t\t\tyvalues.push( [ data[ y ][ i ] ] );\n\t\t}\n\t}\n\tconst nobs = yvalues.length;\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\nconst summaryTable = ( y, x, nobs, result, t ) => {\n\tconst cdf = tCDF.factory( nobs - x.length - 1 );\n\treturn (\n\t\t<Table bordered size=\"sm\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{t('predictor')}</th>\n\t\t\t\t\t<th>{t('coefficient')}</th>\n\t\t\t\t\t<th>{t('std-error')}</th>\n\t\t\t\t\t<th>{TSTAT}</th>\n\t\t\t\t\t<th>{t('p-value')}</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ result.intercept ? <tr>\n\t\t\t\t\t<th>{t('intercept')}</th>\n\t\t\t\t\t<td>{result.weights[ x.length ][ 0 ].toFixed( 6 )}</td>\n\t\t\t\t\t<td>{result.stdErrors[ x.length ].toFixed( 4 )}</td>\n\t\t\t\t\t<td>{result.tStats[ x.length ].toFixed( 4 )}</td>\n\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( result.tStats[ x.length ] ) ) ).toFixed( 4 )}</td>\n\t\t\t\t</tr> : null }\n\t\t\t\t{x.map( ( name, idx ) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={idx} >\n\t\t\t\t\t\t\t<th>{name}</th>\n\t\t\t\t\t\t\t<td>{result.weights[ idx ][ 0 ].toFixed( 6 )}</td>\n\t\t\t\t\t\t\t<td>{result.stdErrors[ idx ].toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{result.tStats[ idx ].toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( result.tStats[ idx ] ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</Table>\n\t);\n};\n\nconst fitModel = ({ x, y, intercept, omitMissing, data, quantitative }) => {\n\tconst out = {};\n\ttry {\n\t\tconst dMatrix = omitMissing ? designMatrixMissing : designMatrix;\n\t\tconst { matrix, predictors, yvalues, nobs } = dMatrix( x, y, data, quantitative, intercept );\n\t\tout.result = new MLR( matrix, yvalues, {\n\t\t\tintercept\n\t\t});\n\t\tconst yhat = out.result.predict( matrix ).map( v => v[ 0 ] );\n\t\tout.yhat = yhat;\n\t\tconst avgFitted = mean( yhat );\n\t\tlet mss = 0;\n\t\tfor ( let i = 0; i < yhat.length; i++ ) {\n\t\t\tmss += pow( yhat[ i ] - avgFitted, 2 );\n\t\t}\n\t\tconst resid = subtract( yvalues, yhat );\n\t\tlet rss = 0;\n\t\tfor ( let i = 0; i < resid.length; i++ ) {\n\t\t\trss += pow( resid[ i ], 2 );\n\t\t}\n\t\tconst p = predictors.length;\n\t\tout.resid = resid;\n\t\tout.rSquared = mss / ( mss + rss );\n\t\tout.adjRSquared = 1 - ( 1 - out.rSquared ) * ( nobs - 1 ) / ( nobs - p - 1 );\n\t\tout.fScore = ( mss / p ) / ( rss / ( nobs - p - 1 ) );\n\t\tout.p = p;\n\t\tout.nobs = nobs;\n\t\tout.predictors = predictors;\n\t\treturn out;\n\t} catch ( _ ) {\n\t\treturn out;\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Multiple linear regression.\n*\n* @property {Object} data - object of value arrays\n* @property {string} y - outcome variable\n* @property {Array<string>} x - one or more predictor variables\n* @property {(string|Factor|Array<(string|Factor)>)} quantitative - array of variables in `data` that are `quantitative`\n* @property {boolean} omitMissing - controls whether to omit missing values\n* @property {boolean} intercept - controls whether to fit a model with an intercept term\n* @property {Function} onDiagnostics - callback invoked with diagnostic plots\n* @property {Function} onPredict - callback invoked with predictions and residuals after model fitting\n*/\nclass MultipleLinearRegression extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tCOUNTER += 1;\n\t\tconst { x, y, intercept, omitMissing, data, quantitative } = props;\n\t\tthis.state = {\n\t\t\t...fitModel({ x, y, intercept, omitMissing, data, quantitative }),\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.omitMissing !== prevState.omitMissing ||\n\t\t\tnextProps.intercept !== prevState.intercept\n\t\t) {\n\t\t\tconst { x, y, intercept, omitMissing, data, quantitative } = nextProps;\n\t\t\tconst newState = {\n\t\t\t\t...fitModel({ x, y, intercept, omitMissing, data, quantitative }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\thandleDiagnostics = () => {\n\t\tconst { x, y, intercept, t } = this.props;\n\t\tconst qqPlot = <Plotly\n\t\t\tdraggable\n\t\t\teditable fit\n\t\t\t{...generateQQPlotConfig( this.state.resid, 'residuals' )}\n\t\t\tmeta={{ type: 'qqplot of regression residuals', x, y, intercept }}\n\t\t/>;\n\t\tconst residualPlot = <Plotly\n\t\t\tdraggable editable fit\n\t\t\tdata={[\n\t\t\t\t{\n\t\t\t\t\tx: this.state.yhat,\n\t\t\t\t\ty: this.state.resid,\n\t\t\t\t\tmode: 'markers',\n\t\t\t\t\ttype: this.state.yhat.length > 2000 ? 'scattergl' : 'scatter'\n\t\t\t\t}\n\t\t\t]}\n\t\t\tlayout={{\n\t\t\t\txaxis: {\n\t\t\t\t\ttitle: t('fitted-values')\n\t\t\t\t},\n\t\t\t\tyaxis: {\n\t\t\t\t\ttitle: t('residuals')\n\t\t\t\t},\n\t\t\t\ttitle: t('residuals-vs-fitted')\n\t\t\t}}\n\t\t\tmeta={{ type: 'regression residuals vs. fitted', x, y, intercept }}\n\t\t/>;\n\t\tthis.props.onDiagnostics([ qqPlot, residualPlot ]);\n\t}\n\n\thandlePredict = () => {\n\t\tconst { data, quantitative, intercept } = this.props;\n\t\tlet { x, y } = this.props;\n\t\tconst { matrix } = designMatrix( x, y, data, quantitative, intercept );\n\t\tconst yhat = this.state.result.predict( matrix ).map( v => v[ 0 ] );\n\t\tconst resid = subtract( data[ y ], yhat );\n\t\tthis.props.onPredict( yhat, resid, COUNTER );\n\t}\n\n\trender() {\n\t\tconst { y, predictors, nobs, result, adjRSquared, p, fScore, rSquared } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !result ) {\n\t\t\treturn <Alert variant=\"danger\">{this.props.t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('multiple-regression-title', { y, counter: COUNTER })}</span>\n\t\t\t\t{summaryTable( y, predictors, nobs, result, t )}\n\t\t\t\t<p>{t('residual-standard-error')}: {round( result.stdError )}</p>\n\t\t\t\t<p>{R2} {rSquared.toFixed( 6 )}, {t('adjusted')} {R2} {adjRSquared.toFixed( 6 )}</p>\n\t\t\t\t<p>{t('f-statistic')}: {fScore.toFixed( 3 )} (${DF}: {nobs-p-1}, {p}), {t('p-value')}: {(1.0 - fCDF( fScore, p, nobs-p-1 )).toFixed( 6 )}</p>\n\t\t\t\t{ this.props.onPredict ? <Tooltip placement=\"top\" tooltip={t('use-model-to-predict-tooltip')} >\n\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={this.handlePredict}>{t('use-model-to-predict')}</Button>\n\t\t\t\t</Tooltip> : null }\n\t\t\t\t{ this.props.onDiagnostics ? <Button variant=\"secondary\" size=\"sm\" style={{ marginLeft: 6 }} onClick={this.handleDiagnostics} >\n\t\t\t\t\t{t('model-diagnostics')}\n\t\t\t\t</Button> : null }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nMultipleLinearRegression.defaultProps = {\n\tomitMissing: false,\n\tintercept: true,\n\tonDiagnostics: null,\n\tonPredict: null\n};\n\nMultipleLinearRegression.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.string.isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\tomitMissing: PropTypes.bool,\n\tintercept: PropTypes.bool,\n\tonDiagnostics: PropTypes.func,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( [ 'models', 'plotly' ] )( withPropCheck( MultipleLinearRegression ) );\n","// MODULES //\n\nimport isArrayLike from '@stdlib/assert/is-array-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\n\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @param {NumberArray} arr - input array\n* @param {(NumberArray|number)} x - either an array of equal length or a scalar\n* @returns {NumberArray} output array\n*/\nfunction subtract( arr, x ) {\n\tconst isArr = isArrayLike( x );\n\tif ( !isArrayLike( arr ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Must provide an array. Value: `' + arr + '`.' );\n\t}\n\tif ( !isArr && !isNumber( x ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must either be an array or number primitive. Value: `' + x + '`.' );\n\t}\n\tconst len = arr.length;\n\tconst out = new Array( len );\n\n\t// Case 1: x is an array\n\tif ( isArr ) {\n\t\tif ( len !== x.length ) {\n\t\t\tthrow new Error( 'invalid input argument. Array to be added must have a length equal to that of the input array.' );\n\t\t}\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x[ i ];\n\t\t}\n\t}\n\t// Case 2: scalar\n\telse {\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default subtract;\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport { hypotenuse } from './util';\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false\n    } = options;\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n    let swapped = false;\n    let a;\n\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone(); // eslint-disable-next-line no-console\n\n        console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n    let si = new Float64Array(ni);\n\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n\n          a.set(k, k, a.get(k, k) + 1);\n        }\n\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n\n          t = -t / a.get(k, k);\n\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n\n          e[k + 1] += 1;\n        }\n\n        e[k] = -e[k];\n\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n\n        U.set(j, j, 1);\n      }\n\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n\n            t = -t / U.get(k, k);\n\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n\n          U.set(k, k, 1 + U.get(k, k));\n\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n\n            t = -t / V.get(k + 1, k);\n\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n\n    while (p > 0) {\n      let k, kase;\n\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n\n        const alpha = Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n\n          let t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1:\n          {\n            let f = e[p - 2];\n            e[p - 2] = 0;\n\n            for (let j = p - 2; j >= k; j--) {\n              let t = hypotenuse(s[j], f);\n              let cs = s[j] / t;\n              let sn = f / t;\n              s[j] = t;\n\n              if (j !== k) {\n                f = -sn * e[j - 1];\n                e[j - 1] = cs * e[j - 1];\n              }\n\n              if (wantv) {\n                for (let i = 0; i < n; i++) {\n                  t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                  V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                  V.set(i, j, t);\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 2:\n          {\n            let f = e[k - 1];\n            e[k - 1] = 0;\n\n            for (let j = k; j < p; j++) {\n              let t = hypotenuse(s[j], f);\n              let cs = s[j] / t;\n              let sn = f / t;\n              s[j] = t;\n              f = -sn * e[j];\n              e[j] = cs * e[j];\n\n              if (wantu) {\n                for (let i = 0; i < m; i++) {\n                  t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                  U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                  U.set(i, j, t);\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 3:\n          {\n            const scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));\n            const sp = s[p - 1] / scale;\n            const spm1 = s[p - 2] / scale;\n            const epm1 = e[p - 2] / scale;\n            const sk = s[k] / scale;\n            const ek = e[k] / scale;\n            const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n            const c = sp * epm1 * (sp * epm1);\n            let shift = 0;\n\n            if (b !== 0 || c !== 0) {\n              if (b < 0) {\n                shift = 0 - Math.sqrt(b * b + c);\n              } else {\n                shift = Math.sqrt(b * b + c);\n              }\n\n              shift = c / (b + shift);\n            }\n\n            let f = (sk + sp) * (sk - sp) + shift;\n            let g = sk * ek;\n\n            for (let j = k; j < p - 1; j++) {\n              let t = hypotenuse(f, g);\n              if (t === 0) t = Number.MIN_VALUE;\n              let cs = f / t;\n              let sn = g / t;\n\n              if (j !== k) {\n                e[j - 1] = t;\n              }\n\n              f = cs * s[j] + sn * e[j];\n              e[j] = cs * e[j] - sn * s[j];\n              g = sn * s[j + 1];\n              s[j + 1] = cs * s[j + 1];\n\n              if (wantv) {\n                for (let i = 0; i < n; i++) {\n                  t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                  V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                  V.set(i, j, t);\n                }\n              }\n\n              t = hypotenuse(f, g);\n              if (t === 0) t = Number.MIN_VALUE;\n              cs = f / t;\n              sn = g / t;\n              s[j] = t;\n              f = cs * e[j] + sn * s[j + 1];\n              s[j + 1] = -sn * e[j] + cs * s[j + 1];\n              g = sn * e[j + 1];\n              e[j + 1] = cs * e[j + 1];\n\n              if (wantu && j < m - 1) {\n                for (let i = 0; i < m; i++) {\n                  t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                  U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                  U.set(i, j, t);\n                }\n              }\n            }\n\n            e[p - 2] = f;\n            iter = iter + 1;\n            break;\n          }\n\n        case 4:\n          {\n            if (s[k] <= 0) {\n              s[k] = s[k] < 0 ? -s[k] : 0;\n\n              if (wantv) {\n                for (let i = 0; i <= pp; i++) {\n                  V.set(i, k, -V.get(i, k));\n                }\n              }\n            }\n\n            while (k < pp) {\n              if (s[k] >= s[k + 1]) {\n                break;\n              }\n\n              let t = s[k];\n              s[k] = s[k + 1];\n              s[k + 1] = t;\n\n              if (wantv && k < n - 1) {\n                for (let i = 0; i < n; i++) {\n                  t = V.get(i, k + 1);\n                  V.set(i, k + 1, V.get(i, k));\n                  V.set(i, k, t);\n                }\n              }\n\n              if (wantu && k < m - 1) {\n                for (let i = 0; i < m; i++) {\n                  t = U.get(i, k + 1);\n                  U.set(i, k + 1, U.get(i, k));\n                  U.set(i, k, t);\n                }\n              }\n\n              k++;\n            }\n\n            iter = 0;\n            p--;\n            break;\n          }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n\n}","export function hypotenuse(a, b) {\n  let r = 0;\n\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n\n  return 0;\n}","import { AbstractMatrix } from '../matrix';\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n}"],"names":["MultivariateLinearRegression","constructor","x","y","options","intercept","statistics","this","weights","inputs","outputs","addColumn","Array","rows","fill","xt","transpose","xx","mmul","xy","invxx","inverse","beta","to2DArray","columns","fittedValues","variance","clone","addM","neg","map","ri","Math","pow","reduce","a","b","stdError","sqrt","stdErrorMatrix","matrix","threshold","Number","EPSILON","isEmpty","svdSolution","autoTranspose","U","leftSingularVectors","V","rightSingularVectors","s","diagonal","i","length","abs","pseudoInverse","mul","stdErrors","d","tStats","predict","isArray","_predict","setRow","getRow","TypeError","result","j","score","Error","toJSON","name","summary","regressionStatistics","standardError","observations","variables","label","coefficients","tStat","undefined","static","model","COUNTER","isMissing","isnan","isUndefinedOrNull","isNonMissingNumber","isNumber","designMatrix","data","quantitative","predictors","hash","nobs","values","contains","push","categories","extractCategoriesFromValues","k","row","val","yvalues","designMatrixMissing","missing","fitModel","omitMissing","out","dMatrix","MLR","yhat","v","avgFitted","mean","mss","resid","subtract","rss","p","rSquared","adjRSquared","fScore","_","MultipleLinearRegression","Component","props","super","t","qqPlot","draggable","editable","fit","generateQQPlotConfig","state","meta","type","residualPlot","mode","layout","xaxis","title","yaxis","onDiagnostics","onPredict","nextProps","prevState","render","style","overflowX","width","className","counter","cdf","tCDF","bordered","size","toFixed","idx","key","summaryTable","round","fCDF","placement","tooltip","Button","variant","onClick","handlePredict","marginLeft","handleDiagnostics","Alert","defaultProps","propTypes","PropTypes","Factor","isRequired","withTranslation","withPropCheck","arr","isArr","isArrayLike","len","SingularValueDecomposition","value","m","n","computeLeftSingularVectors","computeRightSingularVectors","wantu","Boolean","wantv","swapped","aux","console","warn","nu","min","ni","Float64Array","e","work","si","nct","nrt","max","mrc","get","set","pp","iter","eps","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","scale","sp","spm1","epm1","sk","ek","c","shift","g","tmp","solve","Y","scols","Ls","VL","vrows","urows","VLU","sum","solveForDiagonal","vcols","X","ucols","condition","norm2","rank","tol","r","ii","from","diagonalMatrix","hypotenuse","WrapperMatrix2D","rowIndex","columnIndex"],"sourceRoot":""}