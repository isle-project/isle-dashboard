{"version":3,"file":"static/js/RPlot.bd379ec3.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/internal/spinner/index.js","../node_modules/@isle-project/components/image/index.js","../node_modules/@isle-project/components/r/plot/main.js","../node_modules/@isle-project/components/r/utils/create-prepend-code/index.js","../node_modules/@stdlib/utils/omit-by/lib/index.js","../node_modules/@stdlib/utils/omit-by/lib/omit_by.js"],"sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport PI from '@stdlib/constants/float64/pi';\n\n\n// MAIN //\n\n/**\n* Spinner to visualize load times.\n*\n* @property {string} display - CSS display property\n* @property {number} height - height (in px)\n* @property {number} width - width (in px)\n* @property {number} lines - number of lines\n* @property {Object} style - CSS inline styles\n*/\nclass Spinner extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.activeSpinner && this.context.canvas ) {\n\t\t\tclearInterval( this.activeSpinner );\n\t\t\tthis.context.clearRect( 0, 0, this.context.canvas.width, this.context.canvas.height );\n\t\t}\n\t\tif ( this.props.running === true ) {\n\t\t\tthis.startSpinner();\n\t\t}\n\t}\n\n\tstartSpinner = () => {\n\t\tconst canvas = findDOMNode( this );\n\t\tconst context = canvas.getContext( '2d' );\n\t\tthis.context = context;\n\t\tconst start = new Date();\n\t\tconst lines = this.props.lines;\n\t\tconst cW = context.canvas.width;\n\t\tconst cH = context.canvas.height;\n\n\t\tconst draw = () => {\n\t\t\tconst num = ( ( new Date() - start ) / 1000 ) * lines;\n\t\t\tconst rotation = parseInt( num, 10 ) / lines;\n\t\t\tcontext.save();\n\t\t\tcontext.clearRect( 0, 0, cW, cH );\n\t\t\tcontext.translate( cW / 2.0, cH / 2.0 );\n\t\t\tcontext.rotate( PI * 2 * rotation );\n\t\t\tfor ( let i = 0; i < lines; i++ ) {\n\t\t\t\tcontext.beginPath();\n\t\t\t\tcontext.rotate( PI * 2.0 / lines );\n\t\t\t\tcontext.moveTo( cW / 10, 0 );\n\t\t\t\tcontext.lineTo( cW / 4, 0 );\n\t\t\t\tcontext.lineWidth = cW / 30;\n\t\t\t\tcontext.strokeStyle = 'rgba(0, 0, 0,' + i / lines + ')';\n\t\t\t\tcontext.stroke();\n\t\t\t}\n\t\t\tcontext.restore();\n\t\t};\n\t\tthis.activeSpinner = window.setInterval( draw, 50 );\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<canvas\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: this.props.width,\n\t\t\t\t\theight: this.props.height,\n\t\t\t\t\tdisplay: this.props.running ? this.props.display : 'none',\n\t\t\t\t\tmargin: 'auto',\n\t\t\t\t\t...this.props.style\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nSpinner.defaultProps = {\n\tdisplay: 'block',\n\theight: 64,\n\tlines: 16,\n\tstyle: {},\n\twidth: 128\n};\n\nSpinner.propTypes = {\n\tdisplay: PropTypes.string,\n\theight: PropTypes.number,\n\tlines: PropTypes.number,\n\trunning: PropTypes.bool.isRequired,\n\tstyle: PropTypes.object,\n\twidth: PropTypes.number\n};\n\n\n// EXPORTS //\n\nexport default Spinner;\n","// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Image = Loadable( () => import( /* webpackChunkName: \"Image\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Image;\n","// MODULES //\n\nimport React, { Fragment, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport jsyaml from 'js-yaml';\nimport omitBy from '@stdlib/utils/omit-by';\nimport isNull from '@stdlib/assert/is-null';\nimport createPrependCode from '@isle-project/components/r/utils/create-prepend-code';\nimport Spinner from '@isle-project/components/internal/spinner';\nimport Image from '@isle-project/components/image';\nimport SessionContext from '@isle-project/session/context.js';\nimport html2clipboard from '@isle-project/utils/html-to-clipboard';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport './plot.css';\n\n\n// FUNCTIONS //\n\nfunction createImgHTML({ id, meta, plot }) {\n\tlet img;\n\tif ( !meta ) {\n\t\timg = `<img src=\"${plot}\" alt=\"R Plot\" style=\"display: block; margin: 0 auto;\" />`;\n\t} else {\n\t\tmeta = omitBy( meta, ( _, value ) => {\n\t\t\treturn isNull( value );\n\t\t});\n\t\tmeta = jsyaml.dump( meta );\n\t\timg = `<img src=\"${plot}\" style=\"display: block; margin: 0 auto;\" data-plot-id=\"${id}\" data-plot-meta=\"${meta}\"></img>`;\n\t}\n\treturn img;\n}\n\n// MAIN //\n\n/**\n* Component for rendering an R plot inside an ISLE lesson.\n*\n* @property {string} code - R code to generate the plot\n* @property {number} width - width of the plot (in px)\n* @property {number} height - height of the plot (in px)\n* @property {boolean} draggable - controls whether the plot should be draggable\n* @property {string} fileType - file type of the plot (`png` or `svg`)\n* @property {Array} libraries - R libraries that should be loaded automatically when the input `code` is executed\n* @property {(string|Array<string>)} prependCode - `string` or an `array` of R code snippets to be prepended to the code stored in `code` when evaluating\n* @property {Object} meta - plot meta-information\n* @property {string} className - class name\n* @property {Function} onDone - callback invoked with `err`, `img` and `body` arguments once a plot is created\n*/\nconst RPlot = ({ code, className, draggable, id, libraries, prependCode, fileType, meta, onDone, ...rest }) => {\n\tconst { t } = useTranslation( 'r' );\n\tconst [ waiting, setWaiting ] = useState( false );\n\tconst [ plot, setPlot ] = useState({ img: null, body: null });\n\tconst session = useContext( SessionContext );\n\tuseEffect( () => {\n\t\tsetWaiting( true );\n\t\tconst prepended = createPrependCode( libraries, prependCode, session );\n\t\tconst fullCode = prepended + code;\n\t\tsession.getRPlot( fullCode, fileType, ( error, img, body ) => {\n\t\t\tif ( error ) {\n\t\t\t\tonDone( error );\n\t\t\t} else {\n\t\t\t\tsetPlot({ img, body });\n\t\t\t\tsetWaiting( false );\n\t\t\t\tonDone( null, img, body );\n\t\t\t}\n\t\t});\n\t}, [ code, fileType, libraries, prependCode, session, onDone ] );\n\n\tlet draggableBar = null;\n\tif ( draggable ) {\n\t\tdraggableBar = <button\n\t\t\tclassName=\"rplot-draggable-bar\"\n\t\t\tdraggable={true}\n\t\t\tonDragStart={( ev ) => {\n\t\t\t\tconst img = createImgHTML({ id, meta, plot: plot.body });\n\t\t\t\tev.dataTransfer.setData( 'text/html', img );\n\t\t\t}}\n\t\t\tonClick={() => {\n\t\t\t\tconst img = createImgHTML({ id, meta, plot: plot.body });\n\t\t\t\thtml2clipboard( img );\n\t\t\t}}\n\t\t>{t('drag-plot')}</button>;\n\t}\n\treturn (\n\t\t<div className={`rplot ${className}`} style={{ minHeight: 128, cursor: 'pointer' }}>\n\t\t\t<Spinner running={waiting} width={256} height={128} />\n\t\t\t{ waiting ?\n\t\t\t\t<span /> :\n\t\t\t\t<Fragment>\n\t\t\t\t\t{draggableBar}\n\t\t\t\t\t<Image\n\t\t\t\t\t\tsrc={plot.img}\n\t\t\t\t\t\tbody={plot.body}\n\t\t\t\t\t\ttitle={t('r-plot')}\n\t\t\t\t\t\t{...rest}\n\t\t\t\t\t/>\n\t\t\t\t</Fragment>\n\t\t\t}\n\t\t</div>\n\t);\n};\n\n\n// PROPERTIES //\n\nRPlot.propTypes = {\n\tcode: PropTypes.string,\n\twidth: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\theight: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tdraggable: PropTypes.bool,\n\tfileType: PropTypes.string,\n\tlibraries: PropTypes.array,\n\tprependCode: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.array\n\t]),\n\tmeta: PropTypes.object,\n\tclassName: PropTypes.string,\n\tonDone: PropTypes.func\n};\n\nRPlot.defaultProps = {\n\tcode: '',\n\twidth: 600,\n\theight: 'auto',\n\tdraggable: false,\n\tfileType: 'svg',\n\tlibraries: [],\n\tprependCode: '',\n\tmeta: null,\n\tclassName: '',\n\tonDone() {}\n};\n\n\n// EXPORTS //\n\nexport default withPropCheck( RPlot );\n","// MODULES //\n\nimport isArray from '@stdlib/assert/is-array';\n\n\n// FUNCTIONS //\n\nconst requireLibs = ( libs ) => {\n\treturn libs.map( x => 'library(' + x + ');' )\n\t\t.join( ' ' );\n};\n\n\n// MAIN //\n\n/**\n* Create code to be added in front of user-supplied R code.\n*\n* @param {Array} libs - array of libraries to requireLibs\n* @param {(Array|string)} prependCode - array of strings or single string of code to prepend\n* @param {Object} session - session object\n* @param {string} generated code\n*/\nfunction createPrependCode( libs, prependCode, session ) {\n\tconst { rshell } = session.config;\n\tif ( rshell && rshell.libraries ) {\n\t\tlibs = libs.concat( rshell.libraries );\n\t}\n\tlet ret = requireLibs( libs );\n\tif ( rshell && rshell.global ) {\n\t\tret += rshell.global + '\\n';\n\t}\n\tprependCode = isArray( prependCode ) ?\n\t\tprependCode.join( '\\n' ) :\n\t\tprependCode;\n\tprependCode += '\\n';\n\tret += prependCode;\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nexport default createPrependCode;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Return a partial object copy excluding properties for which a predicate (function) returns a truthy value.\n*\n* @module @stdlib/utils/omit-by\n*\n* @example\n* var omitBy = require( '@stdlib/utils/omit-by' );\n*\n* function predicate( key, value ) {\n*     return ( value > 1 );\n* }\n*\n* var obj1 = {\n*     'a': 1,\n*     'b': 2\n* };\n*\n* var obj2 = omitBy( obj1, predicate );\n* // returns { 'a': 1 }\n*/\n// MODULES //\n\nvar omitBy = require('./omit_by.js'); // EXPORTS //\n\n\nmodule.exports = omitBy;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar objectKeys = require('./../../keys');\n\nvar isFunction = require('@stdlib/assert/is-function'); // MAIN //\n\n/**\n* Returns a partial object copy excluding properties for which a predicate returns a truthy value.\n*\n* @param {Object} obj - source object\n* @param {Function} predicate - predicate function\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} second argument must be a function\n* @returns {Object} new object\n*\n* @example\n* function predicate( key, value ) {\n*     return ( value > 1 );\n* }\n*\n* var obj1 = {\n*     'a': 1,\n*     'b': 2\n* };\n*\n* var obj2 = omitBy( obj1, predicate );\n* // returns { 'a': 1 }\n*/\n\n\nfunction omitBy(obj, predicate) {\n  var keys;\n  var out;\n  var key;\n  var i;\n\n  if (typeof obj !== 'object' || obj === null) {\n    throw new TypeError('invalid argument. First argument must be an object. Value: `' + obj + '`.');\n  }\n\n  if (!isFunction(predicate)) {\n    throw new TypeError('invalid argument. Second argument must be a function. Value: `' + predicate + '`.');\n  }\n\n  out = {};\n  keys = objectKeys(obj);\n\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i];\n\n    if (!predicate(key, obj[key])) {\n      out[key] = obj[key];\n    }\n  }\n\n  return out;\n} // EXPORTS //\n\n\nmodule.exports = omitBy;"],"names":["Spinner","props","context","findDOMNode","getContext","start","Date","lines","cW","canvas","width","cH","height","activeSpinner","window","setInterval","num","rotation","parseInt","save","clearRect","translate","rotate","PI","i","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","restore","this","clearInterval","running","startSpinner","style","display","margin","Component","defaultProps","Loadable","createImgHTML","img","id","meta","plot","omitBy","_","value","isNull","jsyaml","RPlot","code","className","draggable","libraries","prependCode","fileType","onDone","rest","t","useTranslation","useState","waiting","setWaiting","body","setPlot","session","useContext","SessionContext","useEffect","fullCode","createPrependCode","getRPlot","error","draggableBar","onDragStart","ev","dataTransfer","setData","onClick","html2clipboard","minHeight","cursor","Fragment","src","title","withPropCheck","libs","rshell","config","concat","ret","map","x","join","requireLibs","global","isArray","module","exports","objectKeys","isFunction","obj","predicate","keys","out","key","TypeError","length"],"sourceRoot":""}