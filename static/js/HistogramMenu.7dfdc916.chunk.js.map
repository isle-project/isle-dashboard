{"version":3,"file":"static/js/HistogramMenu.7dfdc916.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/data-explorer/menu/histogram.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js"],"sourcesContent":["// MODULES //\n\nimport React, { useEffect, useState } from 'react';\nimport logger from 'debug';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport PropTypes from 'prop-types';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport SelectInput from '@isle-project/components/input/select';\nimport NumberInput from '@isle-project/components/input/number';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport Histogram from '@isle-project/components/plots/histogram';\nimport { DATA_EXPLORER_SHARE_HISTOGRAM, DATA_EXPLORER_HISTOGRAM } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:data-explorer:histogram' );\nconst DEFAULT_XBINS = {\n\tstart: null,\n\tsize: 100,\n\tend: null\n};\n\n\n// MAIN //\n\nconst HistogramMenu = ( props ) => {\n\tconst [ displayDensity, setDisplayDensity ] = useState( false );\n\tconst [ densityType, setDensityType ] = useState( null );\n\tconst [ bandwidthAdjust, setBandwidthAdjust ] = useState( 1 );\n\tconst [ variable, setVariable ] = useState( props.defaultValue || props.variables[ 0 ] );\n\tconst [ group, setGroup ] = useState( null );\n\tconst [ groupMode, setGroupMode ] = useState( 'Overlay' );\n\tconst [ nCols, setNCols ] = useState( 2 );\n\tconst [ nBins, setNBins ] = useState( 10 );\n\tconst [ xBins, setXBins ] = useState( DEFAULT_XBINS );\n\tconst [ binStrategy, setBinStrategy ] = useState( 'Automatic' );\n\tconst { variables, groupingVariables, t } = props;\n\n\tuseEffect( () => {\n\t\tsetXBins( DEFAULT_XBINS );\n\t}, [ binStrategy ] );\n\n\tconst generateHistogram = () => {\n\t\tdebug( `Generate a histogram with ${nBins} bins` );\n\t\tconst plotId = randomstring( 6 );\n\t\tconst state = {\n\t\t\tvariable,\n\t\t\tgroup,\n\t\t\tgroupMode,\n\t\t\tdisplayDensity,\n\t\t\tdensityType,\n\t\t\tbinStrategy\n\t\t};\n\t\tif ( binStrategy === 'Select # of bins' ) {\n\t\t\tstate.nBins = nBins;\n\t\t}\n\t\tstate.xBins = xBins;\n\t\tif ( groupMode === 'Facets' ) {\n\t\t\tstate.nCols = nCols;\n\t\t}\n\t\tif ( densityType === 'Data-driven' ) {\n\t\t\tstate.bandwidthAdjust = bandwidthAdjust;\n\t\t}\n\t\tconst action = { ...state, plotId };\n\t\tconst onShare = () => {\n\t\t\tprops.session.addNotification({\n\t\t\t\ttitle: props.t('plot-shared'),\n\t\t\t\tmessage: props.t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tprops.logAction( DATA_EXPLORER_SHARE_HISTOGRAM, action );\n\t\t};\n\t\tconst output = <Histogram data={props.data} {...state} id={plotId} action={action} onShare={onShare} />;\n\t\tprops.logAction( DATA_EXPLORER_HISTOGRAM, action );\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Histogram')}\n\t\t\t\t<QuestionButton title={t('Histogram')} content={t('Histogram-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('variable')}\n\t\t\t\t\tdefaultValue={variable}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={setVariable}\n\t\t\t\t/>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col md={5} >\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('group-by')}\n\t\t\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\t\t\tclearable={true}\n\t\t\t\t\t\t\tonChange={setGroup}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col md={4} >\n\t\t\t\t\t\t{ group ? <SelectInput\n\t\t\t\t\t\t\tlegend={`${t('mode')}:`}\n\t\t\t\t\t\t\tdefaultValue={groupMode}\n\t\t\t\t\t\t\toptions={[ 'Overlay', 'Facets' ]}\n\t\t\t\t\t\t\tonChange={setGroupMode}\n\t\t\t\t\t\t/> : null }\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col md={3} >\n\t\t\t\t\t\t{ group && groupMode === 'Facets' ? <NumberInput\n\t\t\t\t\t\t\tlegend={t('columns')}\n\t\t\t\t\t\t\tdefaultValue={2}\n\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\tonChange={setNCols}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tmarginTop: 0\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tinputStyle={{\n\t\t\t\t\t\t\t\twidth: 70,\n\t\t\t\t\t\t\t\tmarginLeft: 0,\n\t\t\t\t\t\t\t\tmarginTop: 2\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/> : null }\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<div>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('binning-strategy')}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t'Automatic',\n\t\t\t\t\t\t\t'Select # of bins',\n\t\t\t\t\t\t\t'Set bin width'\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tdefaultValue={binStrategy}\n\t\t\t\t\t\tinline\n\t\t\t\t\t\tonChange={setBinStrategy}\n\t\t\t\t\t/>\n\t\t\t\t\t{ binStrategy !== 'Automatic' ?\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<NumberInput\n\t\t\t\t\t\t\t\tlegend={t('start')}\n\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t\tdefaultValue={xBins.start}\n\t\t\t\t\t\t\t\tonChange={( val ) => {\n\t\t\t\t\t\t\t\t\tconst newXBins = { ...xBins };\n\t\t\t\t\t\t\t\t\tnewXBins.start = val;\n\t\t\t\t\t\t\t\t\tsetXBins( newXBins );\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tstep=\"any\"\n\t\t\t\t\t\t\t\tinputStyle={{\n\t\t\t\t\t\t\t\t\twidth: 70\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{ binStrategy === 'Select # of bins' ?\n\t\t\t\t\t\t\t\t<NumberInput\n\t\t\t\t\t\t\t\t\tlegend={t('bins')}\n\t\t\t\t\t\t\t\t\tdefaultValue={nBins}\n\t\t\t\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\t\t\t\tonChange={setNBins}\n\t\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t\t\tinputStyle={{\n\t\t\t\t\t\t\t\t\t\twidth: 70\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/> : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ binStrategy === 'Set bin width' ?\n\t\t\t\t\t\t\t\t<NumberInput\n\t\t\t\t\t\t\t\t\tlegend={t('size')}\n\t\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t\t\tdefaultValue={xBins.size}\n\t\t\t\t\t\t\t\t\tonChange={( val ) => {\n\t\t\t\t\t\t\t\t\t\tconst newXBins = { ...xBins };\n\t\t\t\t\t\t\t\t\t\tnewXBins.size = val;\n\t\t\t\t\t\t\t\t\t\tsetXBins( newXBins );\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tstep=\"any\"\n\t\t\t\t\t\t\t\t\tinputStyle={{\n\t\t\t\t\t\t\t\t\t\twidth: 70\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/> : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<NumberInput\n\t\t\t\t\t\t\t\tlegend={t('end')}\n\t\t\t\t\t\t\t\tinline\n\t\t\t\t\t\t\t\tdefaultValue={xBins.end}\n\t\t\t\t\t\t\t\tonChange={( val ) => {\n\t\t\t\t\t\t\t\t\tconst newXBins = { ...xBins };\n\t\t\t\t\t\t\t\t\tnewXBins.end = val;\n\t\t\t\t\t\t\t\t\tsetXBins( newXBins );\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tstep=\"any\"\n\t\t\t\t\t\t\t\tinputStyle={{\n\t\t\t\t\t\t\t\t\twidth: 70\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div> : null }\n\t\t\t\t</div>\n\t\t\t\t{ props.showDensityOption ?\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('display-density')}\n\t\t\t\t\t\t\tdefaultValue={displayDensity}\n\t\t\t\t\t\t\tonChange={setDisplayDensity}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('overlay-density-line')}\n\t\t\t\t\t\t\toptions={[ 'Data-driven', 'Normal', 'Uniform', 'Exponential' ]}\n\t\t\t\t\t\t\tdisabled={!displayDensity}\n\t\t\t\t\t\t\tdefaultValue={densityType}\n\t\t\t\t\t\t\tclearable\n\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t\tonChange={setDensityType}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{densityType === 'Data-driven' ?\n\t\t\t\t\t\t\t<NumberInput\n\t\t\t\t\t\t\t\tlegend={t('bandwidth-adjustment')}\n\t\t\t\t\t\t\t\tdefaultValue={bandwidthAdjust}\n\t\t\t\t\t\t\t\tmin={0} step={0.1}\n\t\t\t\t\t\t\t\tonChange={setBandwidthAdjust}\n\t\t\t\t\t\t\t/> : null\n\t\t\t\t\t\t}\n\t\t\t\t\t</div> : null }\n\t\t\t\t<Button variant=\"primary\" block onClick={generateHistogram}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nHistogramMenu.defaultProps = {\n\tdefaultValue: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tshowDensityOption: true,\n\tonSelected() {}\n};\n\nHistogramMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultValue: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonSelected: PropTypes.func,\n\tonCreated: PropTypes.func.isRequired,\n\tsession: PropTypes.object.isRequired,\n\tshowDensityOption: PropTypes.bool,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default HistogramMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n"],"names":["debug","logger","DEFAULT_XBINS","start","size","end","HistogramMenu","props","displayDensity","setDisplayDensity","useState","densityType","setDensityType","bandwidthAdjust","setBandwidthAdjust","variable","setVariable","defaultValue","variables","group","setGroup","groupMode","setGroupMode","nCols","setNCols","nBins","setNBins","xBins","setXBins","binStrategy","setBinStrategy","groupingVariables","t","useEffect","as","title","content","legend","options","onChange","md","clearable","min","style","marginTop","inputStyle","width","marginLeft","inline","val","newXBins","step","showDensityOption","disabled","menuPlacement","variant","block","onClick","plotId","randomstring","state","action","output","data","id","onShare","session","addNotification","message","level","position","logAction","DATA_EXPLORER_SHARE_HISTOGRAM","DATA_EXPLORER_HISTOGRAM","onCreated","defaultProps","onSelected","propTypes","PropTypes","QuestionButton","popover","trigger","placement","rootClose","overlay","className","isRequired","uid","generateUID","CheckboxInput","bind","useRef","useContext","SessionContext","value","setValue","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","tooltipPlacement","current","role","tabIndex","color","onKeyPress","onSpanChange","noop","max","PINF","NINF","NumberInput","propValue","onBlur","useTranslation","isNumber","valid","validity","parseFloat","isnan","finishChange","contains","splitted","split","isNull","createTooltip","padding","htmlFor","numbersOnly","name","paddingLeft","onKeyDown","onKeyUp","autoComplete","description","show","marginBottom","isString"],"sourceRoot":""}