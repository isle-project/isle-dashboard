{"version":3,"file":"static/js/DecisionTreeMenu.18a2c2ec.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/collapse/index.js","../node_modules/@isle-project/components/data-explorer/menu/decision_tree.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/utils/subtract/index.js"],"sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Collapse = Loadable( () => import( /* webpackChunkName: \"Collapse\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Collapse;\n","// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport unique from 'uniq';\nimport contains from '@stdlib/assert/contains';\nimport copy from '@stdlib/utils/copy';\nimport SelectInput from '@isle-project/components/input/select';\nimport NumberInput from '@isle-project/components/input/number';\nimport Collapse from '@isle-project/components/collapse';\nimport DecisionTree from '@isle-project/components/models/decision-tree';\nimport { DATA_EXPLORER_DECISION_TREE } from '@isle-project/constants/actions.js';\nimport subtract from '@isle-project/utils/subtract';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst DecisionTreeMenu = ( props ) => {\n\tconst { categorical, quantitative, t } = props;\n\tconst [ y, setY ] = useState( 0 );\n\tconst [ x, setX ] = useState( 0 );\n\tconst [ type, setType ] = useState( 'Classification' );\n\tconst [ impurityMeasure, setImpurityMeasure ] = useState( 'gini' );\n\tconst [ scoreThreshold, setScoreThreshold ] = useState( 0.0075 );\n\tconst [ maxTreeDepth, setMaxTreeDepth ] = useState( 5 );\n\tconst [ minItemsCount, setMinItemsCount ] = useState( 50 );\n\n\tconst compute = () => {\n\t\tconst output = <DecisionTree\n\t\t\tx={x} y={y} type={type} impurityMeasure={impurityMeasure}\n\t\t\tdata={props.data} quantitative={props.quantitative}\n\t\t\tscoreThreshold={scoreThreshold} maxTreeDepth={maxTreeDepth}\n\t\t\tminItemsCount={minItemsCount}\n\t\t\tonPredict={( tree, counter ) => {\n\t\t\t\tconst newData = copy( props.data, 1 );\n\t\t\t\tif ( type === 'Classification' ) {\n\t\t\t\t\tconst newCategorical = props.categorical.slice();\n\t\t\t\t\tconst yhat = tree.predict( newData ).map( x => String( x ) );\n\t\t\t\t\tlet name = 'pred_tree' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'correct_tree' + counter;\n\t\t\t\t\tconst yvalues = props.data[ y ];\n\t\t\t\t\tnewData[ name ] = yhat.map( ( x, i ) => x === String( yvalues[ i ] ) ? 'Yes' : 'No' );\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tprops.onGenerate( props.quantitative, newCategorical, newData );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst newQuantitative = props.quantitative.slice();\n\t\t\t\t\tconst yhat = tree.predict( newData );\n\t\t\t\t\tlet name = 'pred_tree' + counter;\n\t\t\t\t\tnewData[ name ] = yhat;\n\t\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tname = 'resid_tree' + counter;\n\t\t\t\t\tnewData[ name ] = subtract( yhat, props.data[ y ] );\n\t\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tprops.onGenerate( newQuantitative, props.categorical, newData );\n\t\t\t\t}\n\t\t\t}}\n\t\t/>;\n\t\tprops.logAction( DATA_EXPLORER_DECISION_TREE, {\n\t\t\ty, x, type\n\t\t});\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card\n\t\t\tstyle={{ fontSize: '14px', maxWidth: 600 }}\n\t\t>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Decision Tree')}\n\t\t\t\t<QuestionButton title={t('Decision Tree')} content={t('Decision Tree-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('type')}\n\t\t\t\t\toptions={[ 'Classification', 'Regression' ]}\n\t\t\t\t\tdefaultValue={type}\n\t\t\t\t\tonChange={( newType ) => {\n\t\t\t\t\t\tif ( newType !== type ) {\n\t\t\t\t\t\t\tsetType( newType );\n\t\t\t\t\t\t\tsetY( type === 'Classification' ? categorical[ 0 ] : quantitative[ 0 ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('outcome-y')}\n\t\t\t\t\toptions={type === 'Classification' ? categorical : quantitative}\n\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\tonChange={setY}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('predictors-x')} multi\n\t\t\t\t\toptions={unique( quantitative.concat( categorical ) )}\n\t\t\t\t\tdefaultValue={x || ''}\n\t\t\t\t\tonChange={setX}\n\t\t\t\t\tcloseMenuOnSelect={false}\n\t\t\t\t/>\n\t\t\t\t{ type === 'Classification' ? <SelectInput\n\t\t\t\t\tlegend={t('impurity-measure')}\n\t\t\t\t\tdefaultValue={impurityMeasure}\n\t\t\t\t\toptions={[ 'gini', 'entropy' ]}\n\t\t\t\t\tonChange={setImpurityMeasure}\n\t\t\t\t/> : null }\n\t\t\t\t<Collapse header={t('change-tree-features')} headerStyle={{ fontSize: '1rem' }} >\n\t\t\t\t\t<NumberInput legend={t('score-threshold-for-split')}\n\t\t\t\t\t\tmin={0} max={1} step={0.001}\n\t\t\t\t\t\tdefaultValue={scoreThreshold} onChange={setScoreThreshold}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput legend={t('maximum-tree-depth')}\n\t\t\t\t\t\tmin={1} max={50}\n\t\t\t\t\t\tdefaultValue={maxTreeDepth} onChange={setMaxTreeDepth}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberInput legend={t('min-obs-leafs')}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tdefaultValue={minItemsCount}\n\t\t\t\t\t\tonChange={setMinItemsCount}\n\t\t\t\t\t/>\n\t\t\t\t</Collapse>\n\t\t\t\t<Button disabled={!x || x.length === 0} variant=\"primary\" block onClick={compute} >\n\t\t\t\t\t{t('calculate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nDecisionTreeMenu.defaultProps = {\n\tlogAction() {}\n};\n\nDecisionTreeMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default DecisionTreeMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport isArrayLike from '@stdlib/assert/is-array-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\n\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @param {NumberArray} arr - input array\n* @param {(NumberArray|number)} x - either an array of equal length or a scalar\n* @returns {NumberArray} output array\n*/\nfunction subtract( arr, x ) {\n\tconst isArr = isArrayLike( x );\n\tif ( !isArrayLike( arr ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Must provide an array. Value: `' + arr + '`.' );\n\t}\n\tif ( !isArr && !isNumber( x ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must either be an array or number primitive. Value: `' + x + '`.' );\n\t}\n\tconst len = arr.length;\n\tconst out = new Array( len );\n\n\t// Case 1: x is an array\n\tif ( isArr ) {\n\t\tif ( len !== x.length ) {\n\t\t\tthrow new Error( 'invalid input argument. Array to be added must have a length equal to that of the input array.' );\n\t\t}\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x[ i ];\n\t\t}\n\t}\n\t// Case 2: scalar\n\telse {\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default subtract;\n"],"names":["Collapse","Loadable","DecisionTreeMenu","props","categorical","quantitative","t","useState","y","setY","x","setX","type","setType","impurityMeasure","setImpurityMeasure","scoreThreshold","setScoreThreshold","maxTreeDepth","setMaxTreeDepth","minItemsCount","setMinItemsCount","style","fontSize","maxWidth","as","title","content","legend","options","defaultValue","onChange","newType","multi","unique","concat","closeMenuOnSelect","header","headerStyle","min","max","step","disabled","length","variant","block","onClick","output","data","onPredict","tree","counter","newData","copy","newCategorical","slice","yhat","predict","map","String","name","contains","push","yvalues","i","onGenerate","newQuantitative","subtract","logAction","DATA_EXPLORER_DECISION_TREE","onCreated","defaultProps","popover","id","trigger","placement","rootClose","overlay","size","className","tooltip","PINF","NINF","debug","logger","uid","generateUID","NumberInput","useRef","bind","propValue","value","onBlur","useTranslation","session","useContext","SessionContext","state","setValue","useEffect","globalValue","global","lesson","isNumber","handleChange","useCallback","event","valid","target","validity","newValue","parseFloat","isnan","setState","finishChange","splitted","split","isNull","createTooltip","inline","input","padding","htmlFor","current","numbersOnly","width","paddingLeft","marginLeft","inputStyle","onKeyPress","onKeyDown","onKeyUp","autoComplete","description","show","marginBottom","marginTop","isString","tooltipPlacement","arr","isArr","isArrayLike","TypeError","len","out","Array","Error"],"sourceRoot":""}