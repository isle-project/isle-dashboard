{"version":3,"file":"static/js/ColorPicker.ababb996.chunk.js","mappings":"oOASMA,GAAeC,EAAAA,EAAAA,IAAU,kBAAM,gFAC/BC,GAAgBD,EAAAA,EAAAA,IAAU,kBAAM,+EAChCE,GAAiBF,EAAAA,EAAAA,IAAU,kBAAM,gFACjCG,GAAcH,EAAAA,EAAAA,IAAU,kBAAM,gFAM9BI,EAAoB,SAAEC,GAC3B,OAA0BC,EAAAA,EAAAA,WAAU,GAApC,eAAQC,EAAR,KAAcC,EAAd,KACMC,GAASC,EAAAA,EAAAA,QAAQ,MACjBC,GAAcC,EAAAA,EAAAA,cAAa,WAChCJ,GAAUD,KACR,CAAEA,IACL,OACC,gBAAC,EAAAM,SAAD,KACC,gBAAC,IAAD,CAAQC,IAAKL,EAAQM,KAAK,KAAKC,MAAO,CACrCC,gBAAiBZ,EAAMa,MAAOC,MAAO,GAAIC,OAAQ,IAC/CC,QAASV,IAEZ,gBAAC,IAAD,CAASF,OAAQA,EAAOa,QAASf,KAAMA,EAAMgB,UAAU,cACtD,gBAAC,IAAD,CAASC,GAAE,UAAKnB,EAAMoB,QAAX,YAA8BT,MAAO,CAAEU,OAAQ,OACzD,gBAAC,IAAD,KACC,gBAAC3B,EAAiBM,QAwBlBsB,EAAc,SAAEtB,GACrB,IAAIuB,EACJ,OAASvB,EAAMoB,SACd,IAAK,QACJG,EAAc,gBAACzB,EAAgBE,GAC/B,MACD,IAAK,UACJuB,EAAc,gBAAC3B,EAAkBI,GACjC,MACD,IAAK,WACJuB,EAAc,gBAAC1B,EAAmBG,GAClC,MACD,IAAK,SACJuB,EAAc,gBAACxB,EAAsBC,GACrC,MAED,IAAK,SACL,QACCuB,EAAc,gBAAC7B,EAAiBM,GAGlC,OACC,uBAAKwB,UAAWxB,EAAMwB,UAAWb,OAAK,QAAIG,MAAO,cAAeW,OAAQ,UAAazB,EAAMW,QACzFY,IAyBJD,EAAYI,aAAe,CAC1BN,QAAS,SACTP,MAAO,OACPc,cAAc,EACdC,aAAc,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC1Kd,MAAO,IACPU,UAAW,GACXb,MAAO,GACPkB,SAR0B,aAS1BC,iBAT0B,cAe3B,WAAeC,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,MAAMV","sources":["../node_modules/@isle-project/components/color-picker/main.js"],"sourcesContent":["// MODULES //\n\nimport React, { Fragment, memo, useCallback, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport Loadable from '@isle-project/components/internal/loadable';\nconst SketchPicker = Loadable( () => import( 'react-color/lib/components/sketch/Sketch' ) );\nconst CompactPicker = Loadable( () => import( 'react-color/lib/components/compact/Compact' ) );\nconst MaterialPicker = Loadable( () => import( 'react-color/lib/components/material/Material' ) );\nconst BlockPicker = Loadable( () => import( 'react-color/lib/components/block/Block' ) );\nimport { withPropCheck } from '@isle-project/utils/prop-check';\n\n\n// FUNCTIONS //\n\nconst ButtonColorPicker = ( props ) => {\n\tconst [ show, setShow ] = useState( false );\n\tconst target = useRef( null );\n\tconst handleClick = useCallback( () => {\n\t\tsetShow( !show );\n\t}, [ show ] );\n\treturn (\n\t\t<Fragment>\n\t\t\t<Button ref={target} size=\"sm\" style={{\n\t\t\t\tbackgroundColor: props.color, width: 38, height: 38\n\t\t\t}} onClick={handleClick} >\n\t\t\t</Button>\n\t\t\t<Overlay target={target.current} show={show} placement=\"bottom-end\" >\n\t\t\t\t<Popover id={`${props.variant}-popover`} style={{ zIndex: 1051 }}>\n\t\t\t\t\t<PopoverContent>\n\t\t\t\t\t\t<SketchPicker {...props} />\n\t\t\t\t\t</PopoverContent>\n\t\t\t\t</Popover>\n\t\t\t</Overlay>\n\t\t</Fragment>\n\t);\n};\n\n\n// MAIN //\n\n/**\n* A wrapper for the [react-color](https://casesandberg.github.io/react-color/) color picker.\n*\n* @property {string} variant - color picker variant (either `Compact`, `Sketch`, `Material`, or `Block`)\n* @property {(string|Object)} color - `string` holding an HeX code or an `object` holding RGB or HSL values such as `{ r: 255, g: 255, b: 255 }` or `{ h: 0, s: 0, l: .10 }`, which determines the active color. Both accept an `a` property for alpha values other than one\n* @property {boolean} disableAlpha - controls whether to remove alpha slider and options\n* @property {Array<string>} presetColors - HeX `strings` specifying the default colors at the bottom of the colorpicker\n* @property {number} width - width of the color picker (in px)\n* @property {string} className - class name\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback invoked every time color is changed\n* @property {Function} onChangeComplete - callback invoked once a color change is complete\n*/\nconst ColorPicker = ( props ) => {\n\tlet colorPicker;\n\tswitch ( props.variant ) {\n\t\tcase 'Block':\n\t\t\tcolorPicker = <BlockPicker {...props} />;\n\t\t\tbreak;\n\t\tcase 'Compact':\n\t\t\tcolorPicker = <CompactPicker {...props} />;\n\t\t\tbreak;\n\t\tcase 'Material':\n\t\t\tcolorPicker = <MaterialPicker {...props} />;\n\t\t\tbreak;\n\t\tcase 'Button': {\n\t\t\tcolorPicker = <ButtonColorPicker {...props} />;\n\t\t\tbreak;\n\t\t}\n\t\tcase 'Sketch':\n\t\tdefault:\n\t\t\tcolorPicker = <SketchPicker {...props} />;\n\t\t\tbreak;\n\t}\n\treturn (\n\t\t<div className={props.className} style={{ width: 'fit-content', margin: '0 auto', ...props.style }}>\n\t\t\t{colorPicker}\n\t\t</div>\n\t);\n};\n\n\n// PROPERTIES //\n\nColorPicker.propTypes = {\n\tvariant: PropTypes.oneOf([\n\t\t'Sketch', 'Material', 'Block', 'Compact', 'Button'\n\t]),\n\tcolor: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.object\n\t]),\n\tdisableAlpha: PropTypes.bool,\n\tpresetColors: PropTypes.arrayOf( PropTypes.string ),\n\twidth: PropTypes.number,\n\tclassName: PropTypes.string,\n\tstyle: PropTypes.object,\n\tonChange: PropTypes.func,\n\tonChangeComplete: PropTypes.func\n};\n\nColorPicker.defaultProps = {\n\tvariant: 'Sketch',\n\tcolor: '#fff',\n\tdisableAlpha: false,\n\tpresetColors: [ '#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF' ],\n\twidth: 200,\n\tclassName: '',\n\tstyle: {},\n\tonChange() {},\n\tonChangeComplete() {}\n};\n\n\n// EXPORTS //\n\nexport default withPropCheck( memo( ColorPicker ) );\n"],"names":["SketchPicker","Loadable","CompactPicker","MaterialPicker","BlockPicker","ButtonColorPicker","props","useState","show","setShow","target","useRef","handleClick","useCallback","Fragment","ref","size","style","backgroundColor","color","width","height","onClick","current","placement","id","variant","zIndex","ColorPicker","colorPicker","className","margin","defaultProps","disableAlpha","presetColors","onChange","onChangeComplete","withPropCheck","memo"],"sourceRoot":""}