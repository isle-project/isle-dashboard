{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/intervalplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js"],"names":["input"],"mappings":"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","file":"static/js/IntervalplotMenu.d5ade2fd.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport NumberInput from '@isle-project/components/input/number';\nimport SelectInput from '@isle-project/components/input/select';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport IntervalPlot from '@isle-project/components/plots/interval-plot';\nimport { DATA_EXPLORER_SHARE_INTERVALPLOT, DATA_EXPLORER_INTERVALPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst IntervalPlotMenu = ({ data, variables, groupingVariables, t, session, logAction, onCreated }) => {\n\tconst [ selectedVariable, setSelectedVariable ] = useState( null );\n\tconst [ group, setGroup ] = useState( null );\n\tconst [ orientation, setOrientation ] = useState( 'vertical' );\n\tconst [ significanceLevel, setSignificanceLevel ] = useState( 0.05 );\n\n\tconst generateIntervalPlot = () => {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tvariable: selectedVariable,\n\t\t\tgroup: group,\n\t\t\tplotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_INTERVALPLOT, action );\n\t\t};\n\t\tconst output = <IntervalPlot id={plotId} onShare={onShare} action={action}\n\t\t\tdata={data} variable={selectedVariable} group={group}\n\t\t\torientation={orientation} significanceLevel={significanceLevel}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_INTERVALPLOT, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Interval Plot')}\n\t\t\t\t<QuestionButton title={t('Interval Plot')} content={t('Interval Plot-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body className=\"d-grid gap-3\" >\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('variable')}\n\t\t\t\t\tdefaultValue={selectedVariable}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={setSelectedVariable}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('group-by')}\n\t\t\t\t\tdefaultValue={group}\n\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\tonChange={setGroup}\n\t\t\t\t\tclearable\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('orientation')}\n\t\t\t\t\toptions={[ 'vertical', 'horizontal' ]}\n\t\t\t\t\tdefaultValue=\"vertical\"\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\tonChange={setOrientation}\n\t\t\t\t/>\n\t\t\t\t<NumberInput\n\t\t\t\t\tlegend={t('significance-level')}\n\t\t\t\t\tdefaultValue={0.05}\n\t\t\t\t\tonChange={setSignificanceLevel}\n\t\t\t\t\tmin={0.0}\n\t\t\t\t\tmax={1.0}\n\t\t\t\t\tstep=\"any\"\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"primary\" onClick={generateIntervalPlot}\n\t\t\t\t\tdisabled={!selectedVariable || !group}\n\t\t\t\t>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nIntervalPlotMenu.defaultProps = {\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {}\n};\n\nIntervalPlotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default IntervalPlotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverHeader from 'react-bootstrap/PopoverHeader';\nimport PopoverBody from 'react-bootstrap/PopoverBody';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverHeader>{props.title}</PopoverHeader>\n\t\t<PopoverBody>{props.content}</PopoverBody>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\taria-label={props.title}\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\n\n// PROPERTIES //\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\n/**\n * Creates a tooltip for a number input.\n *\n * @param {Object} options - function options\n * @param {number} options.min - minimum value\n * @param {number} options.max - maximum value\n * @param {number} options.step - step size\n * @param {Function} options.t - translation function\n * @returns {string} tooltip\n */\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n"],"sourceRoot":""}