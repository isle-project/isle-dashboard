{"version":3,"file":"static/js/DecisionTree.9832575a.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/models/decision-tree/main.js"],"sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport isArray from '@stdlib/assert/is-array';\nimport Tooltip from '@isle-project/components/tooltip';\nimport { RegressionTree, ClassificationTree, TreePlot } from './tree.js';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\n\n\n// FUNCTIONS //\n\nconst fitModel = ({ x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount }) => {\n\tlet predictors;\n\tif ( isArray( x ) ) {\n\t\tpredictors = x;\n\t} else {\n\t\tpredictors = [ x ];\n\t}\n\ttry {\n\t\tlet tree;\n\t\tif ( type === 'Classification' ) {\n\t\t\ttree = new ClassificationTree({\n\t\t\t\tresponse: y,\n\t\t\t\tpredictors,\n\t\t\t\tdata: data,\n\t\t\t\tquantitative: quantitative,\n\t\t\t\tcriterion: impurityMeasure,\n\t\t\t\tscoreThreshold: scoreThreshold,\n\t\t\t\tmaxTreeDepth: maxTreeDepth,\n\t\t\t\tminItemsCount: minItemsCount\n\t\t\t});\n\t\t} else {\n\t\t\ttree = new RegressionTree({\n\t\t\t\tresponse: y,\n\t\t\t\tpredictors,\n\t\t\t\tdata: data,\n\t\t\t\tquantitative: quantitative,\n\t\t\t\tscoreThreshold: scoreThreshold,\n\t\t\t\tmaxTreeDepth: maxTreeDepth,\n\t\t\t\tminItemsCount: minItemsCount\n\t\t\t});\n\t\t}\n\t\treturn tree;\n\t} catch ( _ ) {\n\t\treturn null;\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Regression and classification trees.\n*\n* @property {Object} data - object of value arrays\n* @property {string} type - `Classification` for categorical or `Regression` for quantitative outcomes\n* @property {Array<string>} quantitative - array of variables in `data` that are `quantitative`\n* @property {string} y - outcome variable\n* @property {Array<string>} x - one or more predictor variables\n* @property {string} impurityMeasure - impurity measure (`gini` or `entropy`)\n* @property {number} scoreThreshold - score threshold for split\n* @property {number} maxTreeDepth - maximum tree depth\n* @property {number} minItemsCount - minimum # of observations in leaf nodes\n* @property {Function} onPredict - callback invoked with model object when clicking on the predict button\n*/\nclass DecisionTree extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tCOUNTER += 1;\n\n\t\tconst { x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount } = this.props;\n\t\tthis.state = {\n\t\t\ttree: fitModel({ x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.type !== prevState.type ||\n\t\t\tnextProps.impurityMeasure !== prevState.impurityMeasure ||\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.scoreThreshold !== prevState.scoreThreshold ||\n\t\t\tnextProps.maxTreeDepth !== prevState.maxTreeDepth ||\n\t\t\tnextProps.minItemsCount !== prevState.minItemsCount\n\t\t) {\n\t\t\tconst { x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount } = nextProps;\n\t\t\treturn {\n\t\t\t\ttree: fitModel({ x, y, data, type, quantitative, impurityMeasure, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\thandlePredict = () => {\n\t\tthis.props.onPredict( this.state.tree, COUNTER );\n\t}\n\n\trender() {\n\t\tconst { tree } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !tree ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('decision-tree-for', { y: this.props.y, counter: COUNTER })}</span>\n\t\t\t\t<TreePlot tree={tree.root} />\n\t\t\t\t{this.props.onPredict ? <Tooltip tooltip={t('predictions-attached')} >\n\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" style={{ marginTop: 10 }} onClick={this.handlePredict}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t</Tooltip> : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nDecisionTree.defaultProps = {\n\timpurityMeasure: 'gini',\n\tscoreThreshold: 0.0075,\n\tmaxTreeDepth: 5,\n\tminItemsCount: 50,\n\tonPredict: null\n};\n\nDecisionTree.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\ttype: PropTypes.oneOf([ 'Classification', 'Regression' ]).isRequired,\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\timpurityMeasure: PropTypes.oneOf([ 'gini', 'entropy' ]),\n\tscoreThreshold: PropTypes.number,\n\tmaxTreeDepth: PropTypes.number,\n\tminItemsCount: PropTypes.number,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( 'models' )( withPropCheck( DecisionTree ) );\n"],"names":["COUNTER","fitModel","x","y","data","type","quantitative","impurityMeasure","scoreThreshold","maxTreeDepth","minItemsCount","predictors","isArray","tree","ClassificationTree","response","criterion","RegressionTree","_","DecisionTree","Component","constructor","props","super","this","onPredict","state","nextProps","prevState","render","t","style","overflowX","width","className","counter","root","tooltip","variant","size","marginTop","onClick","handlePredict","defaultProps","propTypes","PropTypes","Factor","isRequired","withTranslation","withPropCheck"],"sourceRoot":""}