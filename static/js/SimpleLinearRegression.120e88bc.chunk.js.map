{"version":3,"file":"static/js/SimpleLinearRegression.120e88bc.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/models/simple-linear-regression/main.js","../node_modules/@stdlib/stats/incr/sumabs2/lib/index.js","../node_modules/@stdlib/stats/incr/sumabs2/lib/main.js"],"sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Table from '@isle-project/components/table';\nimport Tooltip from '@isle-project/components/tooltip';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isUndefinedOrNull from '@stdlib/assert/is-undefined-or-null';\nimport isnan from '@stdlib/assert/is-nan';\nimport objectValues from '@stdlib/utils/values';\nimport mapValues from '@stdlib/utils/map-values';\nimport incrsumabs2 from '@stdlib/stats/incr/sumabs2';\nimport tCDF from '@stdlib/stats/base/dists/t/cdf';\nimport abs from '@stdlib/math/base/special/abs';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport mean from '@isle-project/utils/statistic/mean';\nimport Plotly from '@isle-project/components/plotly';\nimport { generateQQPlotConfig } from '@isle-project/components/plots/qqplot';\nimport by2 from '@isle-project/utils/by2';\nimport by from '@isle-project/utils/by';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\nconst T = 't';\n\n\n// FUNCTIONS //\n\nfunction calculateCoefficients( x, y ) {\n\tconst xmu = mean( x );\n\tconst ymu = mean( y );\n\tlet C1 = 0;\n\tlet C2 = 0;\n\tconst len = x.length;\n\tfor ( let i = 0; i < len; i++ ) {\n\t\tlet xdelta = x[ i ] - xmu;\n\t\tlet ydelta = y[ i ] - ymu;\n\t\tC1 += xdelta * xdelta;\n\t\tC2 += xdelta * ydelta;\n\t}\n\tconst slope = C2 / C1;\n\tconst yint = ymu - slope*xmu;\n\treturn { yint, slope, xg: x, yg: y };\n}\n\nfunction isMissing( x ) {\n\treturn isnan( x ) || isUndefinedOrNull( x );\n}\n\nfunction isNonMissingNumber( x ) {\n\treturn isNumber( x ) && !isnan( x );\n}\n\nfunction extractValues({ x, y, data, group, omitMissing }) {\n\tconst xd = data[ x ];\n\tconst yd = data[ y ];\n\tconst groups = data[ group ];\n\tif ( omitMissing ) {\n\t\tconst xvals = [];\n\t\tconst yvals = [];\n\t\tconst groupvals = [];\n\t\tif ( groups ) {\n\t\t\tfor ( let i = 0; i < xd.length; i++ ) {\n\t\t\t\tif (\n\t\t\t\t\t!isMissing( groups[ i ] ) &&\n\t\t\t\t\tisNonMissingNumber( xd[ i ] ) &&\n\t\t\t\t\tisNonMissingNumber( yd[ i ] )\n\t\t\t\t) {\n\t\t\t\t\txvals.push( xd[ i ] );\n\t\t\t\t\tyvals.push( yd[ i ] );\n\t\t\t\t\tgroupvals.push( groups[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( let i = 0; i < xd.length; i++ ) {\n\t\t\t\tif (\n\t\t\t\t\tisNonMissingNumber( xd[ i ] ) &&\n\t\t\t\t\tisNonMissingNumber( yd[ i ] )\n\t\t\t\t) {\n\t\t\t\t\txvals.push( xd[ i ] );\n\t\t\t\t\tyvals.push( yd[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\txd: xvals,\n\t\t\tyd: yvals,\n\t\t\tgroups: groupvals\n\t\t};\n\t}\n\treturn {\n\t\txd: xd,\n\t\tyd: yd,\n\t\tgroups: groups\n\t};\n}\n\n\n// MAIN //\n\n/**\n* Simple linear regression.\n*\n* @property {Object} data - object of value arrays\n* @property {string} x - explanatory variable\n* @property {string} y - response variable\n* @property {(string|Factor)} group - grouping variable\n* @property {boolean} omitMissing - controls whether to omit missing values in model fitting\n* @property {Function} onDiagnostics - callback invoked with diagnostic plots\n* @property {Function} onPredict - callback invoked with fitted values and residuals\n*/\nclass SimpleLinearRegression extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tCOUNTER += 1;\n\t\tconst { x, y, data, group, omitMissing } = props;\n\t\tthis.state = extractValues({ x, y, data, group, omitMissing });\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.group !== prevState.group ||\n\t\t\tnextProps.omitMissing !== prevState.omitMissing\n\t\t) {\n\t\t\tconst { x, y, intercept, omitMissing, data, group } = nextProps;\n\t\t\treturn extractValues({ x, y, intercept, omitMissing, data, group } );\n\t\t}\n\t\treturn null;\n\t}\n\n\trender() {\n\t\tconst { xd, yd, groups } = this.state;\n\t\tconst { x, y, group, data, t } = this.props;\n\t\tlet output;\n\t\ttry {\n\t\t\tif ( group ) {\n\t\t\t\tconst xmeans = by( xd, groups, mean );\n\t\t\t\tconst res = by2( xd, yd, groups, calculateCoefficients );\n\t\t\t\toutput = <div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t\t<label>{t('regression-y-on-x', { x, y })}</label>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<i>{t('grouped-by')} {group}:</i>\n\t\t\t\t\t</p>\n\t\t\t\t\t{objectValues( mapValues( res, ( elem, key ) => {\n\t\t\t\t\t\tconst { yint, slope, xg, yg } = elem;\n\t\t\t\t\t\tconst resAcc = incrsumabs2();\n\t\t\t\t\t\tconst x2Acc = incrsumabs2();\n\t\t\t\t\t\tconst x2mmAcc = incrsumabs2();\n\t\t\t\t\t\tconst cdf = tCDF.factory( yg.length - 2 );\n\t\t\t\t\t\tfor ( let i = 0; i < yg.length; i++ ) {\n\t\t\t\t\t\t\tconst pred = yint + slope * xg[ i ];\n\t\t\t\t\t\t\tresAcc( pred - yg[ i ] );\n\t\t\t\t\t\t\tx2Acc( xg[ i ] );\n\t\t\t\t\t\t\tx2mmAcc( xg[ i ] - xmeans[ key ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst sigma2 = resAcc() / ( yg.length - 2 );\n\t\t\t\t\t\tconst slopeVar = sigma2 / x2mmAcc();\n\t\t\t\t\t\tconst slopeSE = sqrt( slopeVar );\n\t\t\t\t\t\tconst interceptVar = ( (1/yg.length) * sigma2 * x2Acc() ) / x2mmAcc();\n\t\t\t\t\t\tconst interceptSE = sqrt( interceptVar );\n\t\t\t\t\t\tconst tSlope = slope / slopeSE;\n\t\t\t\t\t\tconst tIntercept = yint / interceptSE;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={`group-${key}`} >\n\t\t\t\t\t\t\t\t<label>{key}:</label>\n\t\t\t\t\t\t\t\t<Table bordered size=\"sm\" >\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('variable')}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('coefficient')}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('std-error')}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{T}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('p-value')}</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{t('intercept')}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{yint.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{interceptSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{tIntercept.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tIntercept ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{x}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{slope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{slopeSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{tSlope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tSlope ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}) )}\n\t\t\t\t\t{ this.props.onPredict ? <Tooltip tooltip={t('use-model-to-predict-tooltip')} >\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={() => {\n\t\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\t\tconst yhat = new Float64Array( yd.length );\n\t\t\t\t\t\t\tconst resid = new Float64Array( yd.length );\n\t\t\t\t\t\t\tconst groups = data[ group ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < yhat.length; i++ ) {\n\t\t\t\t\t\t\t\tconst [ yint, slope ] = res[ groups[ i ] ];\n\t\t\t\t\t\t\t\tyhat[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\t\tresid[ i ] = yd[ i ] - yhat[ i ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.props.onPredict( yhat, resid, COUNTER );\n\t\t\t\t\t\t}}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t\t</Tooltip> : null }\n\t\t\t\t\t{ this.props.onDiagnostics ? <Button variant=\"secondary\" size=\"sm\" style={{ marginLeft: 6 }} onClick={() => {\n\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\tconst yhat = new Float64Array( yd.length );\n\t\t\t\t\t\tconst resid = new Float64Array( yd.length );\n\t\t\t\t\t\tconst groups = data[ group ];\n\t\t\t\t\t\tfor ( let i = 0; i < yhat.length; i++ ) {\n\t\t\t\t\t\t\tconst [ yint, slope ] = res[ groups[ i ] ];\n\t\t\t\t\t\t\tyhat[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\tresid[ i ] = yd[ i ] - yhat[ i ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst qqPlot = {\n\t\t\t\t\t\t\tvariable: t('qq-plot-of-residuals'),\n\t\t\t\t\t\t\ttype: 'Chart',\n\t\t\t\t\t\t\tvalue: <Plotly\n\t\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\t\teditable fit\n\t\t\t\t\t\t\t\t{...generateQQPlotConfig( resid, 'residuals' )}\n\t\t\t\t\t\t\t\tmeta={{ type: 'qqplot of regression residuals', x: xd, y: yd }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst residualPlot = {\n\t\t\t\t\t\t\tvariable: t('residuals-vs-fitted'),\n\t\t\t\t\t\t\ttype: 'Chart',\n\t\t\t\t\t\t\tvalue: <Plotly\n\t\t\t\t\t\t\t\tdraggable editable fit\n\t\t\t\t\t\t\t\tdata={[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tx: yhat,\n\t\t\t\t\t\t\t\t\t\ty: resid,\n\t\t\t\t\t\t\t\t\t\tmode: 'markers'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\tlayout={{\n\t\t\t\t\t\t\t\t\txaxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: t('fitted-values')\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tyaxis: {\n\t\t\t\t\t\t\t\t\t\ttitle: t('residuals')\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttitle: t('residuals-vs-fitted')\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tmeta={{ type: 'regression residuals vs. fitted', x: xd, y: yd }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.props.onDiagnostics([ qqPlot, residualPlot ]);\n\t\t\t\t\t}} >\n\t\t\t\t\t\t{t('model-diagnostics')}\n\t\t\t\t\t</Button> : null }\n\t\t\t\t</div>;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst { yint, slope } = calculateCoefficients( xd, yd );\n\t\t\t\tconst resAcc = incrsumabs2();\n\t\t\t\tconst x2Acc = incrsumabs2();\n\t\t\t\tconst x2mmAcc = incrsumabs2();\n\t\t\t\tconst xmean = mean( xd );\n\t\t\t\tconst cdf = tCDF.factory( yd.length - 2 );\n\t\t\t\tfor ( let i = 0; i < yd.length; i++ ) {\n\t\t\t\t\tconst pred = yint + slope * xd[ i ];\n\t\t\t\t\tresAcc( pred - yd[ i ] );\n\t\t\t\t\tx2Acc( xd[ i ] );\n\t\t\t\t\tx2mmAcc( xd[ i ] - xmean );\n\t\t\t\t}\n\t\t\t\tconst sigma2 = resAcc() / ( yd.length - 2 );\n\t\t\t\tconst slopeVar = sigma2 / x2mmAcc();\n\t\t\t\tconst slopeSE = sqrt( slopeVar );\n\t\t\t\tconst interceptVar = ( (1/yd.length) * sigma2 * x2Acc() ) / x2mmAcc();\n\t\t\t\tconst interceptSE = sqrt( interceptVar );\n\t\t\t\tconst tSlope = slope / slopeSE;\n\t\t\t\tconst tIntercept = yint / interceptSE;\n\t\t\t\toutput = <div style={{ overflowX: 'auto', width: '100%' }} >\n\t\t\t\t\t<label>{t('simple-regression-title', { x, y, counter: COUNTER })}</label>\n\t\t\t\t\t<Table bordered size=\"sm\" >\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>{t('variable')}</th>\n\t\t\t\t\t\t\t\t<th>{t('coefficient')}</th>\n\t\t\t\t\t\t\t\t<th>{t('std-error')}</th>\n\t\t\t\t\t\t\t\t<th>{T}</th>\n\t\t\t\t\t\t\t\t<th>{t('p-value')}</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{t('intercept')}</td>\n\t\t\t\t\t\t\t\t<td>{yint.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{interceptSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{tIntercept.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tIntercept ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{x}</td>\n\t\t\t\t\t\t\t\t<td>{slope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{slopeSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{tSlope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tSlope ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</Table>\n\t\t\t\t\t{ this.props.onPredict ? <Tooltip tooltip={t('use-model-to-predict-tooltip')} >\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={() => {\n\t\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\t\tconst yhat = new Array( yd.length );\n\t\t\t\t\t\t\tconst resid = new Array( yd.length );\n\t\t\t\t\t\t\tfor ( let i = 0; i < yhat.length; i++ ) {\n\t\t\t\t\t\t\t\tyhat[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\t\tresid[ i ] = yd[ i ] - yhat[ i ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.props.onPredict( yhat, resid, COUNTER );\n\t\t\t\t\t\t}}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t\t</Tooltip> : null }\n\t\t\t\t\t{ this.props.onDiagnostics ? <Button variant=\"secondary\" size=\"sm\" style={{ marginLeft: 6 }} onClick={() => {\n\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\tconst yhat = new Array( yd.length );\n\t\t\t\t\t\tconst resid = new Array( yd.length );\n\t\t\t\t\t\tfor ( let i = 0; i < yhat.length; i++ ) {\n\t\t\t\t\t\t\tyhat[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\tresid[ i ] = yd[ i ] - yhat[ i ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst qqPlot = <Plotly\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\teditable fit\n\t\t\t\t\t\t\t{...generateQQPlotConfig( resid, 'residuals' )}\n\t\t\t\t\t\t\tmeta={{ type: 'qqplot of regression residuals', x: xd, y: yd }}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tconst residualPlot = <Plotly\n\t\t\t\t\t\t\tdraggable editable fit\n\t\t\t\t\t\t\tdata={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx: yhat,\n\t\t\t\t\t\t\t\t\ty: resid,\n\t\t\t\t\t\t\t\t\tmode: 'markers',\n\t\t\t\t\t\t\t\t\ttype: yhat.length > 2000 ? 'scattergl' : 'scatter'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tlayout={{\n\t\t\t\t\t\t\t\txaxis: {\n\t\t\t\t\t\t\t\t\ttitle: t('fitted-values')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tyaxis: {\n\t\t\t\t\t\t\t\t\ttitle: t('residuals')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttitle: t('residuals-vs-fitted')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tmeta={{ type: 'regression residuals vs. fitted', x: xd, y: yd }}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tthis.props.onDiagnostics([ qqPlot, residualPlot ]);\n\t\t\t\t\t}} >\n\t\t\t\t\t\t{t('model-diagnostics')}\n\t\t\t\t\t</Button> : null }\n\t\t\t\t</div>;\n\t\t\t}\n\t\t\treturn output;\n\t\t} catch ( _ ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t}\n}\n\n\n// PROPERTIES //\n\nSimpleLinearRegression.defaultProps = {\n\tgroup: null,\n\tomitMissing: false,\n\tonDiagnostics: null,\n\tonPredict: null\n};\n\nSimpleLinearRegression.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tx: PropTypes.string.isRequired,\n\ty: PropTypes.string.isRequired,\n\tgroup: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]),\n\tomitMissing: PropTypes.bool,\n\tonDiagnostics: PropTypes.func,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( [ 'models', 'plotly' ] )( withPropCheck( SimpleLinearRegression ) );\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Compute a sum of squared absolute values incrementally.\n*\n* @module @stdlib/stats/incr/sumabs2\n*\n* @example\n* var incrsumabs2 = require( '@stdlib/stats/incr/sumabs2' );\n*\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\n// MODULES //\n\nvar incrsumabs2 = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = incrsumabs2;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\n\nfunction incrsumabs2() {\n  var sum = 0.0;\n  var FLG;\n  return accumulator;\n  /**\n  * If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n  *\n  * @private\n  * @param {number} [x] - new value\n  * @returns {(number|null)} sum or null\n  */\n\n  function accumulator(x) {\n    if (arguments.length === 0) {\n      return FLG ? sum : null;\n    }\n\n    FLG = true;\n    sum += x * x;\n    return sum;\n  }\n} // EXPORTS //\n\n\nmodule.exports = incrsumabs2;"],"names":["COUNTER","calculateCoefficients","x","y","xmu","mean","ymu","C1","C2","len","length","i","xdelta","slope","yint","xg","yg","isMissing","isnan","isUndefinedOrNull","isNonMissingNumber","isNumber","extractValues","data","group","omitMissing","xd","yd","groups","xvals","yvals","groupvals","push","SimpleLinearRegression","Component","constructor","props","super","this","state","nextProps","prevState","intercept","render","t","output","xmeans","by","res","by2","style","overflowX","width","objectValues","mapValues","elem","key","resAcc","incrsumabs2","x2Acc","x2mmAcc","cdf","tCDF","sigma2","slopeVar","slopeSE","sqrt","interceptVar","interceptSE","tSlope","tIntercept","bordered","size","toFixed","abs","onPredict","tooltip","variant","onClick","yhat","Float64Array","resid","onDiagnostics","marginLeft","qqPlot","variable","type","value","draggable","editable","fit","generateQQPlotConfig","meta","residualPlot","mode","layout","xaxis","title","yaxis","xmean","counter","Array","_","defaultProps","propTypes","PropTypes","Factor","withTranslation","withPropCheck","module","exports","FLG","sum","arguments"],"sourceRoot":""}