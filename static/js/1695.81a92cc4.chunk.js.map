{"version":3,"file":"static/js/1695.81a92cc4.chunk.js","mappings":"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","sources":["../node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/mathOperations.js"],"sourcesContent":["const toString = Object.prototype.toString;\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}","import isArray from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;","import isArray from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };","const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const {\n    rows,\n    columns\n  } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n\n    result.push(`${line.join(' ')}`);\n  }\n\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n\n  const precise = num.toPrecision(maxNumSize - 2);\n\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\n\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\n\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n\n  if (vector.length !== matrix.columns) {\n    throw new RangeError('vector size must be the same as the number of columns');\n  }\n\n  return vector;\n}\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\n\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n\n  return vector;\n}\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices)\n  };\n}\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some(r => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n  return rowIndices;\n}\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some(c => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n  return columnIndices;\n}\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n\n  if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\nexport function newArray(length, value = 0) {\n  let array = [];\n\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nexport function checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}","import rescale from 'ml-array-rescale';\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport { sumByRow, sumByColumn, sumAll, productByRow, productByColumn, productAll, varianceByRow, varianceByColumn, varianceAll, centerByRow, centerByColumn, centerAll, scaleByRow, scaleByColumn, scaleAll, getScaleByRow, getScaleByColumn, getScaleAll } from './stat';\nimport { checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector, checkRange, checkIndices, checkNonEmpty } from './util';\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n\n    let newMatrix = new Matrix(newRows, newColumns);\n\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      random = Math.random\n    } = options;\n    let matrix = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1000,\n      random = Math.random\n    } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n\n      i++;\n    }\n\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n\n      i++;\n    }\n\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n\n        h++;\n        k++;\n      }\n    }\n\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n\n        h--;\n      }\n    }\n\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      rows = 1,\n      columns = 1\n    } = options;\n\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n\n    return this;\n  }\n\n  max() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(0, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n\n    return v;\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  min() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(0, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n\n    return v;\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(row, 0);\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(row, 0);\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(0, column);\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(0, column);\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n\n    let dot = 0;\n\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n    let result = new Matrix(m, p);\n    let Bcolj = new Float64Array(n);\n\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1); // Compute intermediate values.\n\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22); // Combine intermediate values into the output.\n\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n    } // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n\n\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    } // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c); // Our recursive multiplication function.\n\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      } // Apply dynamic padding.\n\n\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10); // Subdivide input matrices.\n\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1); // Compute intermediate values.\n\n      let m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);\n      let m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols); // Combine intermediate values into the output.\n\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6); // Crop output to the desired size (undo dynamic padding).\n\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n\n      if (row.length > 0) {\n        rescale(row, {\n          min,\n          max,\n          output: row\n        });\n      }\n\n      newMatrix.setRow(i, row);\n    }\n\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column\n        });\n      }\n\n      newMatrix.setColumn(i, column);\n    }\n\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n    let result = new Matrix(m * p, n * q);\n\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n\n    if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n\n    if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (matrix.isEmpty()) {\n      return this;\n    }\n\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n\n      case 'column':\n        return sumByColumn(this);\n\n      case undefined:\n        return sumAll(this);\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n\n      case 'column':\n        return productByColumn(this);\n\n      case undefined:\n        return productAll(this);\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n\n    switch (by) {\n      case 'row':\n        {\n          for (let i = 0; i < this.rows; i++) {\n            sum[i] /= this.columns;\n          }\n\n          return sum;\n        }\n\n      case 'column':\n        {\n          for (let i = 0; i < this.columns; i++) {\n            sum[i] /= this.rows;\n          }\n\n          return sum;\n        }\n\n      case undefined:\n        return sum / this.size;\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      unbiased = true,\n      mean = this.mean(by)\n    } = options;\n\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n\n    switch (by) {\n      case 'row':\n        {\n          if (!Array.isArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n\n          return varianceByRow(this, unbiased, mean);\n        }\n\n      case 'column':\n        {\n          if (!Array.isArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n\n          return varianceByColumn(this, unbiased, mean);\n        }\n\n      case undefined:\n        {\n          if (typeof mean !== 'number') {\n            throw new TypeError('mean must be a number');\n          }\n\n          return varianceAll(this, unbiased, mean);\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    const variance = this.variance(by, options);\n\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      center = this.mean(by)\n    } = options;\n\n    switch (by) {\n      case 'row':\n        {\n          if (!Array.isArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n\n          centerByRow(this, center);\n          return this;\n        }\n\n      case 'column':\n        {\n          if (!Array.isArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n\n          centerByColumn(this, center);\n          return this;\n        }\n\n      case undefined:\n        {\n          if (typeof center !== 'number') {\n            throw new TypeError('center must be a number');\n          }\n\n          centerAll(this, center);\n          return this;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    let scale = options.scale;\n\n    switch (by) {\n      case 'row':\n        {\n          if (scale === undefined) {\n            scale = getScaleByRow(this);\n          } else if (!Array.isArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n\n          scaleByRow(this, scale);\n          return this;\n        }\n\n      case 'column':\n        {\n          if (scale === undefined) {\n            scale = getScaleByColumn(this);\n          } else if (!Array.isArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n\n          scaleByColumn(this, scale);\n          return this;\n        }\n\n      case undefined:\n        {\n          if (scale === undefined) {\n            scale = getScaleAll(this);\n          } else if (typeof scale !== 'number') {\n            throw new TypeError('scale must be a number');\n          }\n\n          scaleAll(this, scale);\n          return this;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n}\nAbstractMatrix.prototype.klass = 'Matrix';\n\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n} // Synonyms\n\n\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n\n      if (typeof nColumns !== 'number') {\n        throw new TypeError('Data must be a 2D array with at least one element');\n      }\n\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError('First argument must be a positive number or an array');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n\n      this.data[i] = newRow;\n    }\n\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n\n      newRow[j++] = array[i];\n\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n\n      this.data[i] = newRow;\n    }\n\n    this.columns += 1;\n    return this;\n  }\n\n}\ninstallMathOperations(AbstractMatrix, Matrix);","import { newArray } from './util';\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function sumAll(matrix) {\n  let v = 0;\n\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n\n  return v;\n}\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function productAll(matrix) {\n  let v = 1;\n\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n\n  return v;\n}\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / cols) / cols);\n    }\n  }\n\n  return variance;\n}\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / rows) / rows);\n    }\n  }\n\n  return variance;\n}\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n\n  if (unbiased) {\n    return (sum2 - sum1 * sum1 / size) / (size - 1);\n  } else {\n    return (sum2 - sum1 * sum1 / size) / size;\n  }\n}\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\nexport function getScaleByRow(matrix) {\n  const scale = [];\n\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n\n    scale.push(Math.sqrt(sum));\n  }\n\n  return scale;\n}\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n\n    scale.push(Math.sqrt(sum));\n  }\n\n  return scale;\n}\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n\n  return Math.sqrt(sum);\n}\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~this.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n}"],"names":["Object","prototype","toString","isAnyArray","object","call","endsWith","input","options","arguments","length","undefined","TypeError","_options$fromIndex","fromIndex","_options$toIndex","toIndex","Number","isInteger","Error","maxValue","i","minValue","rescale","output","Array","currentMin","currentMax","RangeError","_options$min","min","autoMinMax","_options$max","max","factor","indent","repeat","indentData","inspectMatrixWithOptions","matrix","maxRows","maxColumns","maxNumSize","constructor","name","rows","columns","maxI","Math","maxJ","result","line","j","push","formatNumber","get","join","inspectData","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","slice","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","some","r","isArray","from","checkColumnIndices","columnIndices","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","array","checkNonEmpty","isEmpty","AbstractMatrix","static","newRows","newColumns","newData","newMatrix","Matrix","row","column","set","fill","random","interval","round","this","zeros","data","l","matrix1","matrix2","checkMatrix","isMatrix","klass","size","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","p","pivot","setSubMatrix","neg","mulS","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","NaN","v","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","norm","type","sqrt","cumulativeSum","sum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","y","x","r1","c1","r2","c2","embed","mat","cols","resultat","console","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","q","kroneckerSum","AxI","eye","IxB","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","checkIndices","rowIndex","columnIndex","trace","by","sumByRow","sumByColumn","sumAll","product","productByRow","productByColumn","productAll","mean","variance","unbiased","sum1","sum2","varianceByRow","varianceByColumn","varianceAll","standardDeviation","center","centerByRow","centerByColumn","centerAll","scale","pow","getScaleByRow","scaleByRow","getScaleByColumn","scaleByColumn","divider","getScaleAll","scaleAll","Symbol","for","rand","randomInt","randInt","diagonal","identity","negate","tensorProduct","nRows","nColumns","super","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","addS","addM","subS","subM","subtract","subtractS","subtractM","mul","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","installMathOperations"],"sourceRoot":""}