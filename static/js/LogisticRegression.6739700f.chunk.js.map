{"version":3,"sources":["../node_modules/@stdlib/math/base/special/xlogy/lib/index.js","../node_modules/@stdlib/math/base/special/xlogy/lib/xlogy.js","../node_modules/@stdlib/stats/base/dists/bernoulli/pmf/lib/factory.js","../node_modules/@stdlib/stats/base/dists/bernoulli/pmf/lib/index.js","../node_modules/@stdlib/stats/base/dists/bernoulli/pmf/lib/pmf.js","../node_modules/@isle-project/components/models/logistic-regression/design_matrix_missing.js","../node_modules/@isle-project/components/models/logistic-regression/design_matrix.js","../node_modules/@isle-project/components/models/logistic-regression/multiply_matrices.js","../node_modules/@isle-project/components/models/logistic-regression/col_mult.js","../node_modules/@isle-project/components/models/logistic-regression/multiply.js","../node_modules/@isle-project/components/models/logistic-regression/logistic_regression.js","../node_modules/@isle-project/components/models/logistic-regression/main.js","../node_modules/@isle-project/utils/mmult/index.js","../node_modules/@isle-project/utils/transpose/index.js"],"names":["matrix","sum","X","x","y","quantitative","intercept","success","data"],"mappings":"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","file":"static/js/LogisticRegression.6739700f.chunk.js","sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute `x * ln(y)` so that the result is `0` if `x = 0`.\n*\n* @module @stdlib/math/base/special/xlogy\n*\n* @example\n* var xlogy = require( '@stdlib/math/base/special/xlogy' );\n*\n* var out = xlogy( 3.0, 2.0 );\n* // returns ~2.079\n*\n* out = xlogy( 1.5, 5.9 );\n* // returns ~2.662\n*\n* out = xlogy( 0.9, 1.0 );\n* // returns 0.0\n*\n* out = xlogy( 0.0, -2.0 );\n* // returns 0.0\n*\n* out = xlogy( 1.5, NaN );\n* // returns NaN\n*\n* out = xlogy( 0.0, NaN );\n* // returns NaN\n*\n* out = xlogy( NaN, 2.3 );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar xlogy = require( './xlogy.js' );\n\n\n// EXPORTS //\n\nmodule.exports = xlogy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( './../../../../base/assert/is-nan' );\nvar ln = require( './../../../../base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Computes `x * ln(y)` so that the result is `0` if `x = 0`.\n*\n* @param {number} x - input value\n* @param {number} y - input value\n* @returns {number} function value\n*\n* @example\n* var out = xlogy( 3.0, 2.0 );\n* // returns ~2.079\n*\n* @example\n* var out = xlogy( 1.5, 5.9 );\n* // returns ~2.662\n*\n* @example\n* var out = xlogy( 0.9, 1.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogy( 0.0, -2.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogy( 1.5, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogy( NaN, 2.3 );\n* // returns NaN\n*/\nfunction xlogy( x, y ) {\n\tif ( x === 0.0 && !isnan( y ) ) {\n\t\treturn 0.0;\n\t}\n\treturn x * ln( y );\n}\n\n\n// EXPORTS //\n\nmodule.exports = xlogy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0.8 );\n* var y = pmf( 0.0 );\n* // returns 0.2\n*\n* y = pmf( 1.0 );\n* // returns 0.8\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn 1.0 - p;\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\treturn p;\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bernoulli distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/bernoulli/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/bernoulli/pmf' );\n*\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* y = pmf( 1.0, 0.7 );\n* // returns 0.7\n*\n* y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 0.5 );\n* y = mypmf( 2.0 );\n* // returns 0.0\n*\n* y = mypmf( 1.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a Bernoulli distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 1.0, 0.3 );\n* // returns 0.3\n*\n* @example\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* @example\n* var y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.8, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = pmf( 1.0, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 1.0 - p;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn p;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","// MODULES //\n\nimport contains from '@stdlib/assert/contains';\nimport ndarray from '@stdlib/ndarray/array';\nimport extractCategoriesFromValues from '@isle-project/utils/extract-categories-from-values';\nimport isNonMissingNumber from '@isle-project/utils/is-non-missing-number';\nimport isMissing from '@isle-project/utils/is-missing';\n\n\n// MAIN //\n\n/**\n * Creates a design matrix for a logistic regression model after filtering out missing values.\n *\n * @param {Array} x - names of predictors\n * @param {string} y - name of response variable\n * @param {Object} data - data object\n * @param {Array} quantitative - array of quantitative predictors\n * @param {boolean} intercept - boolean indicating whether to include an intercept\n * @param {*} success - success value\n * @returns {Object} design matrix\n */\nfunction designMatrixMissing( x, y, data, quantitative, intercept, success ) {\n\tconst predictors = [];\n\tconst hash = {};\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tlet buffer = [];\n\tconst yvalues = [];\n\tfor ( let i = 0; i < data[ x[ 0 ] ].length; i++ ) {\n\t\tlet missing = false;\n\t\tconst row = [];\n\t\tif ( intercept ) {\n\t\t\trow.push( 1 );\n\t\t}\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\tif ( isNonMissingNumber( values[ i ] ) ) {\n\t\t\t\t\trow.push( values[ i ] );\n\t\t\t\t} else {\n\t\t\t\t\tmissing = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tif ( isMissing( val ) ) {\n\t\t\t\t\tmissing = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\t\trow.push( ( val === categories[ k ] ) ? 1 : 0 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( !missing ) {\n\t\t\tbuffer = buffer.concat( row );\n\t\t\tyvalues.push( data[ y ][ i ] === success ? 1 : 0 );\n\t\t}\n\t}\n\tconst nobs = yvalues.length;\n\tconst matrix = ndarray( buffer, {\n\t\tshape: [ nobs, predictors.length+1 ]\n\t});\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\n\n// EXPORTS //\n\nexport default designMatrixMissing;\n","// MODULES //\n\nimport contains from '@stdlib/assert/contains';\nimport ndarray from '@stdlib/ndarray/array';\nimport extractCategoriesFromValues from '@isle-project/utils/extract-categories-from-values';\n\n\n// MAIN //\n\n/**\n * Creates a design matrix for a logistic regression model.\n *\n * @param {Array} x - names of predictors\n * @param {string} y - name of response variable\n * @param {Object} data - data object\n * @param {Array} quantitative - array of quantitative predictors\n * @param {boolean} intercept - boolean indicating whether to include an intercept\n * @param {*} success - success value\n * @returns {Object} design matrix\n */\nfunction designMatrix( x, y, data, quantitative, intercept, success ) {\n\tconst predictors = [];\n\tconst hash = {};\n\tconst nobs = data[ x[ 0 ] ].length;\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tconst buffer = new Float64Array( nobs * (predictors.length+1) );\n\tfor ( let i = 0; i < nobs; i++ ) {\n\t\tif ( intercept ) {\n\t\t\tbuffer[ (predictors.length+1)*i ] = 1;\n\t\t}\n\t\tlet colIndex = 0;\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\tcolIndex += 1;\n\t\t\t\tbuffer[ (predictors.length+1)*i + colIndex ] = values[ i ];\n\t\t\t} else {\n\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\tcolIndex += 1;\n\t\t\t\t\tbuffer[ (predictors.length+1)*i + colIndex ] = ( val === categories[ k ] ) ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tconst matrix = ndarray( buffer, {\n\t\tshape: [ nobs, predictors.length+1 ]\n\t});\n\tconst yvalues = data[ y ].map( v => {\n\t\treturn v === success ? 1 : 0;\n\t});\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\n\n// EXPORTS //\n\nexport default designMatrix;\n","// MODULES //\n\nimport { Matrix } from 'ml-matrix';\n\n\n// MAIN //\n\n/**\n* Matrix product of `A` and `B`.\n*\n* @param {Matrix} A - first input matrix\n* @param {Matrix} B - second input matrix\n* @returns {Matrix} A * B\n*/\nfunction multiplyMatrices( A, B ) {\n\tconst [ m, n ] = A.shape;\n\tconst p = B.shape[ 1 ];\n\tconst result = Matrix.zeros( m, p );\n\tconst Bcolj = new Float64Array( n );\n\tfor ( let j = 0; j < p; j++ ) {\n\t\tfor ( let k = 0; k < n; k++ ) {\n\t\t\tBcolj[ k ] = B.get(k, j);\n\t\t}\n\t\tfor ( let i = 0; i < m; i++ ) {\n\t\t\tlet s = 0;\n\t\t\tfor ( let k = 0; k < n; k++ ) {\n\t\t\t\ts += A.get( i, k ) * Bcolj[ k ];\n\t\t\t}\n\t\t\tresult.set( i, j, s );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default multiplyMatrices;\n","// MODULES //\n\nimport ndarray from '@stdlib/ndarray/array';\n\n\n// MAIN //\n\n/**\n* Multiplies each column of matrix `A` with the elements of vector `b`.\n*\n* @param {Matrix} A - input matrix\n* @param {NumberArray} b - input vector\n* @returns {Matrix} `A` with columns multiplied by elements of `b`\n*/\nfunction colMult( A, b ) {\n\tconst [ m, n ] = A.shape;\n\tconst result = ndarray( new Float64Array( m*n ), { 'shape': [ m, n ]} );\n\tfor ( let i = 0; i < m; i++ ) {\n\t\tfor ( let j = 0; j < n; j++ ) {\n\t\t\tresult.set( i, j, A.get( i, j ) * b[ i ] );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default colMult;\n","// MAIN //\n\n/**\n* Computes an element-wise multiplication of two arrays.\n*\n* @param {Array} x - numeric array\n* @param {Array} y - numeric array\n*/\nfunction multiply( x, y ) {\n\tconst len = x.length;\n\tconst out = new Array( len );\n\tfor ( let i = 0; i < len; i++ ) {\n\t\tout[ i ] = x[ i ] * y[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default multiply;\n","// MODULES //\n\nimport { Matrix, solve } from 'ml-matrix';\nimport abs from '@stdlib/math/base/special/abs';\nimport ln from '@stdlib/math/base/special/ln';\nimport pow from '@stdlib/math/base/special/pow';\nimport exp from '@stdlib/math/base/special/exp';\nimport xlogy from '@stdlib/math/base/special/xlogy';\nimport EPS from '@stdlib/constants/float64/eps';\nimport dbern from '@stdlib/stats/base/dists/bernoulli/pmf';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport mmult from '@isle-project/utils/mmult';\nimport transpose from '@isle-project/utils/transpose';\nimport sum from '@isle-project/utils/statistic/sum';\nimport multiplyMatrices from './multiply_matrices.js';\nimport colMult from './col_mult.js';\nimport multiply from './multiply.js';\n\n\n// VARIABLES //\n\nconst MAX_IT = 25;\nconst EPSILON = 1e-8;\n\n\n// FUNCTIONS //\n\nconst variance = ( mu ) => {\n\tconst out = new Float64Array( mu.length );\n\tfor ( let i = 0; i < mu.length; i++ ) {\n\t\tout[ i ] = mu[ i ] * ( 1.0 - mu[ i ] );\n\t}\n\treturn out;\n};\n\nconst logitLink = ( mu ) => {\n\tconst n = mu.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\tout[ i ] = ln( mu[ i ] / ( 1 - mu[ i ] ) );\n\t}\n\treturn out;\n};\n\nconst logitLinkInv = ( eta ) => {\n\tconst n = eta.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\tconst etai = eta[i];\n\t\tif ( abs( etai ) > 30 ) {\n\t\t\tout[ i ] = EPS;\n\t\t} else {\n\t\t\tconst x = exp( etai );\n\t\t\tout[ i ] = x / ( 1 + x );\n\t\t}\n\t}\n\treturn out;\n};\n\nconst logitMuEta = ( eta ) => {\n\tconst n = eta.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++) {\n\t\tconst val = eta[i];\n\t\tif ( abs( val ) > 30 ) {\n\t\t\tout[ i ] = EPS;\n\t\t} else {\n\t\t\tout[ i ] = exp( val ) / pow( 1 + exp( val ), 2 );\n\t\t}\n\t}\n\treturn out;\n};\n\nconst aic = ( y, mu, numParameters ) => {\n\tlet logLik = 0;\n\tfor ( let i = 0; i < y.length; i++ ) {\n\t\tlogLik += ln( dbern( y[ i ], mu[ i ] ) );\n\t}\n\treturn -2 * logLik + 2*numParameters;\n};\n\nconst devResids = ( y, mu, wt ) => {\n\tconst n = y.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\tconst mui = mu[ i ];\n\t\tconst yi = y[ i ];\n\t\tout[ i ] = 2.0 * wt[ i ] *\n\t\t( xlogy( yi, yi / mui ) + xlogy( 1 - yi, ( 1 - yi ) / ( 1 - mui ) ) );\n\t}\n\treturn out;\n};\n\nconst calcW = ( weights, gprime, varg ) => {\n\tconst out = new Float64Array( weights.length );\n\tfor ( let i = 0; i < weights.length; i++ ) {\n\t\tout[ i ] = weights[ i ] * ( gprime[i]*gprime[i] / varg[ i ] );\n\t}\n\treturn out;\n};\n\nconst calcZ = ( eta, y, mu, gprime ) => {\n\tconst out = new Float64Array( y.length );\n\tfor ( let i = 0; i < y.length; i++ ) {\n\t\tout[ i ] = eta[ i ] + ( y[ i ] - mu[ i ] ) / gprime[ i ];\n\t}\n\treturn out;\n};\n\nfunction sigmoid( x ) {\n\tconst result = new Float64Array( x.length );\n\tfor ( let i = 0; i < x.length; i++) {\n\t\tresult[ i ]= 1 / (1 + exp(-x[i]) );\n\t}\n\treturn result;\n}\n\nfunction stdErrors( matrix, yhat ) {\n\tconst w = new Float64Array( yhat.length );\n\tfor ( let i = 0; i < w.length; i++ ) {\n\t\tw[ i ] = yhat[ i ] * ( 1 - yhat[ i ] );\n\t}\n\tconst [ nrow, ncol ] = matrix.shape;\n\tconst errs = new Float64Array( ncol );\n\tfor ( let j = 0; j < errs.length; j++ ) {\n\t\tlet sum = 0;\n\t\tfor ( let i = 0; i < nrow; i++ ) {\n\t\t\tsum += pow( matrix.get( i, j ), 2 ) * w[ i ];\n\t\t}\n\t\terrs[ j ] = sqrt( 1.0 / sum );\n\t}\n\treturn errs;\n}\n\n\n// MAIN //\n\n/**\n* Iteratively re-weighted least squares algorithm.\n*/\nfunction irls( X, y, nObs ) {\n\tconst Xt = transpose( X );\n\tconst weights = new Array( nObs ).fill( 1 );\n\n\tconst mustart = new Float64Array( weights.length );\n\tfor ( let i = 0; i < nObs; i++ ) {\n\t\tmustart[ i ] = ( weights[ i ] * y[ i ] + 0.5 ) / ( weights[ i ] + 1 );\n\t}\n\tlet eta = logitLink( mustart );\n\tlet mu = logitLinkInv( eta );\n\tlet devOld = sum( devResids( y, mu, weights ) );\n\n\tlet beta;\n\tlet j;\n\tlet converged = false;\n\tfor ( j = 0; j < MAX_IT; j++ ) {\n\t\tconst varg = variance( mu );\n\t\tconst gprime = logitMuEta( eta );\n\t\tconst z = calcZ( eta, y, mu, gprime );\n\t\tconst w = calcW( weights, gprime, varg );\n\t\tconst wz = multiply( w, z );\n\t\tconst Xw = colMult( X, w );\n\t\tconst A = multiplyMatrices( Xt, Xw );\n\t\tconst b = mmult( Xt, wz );\n\t\tbeta = solve( A, Matrix.columnVector( b ) );\n\t\teta = mmult( X, beta.to1DArray() );\n\t\tmu = logitLinkInv( eta );\n\t\tconst dev = sum( devResids( y, mu, weights ) );\n\t\tif ( abs( dev - devOld ) / ( 0.1 + abs( dev ) ) < EPSILON ) {\n\t\t\tconverged = true;\n\t\t\tbreak;\n\t\t}\n\t\tdevOld = dev;\n\t}\n\tconst coefficients = beta.to1DArray();\n\tconst predict = ( X ) => {\n\t\tconst finalData = mmult( X, coefficients );\n\t\tconst predictions = sigmoid( finalData );\n\t\treturn predictions;\n\t};\n\tconst fitted = predict( X, coefficients );\n\treturn {\n\t\taic: aic( y, logitLinkInv( eta ), coefficients.length ),\n\t\tstdErrors: stdErrors( X, fitted ),\n\t\tfitted,\n\t\tcoefficients,\n\t\titerations: j,\n\t\tconverged,\n\t\tpredict\n\t};\n}\n\n\n// EXPORTS //\n\nexport default irls;\n","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport isArray from '@stdlib/assert/is-array';\nimport abs from '@stdlib/math/base/special/abs';\nimport pnorm from '@stdlib/stats/base/dists/normal/cdf';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport Tooltip from '@isle-project/components/tooltip';\nimport Table from '@isle-project/components/table';\nimport TeX from '@isle-project/components/tex';\nimport subtract from '@isle-project/utils/subtract';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\nimport designMatrixMissing from './design_matrix_missing.js';\nimport designMatrix from './design_matrix.js';\nimport irls from './logistic_regression.js';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\nconst T = 't';\n\n\n// FUNCTIONS //\n\nconst summaryTable = ( x, intercept, result, t ) => {\n\treturn (\n\t\t<Table bordered size=\"sm\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<Tooltip placement=\"right\" tooltip={t('name-of-predictor')} ><th>{t('predictor')}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"right\" tooltip={t('change-in-log')}><th>{t('coefficient')}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"left\" tooltip={t('standard-deviation-coefficient')} ><th>{t('std-error')}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"left\" tooltip={<span>{t('test-statistic-coefficient-zero')}<TeX displayMode raw=\"t = \\tfrac{\\text{Coefficient}}{\\text{Std. Error}}\" /></span>} ><th>{T}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"left\" tooltip={<span>{t('p-value-coefficient-zero')}<TeX displayMode raw=\"2 \\Phi( |t| )\" /></span>} ><th>{t('p-value')}</th></Tooltip>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ intercept ? <tr>\n\t\t\t\t\t<th>{t('intercept')}</th>\n\t\t\t\t\t<td>{result.coefficients[ 0 ].toFixed( 6 )}</td>\n\t\t\t\t\t<td>{result.stdErrors[ 0 ].toFixed( 4 )}</td>\n\t\t\t\t\t<td>{( result.coefficients[ 0 ] / result.stdErrors[ 0 ] ).toFixed( 4 )}</td>\n\t\t\t\t\t<td>{( 2.0 * pnorm( -abs( result.coefficients[ 0 ] / result.stdErrors[ 0 ] ), 0.0, 1.0 ) ).toFixed( 4 )}</td>\n\t\t\t\t</tr> : null }\n\t\t\t\t{x.map( ( name, idx ) => {\n\t\t\t\t\tidx = idx + Number( intercept );\n\t\t\t\t\tconst tStat = result.coefficients[ idx ]/ result.stdErrors[ idx ];\n\t\t\t\t\tconst pVal = 2.0 * pnorm( -abs( tStat ), 0.0, 1.0 );\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={idx} >\n\t\t\t\t\t\t\t<th>{name}</th>\n\t\t\t\t\t\t\t<td>{result.coefficients[ idx ].toFixed( 6 )}</td>\n\t\t\t\t\t\t\t<td>{result.stdErrors[ idx ].toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{tStat.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{pVal.toFixed( 4 )}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</Table>\n\t);\n};\n\nconst fitModel = ({ y, success, x, intercept, omitMissing, data, quantitative }) => {\n\ttry {\n\t\tif ( !isArray( x ) ) {\n\t\t\tx = [ x ];\n\t\t}\n\t\tconst dMatrix = omitMissing ? designMatrixMissing : designMatrix;\n\t\tconst { matrix, predictors, yvalues, nobs } = dMatrix( x, y, data, quantitative, intercept, success );\n\t\treturn {\n\t\t\tresult: irls( matrix, yvalues, nobs ),\n\t\t\tpredictors: predictors\n\t\t};\n\t} catch ( _ ) {\n\t\treturn {};\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Logistic regression.\n*\n* @property {Object} data - object of value arrays\n* @property {(string|Factor)} y - outcome variable\n* @property {*} success - success category of `y`\n* @property {(string|Factor|Array<(string|Factor)>)} x - one or more predictor variables\n* @property {Array<string>} quantitative - array of variables in `data` that are `quantitative`\n* @property {boolean} omitMissing - controls whether to omit missing values\n* @property {boolean} intercept - controls whether to fit a model with an intercept term\n* @property {Function} onPredict - callback invoked with a predict function to make predictions for new data\n*/\nclass LogisticRegression extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tCOUNTER += 1;\n\t\tlet { y, success, x, intercept, omitMissing, data, quantitative } = props;\n\t\tconst { result, predictors } = fitModel({ y, success, x, intercept, omitMissing, data, quantitative });\n\t\tthis.state = {\n\t\t\tprobabilityThreshold: 0.5,\n\t\t\tresult,\n\t\t\tpredictors,\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.success !== prevState.success ||\n\t\t\tnextProps.omitMissing !== prevState.omitMissing\n\t\t) {\n\t\t\tconst { y, success, x, intercept, omitMissing, data, quantitative } = nextProps;\n\t\t\tconst newState = {\n\t\t\t\t...fitModel({ y, success, x, intercept, omitMissing, data, quantitative }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\thandlePredict = () => {\n\t\tlet { x, y, quantitative, intercept, success } = this.props;\n\t\tif ( !isArray( x ) ) {\n\t\t\tx = [ x ];\n\t\t}\n\t\tconst predict = ( data ) => {\n\t\t\tconst { matrix, yvalues } = designMatrix( x, y, data, quantitative, intercept, success );\n\t\t\tconst probs = this.state.result.predict( matrix );\n\t\t\tconst residuals = subtract( probs, yvalues );\n\t\t\tconst yhat = probs.map( x => x > this.state.probabilityThreshold );\n\t\t\treturn { yhat, probs, residuals };\n\t\t};\n\t\tthis.props.onPredict( predict, COUNTER );\n\t};\n\n\trender() {\n\t\tconst { result } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !result ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('logistic-title', { y: this.props.y, counter: COUNTER })}</span>\n\t\t\t\t{summaryTable( this.state.predictors, this.props.intercept, result, this.props.t )}\n\t\t\t\t<i>{result.converged ? t('fisher-scoring-converged', { n: result.iterations }) : t('fisher-scoring-not-converged', { n: result.iterations })}</i>\n\t\t\t\t<p>{t('aic')}: {roundn( result.aic, -3 )}</p>\n\t\t\t\t{this.props.onPredict ? <ButtonGroup>\n\t\t\t\t\t<Tooltip tooltip={t('use-model-to-predict-tooltip-logistic')} >\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={this.handlePredict} >\n\t\t\t\t\t\t\t{this.props.t('use-model-to-predict')}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t\t<InputGroup size=\"sm\" >\n\t\t\t\t\t\t<InputGroup.Text>{t('threshold')}:</InputGroup.Text>\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tdefaultValue={0.5}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tonChange={( event ) => {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tprobabilityThreshold: event.target.value\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</InputGroup>\n\t\t\t\t</ButtonGroup> : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nLogisticRegression.defaultProps = {\n\tomitMissing: false,\n\tintercept: true,\n\tonPredict: null\n};\n\nLogisticRegression.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tsuccess: PropTypes.any.isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\tomitMissing: PropTypes.bool,\n\tintercept: PropTypes.bool,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( 'models' )( withPropCheck( LogisticRegression ) );\n","/**\n* Computes a matrix product of a n x p matrix and a column vector of length p.\n*\n* @param {Matrix} A - n x p matrix\n* @param {Array} b - p x 1 column vector\n* @returns {Array} result of matrix multiplication\n*/\nfunction mmult( A, b ) {\n\tconst n = A.shape[ 0 ];\n\tconst p = A.shape[ 1 ];\n\n\tlet ret = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\t\tlet sum = 0;\n\t\t\tfor ( let j = 0; j < p; j++ ) {\n\t\t\t\tsum += A.get( i, j ) * b[ j ];\n\t\t\t}\n\t\t\tret[ i ] = sum;\n\t}\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nexport default mmult;\n","/**\n* Copyright (C) 2020-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport ndarray from '@stdlib/ndarray/ctor';\n\n\n// MAIN //\n\n/**\n* Transposes a matrix.\n*\n* @param {Matrix} X - input matrix (2d `ndarray`)\n* @returns matrix transpose\n*/\nconst transpose = ( X ) => {\n\tconst shape = [ X.shape[ 1 ], X.shape[ 0 ] ];\n\tconst strides = [ X.strides[ 1 ], X.strides[ 0 ] ];\n\tconst offset = X.offset;\n\tconst order = X.order;\n\treturn ndarray( 'float64', X._buffer, shape, strides, offset, order );\n};\n\n\n// EXPORTS //\n\nexport default transpose;\n"],"sourceRoot":""}