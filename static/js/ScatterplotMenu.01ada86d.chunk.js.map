{"version":3,"file":"static/js/ScatterplotMenu.01ada86d.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/data-explorer/menu/scatterplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/slider/main.js","../node_modules/@isle-project/components/input/slider/index.js"],"sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport ScatterPlot from '@isle-project/components/plots/scatterplot';\nimport { DATA_EXPLORER_SHARE_SCATTERPLOT, DATA_EXPLORER_SCATTERPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// MAIN //\n\nconst ScatterplotMenu = ( props ) => {\n\tconst { variables, groupingVariables, defaultX, defaultY, t } = props;\n\n\tconst [ xval, setXval ] = useState( defaultX || variables[ 0 ] );\n\tconst [ yval, setYval ] = useState( defaultY || variables[ 1 ] );\n\tconst [ color, setColor ] = useState( null );\n\tconst [ type, setType ] = useState( null );\n\tconst [ size, setSize ] = useState( null );\n\tconst [ text, setText ] = useState( null );\n\tconst [ regressionLine, setRegressionLine ] = useState( false );\n\tconst [ regressionMethod, setRegressionMethod ] = useState([ 'linear' ]);\n\tconst [ lineBy, setLineBy ] = useState( null );\n\tconst [ smoothSpan, setSmoothSpan ] = useState( 0.66 );\n\n\tconst generateScatterplot = () => {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = { xval, yval, plotId };\n\t\tif ( color ) {\n\t\t\taction.color = color;\n\t\t}\n\t\tif ( type ) {\n\t\t\taction.type = type;\n\t\t}\n\t\tif ( size ) {\n\t\t\taction.size = size;\n\t\t}\n\t\tif ( text ) {\n\t\t\taction.text = text;\n\t\t}\n\t\tif ( regressionLine ) {\n\t\t\taction.regressionLine = regressionLine;\n\t\t\taction.regressionMethod = regressionMethod;\n\t\t}\n\t\tif ( contains( regressionMethod, 'smooth' ) ) {\n\t\t\taction.smoothSpan = smoothSpan;\n\t\t}\n\t\tif ( lineBy ) {\n\t\t\taction.lineBy = lineBy;\n\t\t}\n\t\tconst onShare = () => {\n\t\t\tprops.session.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tprops.logAction( DATA_EXPLORER_SHARE_SCATTERPLOT, action );\n\t\t};\n\t\tconst output = <ScatterPlot\n\t\t\tdata={props.data}\n\t\t\txval={xval} yval={yval} color={color} type={type} size={size} text={text}\n\t\t\tregressionLine={regressionLine} regressionMethod={regressionMethod}\n\t\t\tlineBy={lineBy} smoothSpan={smoothSpan}\n\t\t\tid={plotId}\n\t\t\taction={action}\n\t\t\tonSelected={props.onSelected}\n\t\t\tonShare={onShare}\n\t\t/>;\n\t\tprops.logAction( DATA_EXPLORER_SCATTERPLOT, action );\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card style={{ minWidth: 650 }} >\n\t\t\t<Card.Header as=\"h4\" >\n\t\t\t\t{t('Scatterplot')}\n\t\t\t\t<QuestionButton title={t('Scatterplot')} content={t('Scatterplot-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<div style={{ width: '100%' }}>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('x-axis')}\n\t\t\t\t\t\tdefaultValue={xval}\n\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\tstyle={{ float: 'left', paddingRight: 10, width: '33.3%' }}\n\t\t\t\t\t\tonChange={setXval}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={t('y-axis')}\n\t\t\t\t\t\tdefaultValue={yval}\n\t\t\t\t\t\tstyle={{ float: 'left', paddingLeft: 10, paddingRight: 10, width: '33.3%' }}\n\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\tonChange={setYval}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={`${t('labels')}:`}\n\t\t\t\t\t\tstyle={{ float: 'left', paddingLeft: 10, width: '33.3%' }}\n\t\t\t\t\t\tclearable={true}\n\t\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\t\tonChange={setText}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ width: '100%' }}>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={`${t('color')}:`}\n\t\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\t\tclearable={true}\n\t\t\t\t\t\tstyle={{ float: 'left', paddingRight: 10, width: '33.3%' }}\n\t\t\t\t\t\tonChange={setColor}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={`${t('type')}:`}\n\t\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\t\tclearable={true}\n\t\t\t\t\t\tstyle={{ float: 'left', paddingLeft: 10, paddingRight: 10, width: '33.3%' }}\n\t\t\t\t\t\tonChange={setType}\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectInput\n\t\t\t\t\t\tlegend={`${t('size')}:`}\n\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\tclearable={true}\n\t\t\t\t\t\tstyle={{ float: 'left', paddingLeft: 10, width: '33.3%' }}\n\t\t\t\t\t\tonChange={setSize}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ clear: 'both' }}></div>\n\t\t\t\t<div style={{\n\t\t\t\t\topacity: props.showRegressionOption ? 1.0 : 0.0\n\t\t\t\t}}>\n\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\tinline\n\t\t\t\t\t\tlegend={t('show-regression-model')}\n\t\t\t\t\t\tdefaultValue={false}\n\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\tsetRegressionLine( !regressionLine );\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<div style={{ width: '100%' }}>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={`${t('method')}:`}\n\t\t\t\t\t\t\tdefaultValue=\"linear\"\n\t\t\t\t\t\t\tmulti={true}\n\t\t\t\t\t\t\toptions={[ 'linear', 'smooth' ]}\n\t\t\t\t\t\t\tstyle={{ float: 'right', paddingLeft: 10, width: '45%' }}\n\t\t\t\t\t\t\tdisabled={!regressionLine}\n\t\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\t\tif ( !isArray( value ) ) {\n\t\t\t\t\t\t\t\t\tvalue = [ value ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsetRegressionMethod( value );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={`${t('split-by')}:`}\n\t\t\t\t\t\t\toptions={props.groupingVariables}\n\t\t\t\t\t\t\tclearable={true}\n\t\t\t\t\t\t\tstyle={{ float: 'right', paddingLeft: 10, width: '45%' }}\n\t\t\t\t\t\t\tdisabled={!regressionLine}\n\t\t\t\t\t\t\tonChange={setLineBy}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SliderInput\n\t\t\t\t\t\t\tlegend={t('smoothing-parameter')}\n\t\t\t\t\t\t\tdisabled={!contains( regressionMethod, 'smooth' )}\n\t\t\t\t\t\t\tmin={0.01}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tdefaultValue={0.66}\n\t\t\t\t\t\t\tonChange={setSmoothSpan}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ clear: 'both' }}></div>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateScatterplot}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nScatterplotMenu.defaultProps = {\n\tdefaultX: null,\n\tdefaultY: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonSelected() {},\n\tshowRegressionOption: true\n};\n\nScatterplotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultX: PropTypes.string,\n\tdefaultY: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonSelected: PropTypes.func,\n\tonCreated: PropTypes.func.isRequired,\n\tsession: PropTypes.object.isRequired,\n\tshowRegressionOption: PropTypes.bool,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default ScatterplotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport Badge from 'react-bootstrap/Badge';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nconst SliderInput = ( props ) => {\n\tconst { bind, defaultValue, legend, disabled, hideTooltip, inline, min, max, onChange, precision, step,\n\t\tminLabel, maxLabel, numberInputStyle, rangeInputStyle, style } = props;\n\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ] : defaultValue\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ]);\n\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if ( step === 1.0 && newValue !== '' ) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, max, min, step, value, onChange ] );\n\n\tconst handleInputChange = useCallback( ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tsetValue( newValue );\n\n\t\tif ( valid && newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, value, onChange ] );\n\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}:`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}:`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\tlet roundedValue;\n\tif ( value !== '' ) {\n\t\troundedValue = roundn( value, ( -1.0 )*precision );\n\t} else {\n\t\troundedValue = value;\n\t}\n\tconst rangeInput = <input\n\t\ttype=\"range\"\n\t\tclassName=\"slider-range-input\"\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tdisabled={disabled}\n\t\tonChange={handleInputChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t...rangeInputStyle\n\t\t}}\n\t/>;\n\tconst numberInput = <input\n\t\ttype=\"number\"\n\t\tname=\"input\"\n\t\tclassName=\"slider-number-input\"\n\t\tdisabled={disabled}\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tonChange={handleInputChange}\n\t\tonBlur={finishChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t...numberInputStyle\n\t\t}}\n\t\tautoComplete=\"off\"\n\t/>;\n\tif ( inline ) {\n\t\treturn (\n\t\t\t<span className=\"input\" style={{\n\t\t\t\tpadding: '5px',\n\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t...style\n\t\t\t}}>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<Tooltip\n\t\t\tid=\"sliderTooltip\"\n\t\t\tplacement=\"top\"\n\t\t\tshow={!hideTooltip}\n\t\t\ttooltip={disabled ? t('slider-disabled') : tooltip}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<br />\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"names":["ScatterplotMenu","props","variables","groupingVariables","defaultX","defaultY","t","useState","xval","setXval","yval","setYval","color","setColor","type","setType","size","setSize","text","setText","regressionLine","setRegressionLine","regressionMethod","setRegressionMethod","lineBy","setLineBy","smoothSpan","setSmoothSpan","style","minWidth","as","title","content","width","legend","defaultValue","options","float","paddingRight","onChange","paddingLeft","clearable","clear","opacity","showRegressionOption","inline","multi","disabled","value","isArray","contains","min","max","step","variant","block","onClick","plotId","randomstring","action","output","data","id","onSelected","onShare","session","addNotification","message","level","position","logAction","DATA_EXPLORER_SHARE_SCATTERPLOT","DATA_EXPLORER_SCATTERPLOT","onCreated","defaultProps","popover","trigger","placement","rootClose","overlay","className","uid","generateUID","CheckboxInput","bind","useRef","useContext","SessionContext","state","setValue","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","tooltip","tooltipPlacement","current","marginLeft","role","tabIndex","onKeyPress","onSpanChange","noop","debug","logger","SliderInput","hideTooltip","precision","minLabel","maxLabel","numberInputStyle","rangeInputStyle","useTranslation","roundedValue","finishChange","parseFloat","handleInputChange","valid","validity","PINF","NINF","roundn","rangeInput","display","numberInput","name","onBlur","marginTop","autoComplete","padding","Badge","show"],"sourceRoot":""}