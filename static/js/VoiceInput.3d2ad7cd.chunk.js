"use strict";(self.webpackChunkisle_dashboard=self.webpackChunkisle_dashboard||[]).push([[4331],{97634:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:function(){return main}});var react=__webpack_require__(67294),prop_types=__webpack_require__(45697),prop_types_default=__webpack_require__.n(prop_types),browser=__webpack_require__(14946),browser_default=__webpack_require__.n(browser),commonjs=__webpack_require__(81468),Tooltip=__webpack_require__(31307),Tooltip_default=__webpack_require__.n(Tooltip),overlay_trigger=__webpack_require__(95108),context=__webpack_require__(32283),locales=__webpack_require__(91800),microphone=__webpack_require__(52734);class Shim extends react.Component{render(){return react.createElement("button",{onClick:this.props.onClick})}}Shim.propTypes={onClick:prop_types_default().func},Shim.defaultProps={onClick(){}};var voice_microphone=microphone||Shim,__defProp=Object.defineProperty,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a};const debug=browser_default()("isle:voice-input");function getSpeechRecognition(){try{return!!(__webpack_require__.g.SpeechRecognition||__webpack_require__.g.webkitSpeechRecognition)}catch(error){return!1}}function createGrammarList(grammars){const SpeechGrammarList=__webpack_require__.g.SpeechGrammarList||__webpack_require__.g.webkitSpeechGrammarList,grammarList=new SpeechGrammarList;for(let i=0;i<grammars.length;i++){const{src,weight}=grammars[i];grammarList.addFromString(src,weight)}return grammarList}const VoiceInput=props=>{const{autorecord,bind,defaultValue,grammars,id,maxAlternatives,remote,startTooltip,stopTooltip,speechInterface,onChange,onClick,onFinalText,onRecordingStart,onRecordingStop,onSegment,onSubmit,timeout}=props,[isRecording,setIsRecording]=(0,react.useState)(autorecord),session=(0,react.useContext)(context.Z),{t}=(0,commonjs.$G)("input"),[value,setValue]=(0,react.useState)(bind&&session.state?session.state[bind]:defaultValue),recognizerRef=(0,react.useRef)(),timerRef=(0,react.useRef)(),handleChange=(0,react.useCallback)(event=>{const newValue=event.target.value;setValue(newValue),onChange(newValue),bind&&__webpack_require__.g.lesson.setState({[bind]:newValue})},[bind,onChange]),handleKeyDown=(0,react.useCallback)(event=>{switch(event.keyCode){case 13:onSubmit(value);break;default:break}},[value,onSubmit]),stop=(0,react.useCallback)(()=>{debug("Set `isRecording` to false..."),setIsRecording(!1),recognizerRef.current&&recognizerRef.current.stop(),onRecordingStop()},[onRecordingStop]),start=(0,react.useCallback)(()=>{recognizerRef.current=null;const SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;if(SpeechRecognition){const recognizer=new SpeechRecognition;recognizer.lang=locales.a.language,recognizer.continuous=!0,recognizer.interimResults=!0,recognizer.maxAlternatives=maxAlternatives,recognizer.grammars=createGrammarList(grammars),recognizer.onerror=event=>{if(debug("Encountered an error..."),event.error==="not-allowed"||event.error==="service-not-allowed")return setIsRecording(!1),session.addNotification({title:"Not allowed",message:"No permission to use the speech recognition service",level:"error",position:"tr"});try{recognizer.start()}catch(err){debug(err)}},recognizer.onend=()=>{debug("onend: %s",id),isRecording&&recognizer.start()},recognizer.onstart=()=>{debug("onstart: %s",id),onRecordingStart()},recognizer.onresult=event=>{if(debug("Processing result..."),typeof event.results=="undefined"){debug("Something went wrong...");return}for(let i=event.resultIndex;i<event.results.length;++i){const results=event.results[i];if(event.results[i].isFinal){timeout&&(timerRef.current=setTimeout(stop,timeout)),debug("Received final text");let text2;if(maxAlternatives>1){text2=new Array(results.length);for(let i2=0;i2<results.length;i2++)text2[i2]=results[i2].transcript}else text2=results[0].transcript;setValue(text2),onFinalText(text2),speechInterface&&speechInterface.check(text2,{onStart:()=>{stop()},onEnd:()=>{start()}})}else{timerRef.current&&clearTimeout(timerRef.current);let text2;if(maxAlternatives>1){text2=new Array(results.length);for(let i2=0;i2<results.length;i2++)text2[i2]=results[i2].transcript}else text2=results[0].transcript;setValue(text2),onSegment(text2)}}},recognizer.start(),recognizerRef.current=recognizer}debug("Set `isRecording` to true..."),setIsRecording(!0)},[grammars,id,isRecording,maxAlternatives,onRecordingStart,session,speechInterface,stop,timeout,onFinalText,onSegment]),tooltipMessage=(0,react.useCallback)(recognizable=>{let text2="";return recognizable?isRecording===!0?text2=stopTooltip||t("click-to-stop-recording"):text2=startTooltip||t("click-to-start-recording"):text2="Your browser does not support voice recognition. You may use the Chrome Browser instead",text2},[isRecording,startTooltip,stopTooltip,t]);(0,react.useEffect)(()=>{remote&&(window.onkeydown=event=>{switch(event.keyCode){case remote.stop:stop();break;case remote.start:isRecording||start();break;case remote.toggle:isRecording?stop():start();break}}),autorecord&&(debug("Should record voice..."),start())},[autorecord,remote,isRecording,start,stop]);const handleClick=(0,react.useCallback)(event=>{onClick(event),isRecording?stop():start()},[isRecording,start,stop,onClick]);let mike="voice-microphone";isRecording===!0&&(mike="voice-microphone voice-recording");const x=getSpeechRecognition(),text=tooltipMessage(x),tooltip=react.createElement(Tooltip_default(),{id:`${props.id}-voice-input-tooltip`},text);switch(props.mode){case"full":return react.createElement(react.Fragment,null,props.legend?react.createElement("label",null,props.legend):null,react.createElement("div",{className:`input voice-input ${props.className}`,style:__spreadValues({height:props.height,width:props.width},props.style)},react.createElement("input",{className:"voice-input-text",type:"text",onKeyDown:handleKeyDown,onChange:handleChange,placeholder:props.placeholder!==null?props.placeholder:t("enter-text"),value}),react.createElement(overlay_trigger.Z,{placement:props.tooltipPlacement,overlay:tooltip},react.createElement(voice_microphone,{onClick:handleClick,className:mike}))));case"status":return react.createElement(react.Fragment,null,props.legend?react.createElement("label",null,props.legend):null,react.createElement("div",{className:`voice-input-status-text ${props.className}`,style:__spreadValues({height:props.height,width:props.width},props.style)},react.createElement("div",{className:"voice-input-status"},value),react.createElement(overlay_trigger.Z,{placement:"bottom",overlay:tooltip},react.createElement(voice_microphone,{onClick:handleClick,className:mike}))));case"microphone":return react.createElement(react.Fragment,null,props.legend?react.createElement("label",null,props.legend):null,react.createElement("div",{className:`voice-solo-microphone ${props.className}`,style:__spreadValues({height:props.height,width:props.width},props.style)},react.createElement(overlay_trigger.Z,{placement:"bottom",overlay:tooltip},react.createElement(voice_microphone,{onClick:handleClick,className:mike}))));case"none":return null}};VoiceInput.defaultProps={autorecord:!1,defaultValue:"",grammars:[],legend:"",mode:"full",maxAlternatives:1,onChange(){},onClick(){},onFinalText(){},onSegment(){},onRecordingStart(){},onRecordingStop(){},onSubmit(){},placeholder:null,remote:null,className:"",style:{},timeout:null,stopTooltip:null,startTooltip:null,tooltipPlacement:"left",width:500,height:36},VoiceInput.propTypes={autorecord:prop_types_default().bool,defaultValue:prop_types_default().string,grammars:prop_types_default().array,legend:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().node]),mode:prop_types_default().string,maxAlternatives:prop_types_default().number,onChange:prop_types_default().func,onClick:prop_types_default().func,onFinalText:prop_types_default().func,onRecordingStart:prop_types_default().func,onRecordingStop:prop_types_default().func,onSegment:prop_types_default().func,onSubmit:prop_types_default().func,placeholder:prop_types_default().string,remote:prop_types_default().object,className:prop_types_default().string,style:prop_types_default().object,timeout:prop_types_default().number,stopTooltip:prop_types_default().string,startTooltip:prop_types_default().string,tooltipPlacement:prop_types_default().oneOf(["top","right","bottom","left"]),width:prop_types_default().number,height:prop_types_default().number};var main=VoiceInput},52734:function(module,__unused_webpack_exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/83859f4256064fcaae00.svg"}}]);

//# sourceMappingURL=VoiceInput.3d2ad7cd.chunk.js.map