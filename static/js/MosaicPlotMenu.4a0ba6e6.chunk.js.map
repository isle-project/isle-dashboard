{"version":3,"file":"static/js/MosaicPlotMenu.4a0ba6e6.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/dashboard/index.js","../node_modules/@isle-project/components/data-explorer/menu/mosaicplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js"],"sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Dashboard = Loadable( () => import( /* webpackChunkName: \"Dashboard\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Dashboard;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport SelectInput from '@isle-project/components/input/select';\nimport Dashboard from '@isle-project/components/dashboard';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport MosaicPlot from '@isle-project/components/plots/mosaicplot';\nimport { DATA_EXPLORER_SHARE_MOSAIC, DATA_EXPLORER_MOSAIC } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// VARIABLES //\n\nconst AXIS_OPTIONS = [\n\t'parallel to the axis',\n\t'horizontal',\n\t'perpendicular to the axis',\n\t'vertical'\n];\n\n\n// MAIN //\n\nconst MosaicPlotMenu = ({ data, variables, session, t, logAction, onCreated, onPlotDone }) => {\n\tconst generateMosaicPlot = ( variables, showColors, axisLabels ) => {\n\t\tif ( !variables || variables.length < 2 ) {\n\t\t\treturn session.addNotification({\n\t\t\t\ttitle: 'Select Variables',\n\t\t\t\tmessage: 'You need to select at least two variables for the mosaic plot',\n\t\t\t\tlevel: 'warning',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t}\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tvariables, showColors, plotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_MOSAIC, {\n\t\t\t\tvariables, showColors, plotId\n\t\t\t});\n\t\t};\n\t\tconst output = <MosaicPlot\n\t\t\tdata={data}\n\t\t\tvariables={variables}\n\t\t\tshowColors={showColors}\n\t\t\taxisLabels={axisLabels}\n\t\t\tid={plotId}\n\t\t\taction={action}\n\t\t\tonShare={onShare}\n\t\t\tonPlotDone={onPlotDone}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_MOSAIC, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Dashboard\n\t\t\tautoStart={false}\n\t\t\ttitle={<span>\n\t\t\t\t{t('Mosaic Plot')}\n\t\t\t\t<QuestionButton title={t('Mosaic Plot')} content={t('Mosaic Plot-description')} />\n\t\t\t</span>}\n\t\t\tonGenerate={generateMosaicPlot}\n\t\t\tstyle={{ minHeight: 380 }}\n\t\t>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('variables')}\n\t\t\t\toptions={variables}\n\t\t\t\tmulti\n\t\t\t/>\n\t\t\t<CheckboxInput\n\t\t\t\tlegend={t('show-colors')}\n\t\t\t\tdefaultValue={false}\n\t\t\t/>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('axis-label-rotation')}\n\t\t\t\toptions={AXIS_OPTIONS}\n\t\t\t/>\n\t\t</Dashboard>\n\t);\n};\n\n\n// PROPERTIES //\n\nMosaicPlotMenu.defaultProps = {\n\tlogAction() {},\n\tonPlotDone() {}\n};\n\nMosaicPlotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func.isRequired,\n\tonPlotDone: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default MosaicPlotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"names":["Dashboard","Loadable","AXIS_OPTIONS","MosaicPlotMenu","data","variables","session","t","logAction","onCreated","onPlotDone","autoStart","title","content","onGenerate","showColors","axisLabels","length","addNotification","message","level","position","plotId","randomstring","action","output","id","onShare","DATA_EXPLORER_SHARE_MOSAIC","DATA_EXPLORER_MOSAIC","style","minHeight","legend","options","multi","defaultValue","defaultProps","props","popover","trigger","placement","rootClose","overlay","size","variant","className","uid","generateUID","CheckboxInput","bind","disabled","onChange","useRef","useContext","SessionContext","useState","state","value","setValue","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","marginLeft","role","tabIndex","color","onClick","onKeyPress","onSpanChange","noop"],"sourceRoot":""}