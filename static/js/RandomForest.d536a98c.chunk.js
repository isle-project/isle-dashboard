"use strict";(self.webpackChunkisle_dashboard=self.webpackChunkisle_dashboard||[]).push([[6634],{85324:function(e,t,r){r.r(t);var s=r(38603),n=r(91532),i=r.n(n),a=r(58651),o=r(79174),u=r(93918),p=r(22949),m=r.n(p),c=r(18237),l=r(94123),d=r(65161),h=r(76798),y=r(32921);let T=0;const f=({y:e,x:t,type:r,nTrees:s,nTry:n,impurityMeasure:i,data:a,quantitative:o,scoreThreshold:u,maxTreeDepth:p,minItemsCount:c})=>{try{let l,h;l=m()(t)?t:[t],"Classification"===r&&(h=new d.OI({response:e,predictors:l,data:a,quantitative:o,criterion:i,nTrees:s,nTry:n,scoreThreshold:u,maxTreeDepth:p,minItemsCount:c}));const y=[];for(let e=0;e<l.length;e++){const t=l[e];y.push(h.importances[t])}return{forest:h,predictors:l,importances:y}}catch(l){return{}}};class x extends s.Component{constructor(e){var t,r,s;super(e),s=()=>{this.props.onPredict(this.state.forest,T)},(r="handlePredict")in(t=this)?Object.defineProperty(t,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[r]=s,T+=1;const{y:n,x:i,type:a,nTrees:o,nTry:u,impurityMeasure:p,data:m,quantitative:c,scoreThreshold:l,maxTreeDepth:d,minItemsCount:h}=e;this.state={...f({y:n,x:i,type:a,nTrees:o,nTry:u,impurityMeasure:p,data:m,quantitative:c,scoreThreshold:l,maxTreeDepth:d,minItemsCount:h}),...e}}static getDerivedStateFromProps(e,t){if(e.y!==t.y||e.x!==t.x||e.type!==t.type||e.nTrees!==t.nTrees||e.nTry!==t.nTry||e.impurityMeasure!==t.impurityMeasure||e.data!==t.data||e.quantitative!==t.quantitative||e.scoreThreshold!==t.scoreThreshold||e.maxTreeDepth!==t.maxTreeDepth||e.minItemsCount!==t.minItemsCount){const{y:t,x:r,type:s,nTrees:n,nTry:i,impurityMeasure:a,data:o,quantitative:u,scoreThreshold:p,maxTreeDepth:m,minItemsCount:c}=e;return{...f({y:t,x:r,type:s,nTrees:n,nTry:i,impurityMeasure:a,data:o,quantitative:u,scoreThreshold:p,maxTreeDepth:m,minItemsCount:c}),...e}}return null}render(){const{forest:e}=this.state,{t:t}=this.props;return e?s.createElement("div",{style:{overflowX:"auto",width:"100%"}},s.createElement("span",{className:"title"},t("random-forest-for",{y:this.props.y,counter:T})),s.createElement("p",null,t("created-from-trees",{nTrees:this.props.nTrees,nTry:this.props.nTry})),s.createElement(c.Z,{editable:!0,data:[{type:"bar",x:this.state.predictors,y:this.state.importances}],layout:{xaxis:{title:t("variable")},yaxis:{title:t("importance")}}}),this.props.onPredict?s.createElement(l.Z,{tooltip:t("predictions-attached")},s.createElement(u.Z,{variant:"secondary",size:"sm",style:{marginTop:10},onClick:this.handlePredict},this.props.t("use-model-to-predict"))):null):s.createElement(o.Z,{variant:"danger"},t("missing-attributes"))}}x.defaultProps={type:"Classification",nTrees:50,nTry:1,impurityMeasure:"gini",scoreThreshold:.01,maxTreeDepth:20,minItemsCount:50,onPredict:null},x.propTypes={data:i().object.isRequired,y:i().oneOfType([i().string,i().instanceOf(y.E)]).isRequired,x:i().oneOfType([i().arrayOf(i().oneOfType([i().string,i().instanceOf(y.E)])),i().string,i().instanceOf(y.E)]).isRequired,type:i().oneOf(["Classification","Regression"]),quantitative:i().arrayOf(i().string).isRequired,nTrees:i().number,nTry:i().number,impurityMeasure:i().oneOf(["gini","entropy"]),scoreThreshold:i().number,maxTreeDepth:i().number,minItemsCount:i().number,onPredict:i().func},t.default=(0,a.Z)("models")((0,h.W)(x))}}]);
//# sourceMappingURL=RandomForest.d536a98c.chunk.js.map