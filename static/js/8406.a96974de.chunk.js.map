{"version":3,"sources":["../node_modules/is-any-array/lib/index.js","../node_modules/ml-array-max/lib/index.js","../node_modules/ml-array-min/lib/index.js","../node_modules/ml-array-rescale/lib/index.js","../node_modules/ml-matrix/matrix.js"],"names":[],"mappings":"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","file":"static/js/8406.a96974de.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAnyArray = void 0;\nconst toString = Object.prototype.toString;\n/**\n * Checks if an object is an instance of an Array (array or typed array).\n *\n * @param {any} value - Object to check.\n * @returns {boolean} True if the object is an array.\n */\nfunction isAnyArray(value) {\n    return toString.call(value).endsWith('Array]');\n}\nexports.isAnyArray = isAnyArray;\n//# sourceMappingURL=index.js.map","'use strict';\n\nvar isAnyArray = require('is-any-array');\n\nfunction max(input, options = {}) {\n  if (!isAnyArray.isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  const { fromIndex = 0, toIndex = input.length } = options;\n\n  if (\n    fromIndex < 0 ||\n    fromIndex >= input.length ||\n    !Number.isInteger(fromIndex)\n  ) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (\n    toIndex <= fromIndex ||\n    toIndex > input.length ||\n    !Number.isInteger(toIndex)\n  ) {\n    throw new Error(\n      'toIndex must be an integer greater than fromIndex and at most equal to length',\n    );\n  }\n\n  let maxValue = input[fromIndex];\n  for (let i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n  return maxValue;\n}\n\nmodule.exports = max;\n","'use strict';\n\nvar isAnyArray = require('is-any-array');\n\nfunction min(input, options = {}) {\n  if (!isAnyArray.isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  const { fromIndex = 0, toIndex = input.length } = options;\n\n  if (\n    fromIndex < 0 ||\n    fromIndex >= input.length ||\n    !Number.isInteger(fromIndex)\n  ) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (\n    toIndex <= fromIndex ||\n    toIndex > input.length ||\n    !Number.isInteger(toIndex)\n  ) {\n    throw new Error(\n      'toIndex must be an integer greater than fromIndex and at most equal to length',\n    );\n  }\n\n  let minValue = input[fromIndex];\n  for (let i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n  return minValue;\n}\n\nmodule.exports = min;\n","'use strict';\n\nvar isAnyArray = require('is-any-array');\nvar max = require('ml-array-max');\nvar min = require('ml-array-min');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar max__default = /*#__PURE__*/_interopDefaultLegacy(max);\nvar min__default = /*#__PURE__*/_interopDefaultLegacy(min);\n\nfunction rescale(input, options = {}) {\n  if (!isAnyArray.isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  let output;\n  if (options.output !== undefined) {\n    if (!isAnyArray.isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  const currentMin = min__default['default'](input);\n  const currentMax = max__default['default'](input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError(\n      'minimum and maximum input values are equal. Cannot rescale a constant array',\n    );\n  }\n\n  const {\n    min: minValue = options.autoMinMax ? currentMin : 0,\n    max: maxValue = options.autoMinMax ? currentMax : 1,\n  } = options;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  const factor = (maxValue - minValue) / (currentMax - currentMin);\n  for (let i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nmodule.exports = rescale;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar rescale = require('ml-array-rescale');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar rescale__default = /*#__PURE__*/_interopDefaultLegacy(rescale);\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const { maxRows = 15, maxColumns = 10, maxNumSize = 8 } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale__default[\"default\"](row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale__default[\"default\"](column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    columnIndices = checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    rowIndices = checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    let indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (Array.isArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports[\"default\"] = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n"],"sourceRoot":""}