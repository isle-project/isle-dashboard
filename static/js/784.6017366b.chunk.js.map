{"version":3,"file":"static/js/784.6017366b.chunk.js","mappings":"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","sources":["../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"],"sourcesContent":["/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return function () {\n    function class_1() {\n      this.__entries__ = [];\n    }\n\n    Object.defineProperty(class_1.prototype, \"size\", {\n      /**\r\n       * @returns {boolean}\r\n       */\n      get: function get() {\n        return this.__entries__.length;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    /**\r\n     * @param {*} key\r\n     * @returns {*}\r\n     */\n\n    class_1.prototype.get = function (key) {\n      var index = getIndex(this.__entries__, key);\n      var entry = this.__entries__[index];\n      return entry && entry[1];\n    };\n    /**\r\n     * @param {*} key\r\n     * @param {*} value\r\n     * @returns {void}\r\n     */\n\n\n    class_1.prototype.set = function (key, value) {\n      var index = getIndex(this.__entries__, key);\n\n      if (~index) {\n        this.__entries__[index][1] = value;\n      } else {\n        this.__entries__.push([key, value]);\n      }\n    };\n    /**\r\n     * @param {*} key\r\n     * @returns {void}\r\n     */\n\n\n    class_1.prototype.delete = function (key) {\n      var entries = this.__entries__;\n      var index = getIndex(entries, key);\n\n      if (~index) {\n        entries.splice(index, 1);\n      }\n    };\n    /**\r\n     * @param {*} key\r\n     * @returns {void}\r\n     */\n\n\n    class_1.prototype.has = function (key) {\n      return !!~getIndex(this.__entries__, key);\n    };\n    /**\r\n     * @returns {void}\r\n     */\n\n\n    class_1.prototype.clear = function () {\n      this.__entries__.splice(0);\n    };\n    /**\r\n     * @param {Function} callback\r\n     * @param {*} [ctx=null]\r\n     * @returns {void}\r\n     */\n\n\n    class_1.prototype.forEach = function (callback, ctx) {\n      if (ctx === void 0) {\n        ctx = null;\n      }\n\n      for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n        var entry = _a[_i];\n        callback.call(ctx, entry[1], entry[0]);\n      }\n    };\n\n    return class_1;\n  }();\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController = function () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation = function () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry = function () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI = function () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver = function () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\nexport default index;"],"names":["MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","this","__entries__","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","g","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","positions_1","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","create","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply"],"sourceRoot":""}