{"version":3,"file":"static/js/Gate.442ae038.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/session/role_context.js","../node_modules/@isle-project/components/gate/main.js"],"sourcesContent":["/**\n* Copyright (C) 2016-present The ISLE Authors\n*\n* The isle-session program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport React from 'react';\n\n\n// MAIN //\n\nconst context = React.createContext( 'anonymous' );\n\n\n// EXPORTS //\n\nexport default context;\n","// MODULES //\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { RECEIVED_USER_RIGHTS, LOGGED_IN, LOGGED_OUT } from '@isle-project/constants/events.js';\nimport { TOGGLE_PRESENTATION_MODE } from '@isle-project/constants/actions.js';\nimport SessionContext from '@isle-project/session/context.js';\nimport RoleContext from '@isle-project/session/role_context.js';\n\n\n// MAIN //\n\n/**\n* An ISLE component that allows to display its children only to reserved audiences.\n*\n* @property {boolean} user - when set the gated content is displayed to users\n* @property {boolean} notUser - when set the gated content is **not** displayed to users\n* @property {boolean} enrolled - when set the gated content is displayed to the students enrolled in the course\n* @property {boolean} notEnrolled - when set the gated content is **not** displayed to the students enrolled in the course\n* @property {boolean} owner - when set the gated content is displayed to the owner of the course (usually the instructor)\n* @property {boolean} notOwner - when set the gated content is **not** displayed to the owner of the course (usually the instructor)\n* @property {Date} until - time until the contents of the gate should remain visible\n* @property {Date} after - time after which the contents of the gate should become visible\n* @property {Node} banner - a message which is displayed to the visitors for whom the gate's children are not visible due to lacking privileges\n* @property {boolean} showOwnerInPresentationMode - controls whether to show gate contents in presentation mode when gate is visible for `owner`s\n* @property {boolean} disabled - if a gate is disabled, the banner will be displayed no matter what\n* @property {Function} check - callback function returning a `boolean` indicating whether gate should display child components; the function is invoked whenever session actions arrive\n*/\nclass Gate extends Component {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\tisEnrolled: false,\n\t\t\tisOwner: false,\n\t\t\tvalidCheck: props.check ? props.check( context ) : true\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\t\tconst session = this.context;\n\t\tif ( session ) {\n\t\t\tthis.unsubscribe = session.subscribe( ( type, action ) => {\n\t\t\t\tif (\n\t\t\t\t\ttype === RECEIVED_USER_RIGHTS ||\n\t\t\t\t\ttype === LOGGED_IN ||\n\t\t\t\t\ttype === LOGGED_OUT ||\n\t\t\t\t\ttype === TOGGLE_PRESENTATION_MODE\n\t\t\t\t) {\n\t\t\t\t\tthis.checkAuthorization();\n\t\t\t\t}\n\t\t\t\tif ( this.props.check ) {\n\t\t\t\t\tconst validCheck = this.props.check( session );\n\t\t\t\t\tif ( validCheck !== this.state.validCheck ) {\n\t\t\t\t\t\treturn this.setState({\n\t\t\t\t\t\t\tvalidCheck\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( this._isMounted ) {\n\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.checkAuthorization();\n\t\t}\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif ( this.props.check ) {\n\t\t\tconst validCheck = this.props.check( this.context );\n\t\t\tif ( validCheck !== this.state.validCheck ) {\n\t\t\t\treturn this.setState({\n\t\t\t\t\tvalidCheck\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif ( this.unsubscribe ) {\n\t\t\tthis.unsubscribe();\n\t\t}\n\t\tthis._isMounted = false;\n\t}\n\n\tcheckAuthorization() {\n\t\tconst session = this.context;\n\t\tlet newState = {\n\t\t\tisEnrolled: session.isEnrolled(),\n\t\t\tisOwner: session.isOwner(),\n\t\t\tpresentationMode: session.presentationMode\n\t\t};\n\t\tif (\n\t\t\tnewState.isEnrolled !== this.state.isEnrolled ||\n\t\t\tnewState.isOwner !== this.state.isOwner ||\n\t\t\tnewState.presentationMode !== this.state.presentationMode\n\t\t) {\n\t\t\tthis.setState( newState );\n\t\t}\n\t}\n\n\tisTimeActive() {\n\t\tif ( !this.props.after && !this.props.until ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst session = this.context;\n\t\tif ( this.props.after && this.props.until ) {\n\t\t\treturn this.props.after < session.startTime && session.startTime <= this.props.until;\n\t\t} else if ( this.props.until ) {\n\t\t\treturn session.startTime <= this.props.until;\n\t\t}\n\t\t// Case: `after` property assigned\n\t\treturn this.props.after < session.startTime;\n\t}\n\n\trenderChildren( authenticated ) {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t{!authenticated ? this.props.banner : null}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"gate outer-element\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: authenticated ? 'inline' : 'none'\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst session = this.context;\n\t\treturn ( <RoleContext.Consumer>\n\t\t\t{ currentRole => {\n\t\t\t\tconst { disabled, user, notUser, enrolled, notEnrolled, owner, notOwner } = this.props;\n\t\t\t\tconst isEnrolled = this.state.isEnrolled || currentRole === 'enrolled';\n\t\t\t\tconst isOwner = this.state.isOwner || currentRole === 'owner';\n\t\t\t\tconst isUser = ( session && !session.anonymous ) || currentRole !== 'anonymous';\n\t\t\t\tlet authenticated = false;\n\t\t\t\tif (\n\t\t\t\t\tdisabled ||\n\t\t\t\t\t!this.state.validCheck ||\n\t\t\t\t\t( notUser && isUser ) ||\n\t\t\t\t\t( notOwner && isOwner ) ||\n\t\t\t\t\t( notEnrolled && isEnrolled )\n\t\t\t\t) {\n\t\t\t\t\treturn this.renderChildren( false );\n\t\t\t\t}\n\t\t\t\telse if ( !this.isTimeActive() ) {\n\t\t\t\t\treturn this.renderChildren( false );\n\t\t\t\t}\n\t\t\t\tif ( user && isUser ) {\n\t\t\t\t\tauthenticated = true;\n\t\t\t\t}\n\t\t\t\telse if ( enrolled && isEnrolled ) {\n\t\t\t\t\tauthenticated = true;\n\t\t\t\t}\n\t\t\t\telse if (\n\t\t\t\t\towner && isOwner &&\n\t\t\t\t\t(\n\t\t\t\t\t\tthis.props.showOwnerInPresentationMode ||\n\t\t\t\t\t\t!this.state.presentationMode\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tauthenticated = true;\n\t\t\t\t}\n\t\t\t\telse if ( !user && !owner && !enrolled ) {\n\t\t\t\t\tauthenticated = true;\n\t\t\t\t}\n\t\t\t\treturn this.renderChildren( authenticated );\n\t\t\t}}\n\t\t</RoleContext.Consumer> );\n\t}\n}\n\n\n// PROPERTIES //\n\nGate.defaultProps = {\n\tuser: false,\n\tnotUser: false,\n\tenrolled: false,\n\tnotEnrolled: false,\n\towner: false,\n\tnotOwner: false,\n\tafter: null,\n\tuntil: null,\n\tbanner: null,\n\tdisabled: false,\n\tshowOwnerInPresentationMode: false,\n\tcheck: null\n};\n\nGate.propTypes = {\n\tuser: PropTypes.bool,\n\tnotUser: PropTypes.bool,\n\tenrolled: PropTypes.bool,\n\tnotEnrolled: PropTypes.bool,\n\towner: PropTypes.bool,\n\tnotOwner: PropTypes.bool,\n\tafter: PropTypes.instanceOf( Date ),\n\tuntil: PropTypes.instanceOf( Date ),\n\tbanner: PropTypes.node,\n\tdisabled: PropTypes.bool,\n\tshowOwnerInPresentationMode: PropTypes.bool,\n\tcheck: PropTypes.func\n};\n\nGate.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default Gate;\n"],"names":["React","Gate","Component","constructor","props","context","super","this","state","isEnrolled","isOwner","validCheck","check","componentDidMount","_isMounted","session","unsubscribe","subscribe","type","action","RECEIVED_USER_RIGHTS","LOGGED_IN","LOGGED_OUT","TOGGLE_PRESENTATION_MODE","checkAuthorization","setState","forceUpdate","componentDidUpdate","componentWillUnmount","newState","presentationMode","isTimeActive","after","until","startTime","renderChildren","authenticated","Fragment","banner","className","style","display","children","render","currentRole","disabled","user","notUser","enrolled","notEnrolled","owner","notOwner","isUser","anonymous","showOwnerInPresentationMode","defaultProps","propTypes","PropTypes","Date","contextType","SessionContext"],"sourceRoot":""}