{"version":3,"sources":["../node_modules/anser/lib/index.js","../node_modules/ansi-to-react/lib/index.js","../node_modules/@isle-project/utils/format-error/index.js","../node_modules/@isle-project/components/internal/error-message/main.js","../node_modules/escape-carriage/index.js"],"names":[],"mappings":"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","file":"static/js/ErrorMessage.7ca6325e.chunk.js","sourcesContent":["\"use strict\";\n\n// This file was originally written by @drudru (https://github.com/drudru/ansi_up), MIT, 2011\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ANSI_COLORS = [[{ color: \"0, 0, 0\", \"class\": \"ansi-black\" }, { color: \"187, 0, 0\", \"class\": \"ansi-red\" }, { color: \"0, 187, 0\", \"class\": \"ansi-green\" }, { color: \"187, 187, 0\", \"class\": \"ansi-yellow\" }, { color: \"0, 0, 187\", \"class\": \"ansi-blue\" }, { color: \"187, 0, 187\", \"class\": \"ansi-magenta\" }, { color: \"0, 187, 187\", \"class\": \"ansi-cyan\" }, { color: \"255,255,255\", \"class\": \"ansi-white\" }], [{ color: \"85, 85, 85\", \"class\": \"ansi-bright-black\" }, { color: \"255, 85, 85\", \"class\": \"ansi-bright-red\" }, { color: \"0, 255, 0\", \"class\": \"ansi-bright-green\" }, { color: \"255, 255, 85\", \"class\": \"ansi-bright-yellow\" }, { color: \"85, 85, 255\", \"class\": \"ansi-bright-blue\" }, { color: \"255, 85, 255\", \"class\": \"ansi-bright-magenta\" }, { color: \"85, 255, 255\", \"class\": \"ansi-bright-cyan\" }, { color: \"255, 255, 255\", \"class\": \"ansi-bright-white\" }]];\n\nvar Anser = function () {\n    _createClass(Anser, null, [{\n        key: \"escapeForHtml\",\n\n\n        /**\n         * Anser.escapeForHtml\n         * Escape the input HTML.\n         *\n         * This does the minimum escaping of text to make it compliant with HTML.\n         * In particular, the '&','<', and '>' characters are escaped. This should\n         * be run prior to `ansiToHtml`.\n         *\n         * @name Anser.escapeForHtml\n         * @function\n         * @param {String} txt The input text (containing the ANSI snippets).\n         * @returns {String} The escaped html.\n         */\n        value: function escapeForHtml(txt) {\n            return new Anser().escapeForHtml(txt);\n        }\n\n        /**\n         * Anser.linkify\n         * Adds the links in the HTML.\n         *\n         * This replaces any links in the text with anchor tags that display the\n         * link. The links should have at least one whitespace character\n         * surrounding it. Also, you should apply this after you have run\n         * `ansiToHtml` on the text.\n         *\n         * @name Anser.linkify\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The HTML containing the <a> tags (unescaped).\n         */\n\n    }, {\n        key: \"linkify\",\n        value: function linkify(txt) {\n            return new Anser().linkify(txt);\n        }\n\n        /**\n         * Anser.ansiToHtml\n         * This replaces ANSI terminal escape codes with SPAN tags that wrap the\n         * content.\n         *\n         * This function only interprets ANSI SGR (Select Graphic Rendition) codes\n         * that can be represented in HTML.\n         * For example, cursor movement codes are ignored and hidden from output.\n         * The default style uses colors that are very close to the prescribed\n         * standard. The standard assumes that the text will have a black\n         * background. These colors are set as inline styles on the SPAN tags.\n         *\n         * Another option is to set `use_classes: true` in the options argument.\n         * This will instead set classes on the spans so the colors can be set via\n         * CSS. The class names used are of the format `ansi-*-fg/bg` and\n         * `ansi-bright-*-fg/bg` where `*` is the color name,\n         * i.e black/red/green/yellow/blue/magenta/cyan/white.\n         *\n         * @name Anser.ansiToHtml\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed to the ansiToHTML method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToHtml\",\n        value: function ansiToHtml(txt, options) {\n            return new Anser().ansiToHtml(txt, options);\n        }\n\n        /**\n         * Anser.ansiToJson\n         * Converts ANSI input into JSON output.\n         *\n         * @name Anser.ansiToJson\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed to the ansiToHTML method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToJson\",\n        value: function ansiToJson(txt, options) {\n            return new Anser().ansiToJson(txt, options);\n        }\n\n        /**\n         * Anser.ansiToText\n         * Converts ANSI input into text output.\n         *\n         * @name Anser.ansiToText\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The text output.\n         */\n\n    }, {\n        key: \"ansiToText\",\n        value: function ansiToText(txt) {\n            return new Anser().ansiToText(txt);\n        }\n\n        /**\n         * Anser\n         * The `Anser` class.\n         *\n         * @name Anser\n         * @function\n         * @returns {Anser}\n         */\n\n    }]);\n\n    function Anser() {\n        _classCallCheck(this, Anser);\n\n        this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;\n        this.bright = 0;\n    }\n\n    /**\n     * setupPalette\n     * Sets up the palette.\n     *\n     * @name setupPalette\n     * @function\n     */\n\n\n    _createClass(Anser, [{\n        key: \"setupPalette\",\n        value: function setupPalette() {\n            this.PALETTE_COLORS = [];\n\n            // Index 0..15 : System color\n            for (var i = 0; i < 2; ++i) {\n                for (var j = 0; j < 8; ++j) {\n                    this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);\n                }\n            }\n\n            // Index 16..231 : RGB 6x6x6\n            // https://gist.github.com/jasonm23/2868981#file-xterm-256color-yaml\n            var levels = [0, 95, 135, 175, 215, 255];\n            var format = function format(r, g, b) {\n                return levels[r] + \", \" + levels[g] + \", \" + levels[b];\n            };\n            var r = void 0,\n                g = void 0,\n                b = void 0;\n            for (var _r = 0; _r < 6; ++_r) {\n                for (var _g = 0; _g < 6; ++_g) {\n                    for (var _b = 0; _b < 6; ++_b) {\n                        this.PALETTE_COLORS.push(format(_r, _g, _b));\n                    }\n                }\n            }\n\n            // Index 232..255 : Grayscale\n            var level = 8;\n            for (var _i = 0; _i < 24; ++_i, level += 10) {\n                this.PALETTE_COLORS.push(format(level, level, level));\n            }\n        }\n\n        /**\n         * escapeForHtml\n         * Escapes the input text.\n         *\n         * @name escapeForHtml\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The escpaed HTML output.\n         */\n\n    }, {\n        key: \"escapeForHtml\",\n        value: function escapeForHtml(txt) {\n            return txt.replace(/[&<>]/gm, function (str) {\n                return str == \"&\" ? \"&amp;\" : str == \"<\" ? \"&lt;\" : str == \">\" ? \"&gt;\" : \"\";\n            });\n        }\n\n        /**\n         * linkify\n         * Adds HTML link elements.\n         *\n         * @name linkify\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The HTML output containing link elements.\n         */\n\n    }, {\n        key: \"linkify\",\n        value: function linkify(txt) {\n            return txt.replace(/(https?:\\/\\/[^\\s]+)/gm, function (str) {\n                return \"<a href=\\\"\" + str + \"\\\">\" + str + \"</a>\";\n            });\n        }\n\n        /**\n         * ansiToHtml\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToHtml\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed ot the `process` method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToHtml\",\n        value: function ansiToHtml(txt, options) {\n            return this.process(txt, options, true);\n        }\n\n        /**\n         * ansiToJson\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToJson\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed ot the `process` method.\n         * @returns {String} The JSON output.\n         */\n\n    }, {\n        key: \"ansiToJson\",\n        value: function ansiToJson(txt, options) {\n            options = options || {};\n            options.json = true;\n            options.clearLine = false;\n            return this.process(txt, options, true);\n        }\n\n        /**\n         * ansiToText\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToText\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The text output.\n         */\n\n    }, {\n        key: \"ansiToText\",\n        value: function ansiToText(txt) {\n            return this.process(txt, {}, false);\n        }\n\n        /**\n         * process\n         * Processes the input.\n         *\n         * @name process\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options An object passed to `processChunk` method, extended with:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup\n         */\n\n    }, {\n        key: \"process\",\n        value: function process(txt, options, markup) {\n            var _this = this;\n\n            var self = this;\n            var raw_text_chunks = txt.split(/\\033\\[/);\n            var first_chunk = raw_text_chunks.shift(); // the first chunk is not the result of the split\n\n            if (options === undefined || options === null) {\n                options = {};\n            }\n            options.clearLine = /\\r/.test(txt); // check for Carriage Return\n            var color_chunks = raw_text_chunks.map(function (chunk) {\n                return _this.processChunk(chunk, options, markup);\n            });\n\n            if (options && options.json) {\n                var first = self.processChunkJson(\"\");\n                first.content = first_chunk;\n                first.clearLine = options.clearLine;\n                color_chunks.unshift(first);\n                if (options.remove_empty) {\n                    color_chunks = color_chunks.filter(function (c) {\n                        return !c.isEmpty();\n                    });\n                }\n                return color_chunks;\n            } else {\n                color_chunks.unshift(first_chunk);\n            }\n\n            return color_chunks.join(\"\");\n        }\n\n        /**\n         * processChunkJson\n         * Processes the current chunk into json output.\n         *\n         * @name processChunkJson\n         * @function\n         * @param {String} text The input text.\n         * @param {Object} options An object containing the following fields:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup If false, the colors will not be parsed.\n         * @return {Object} The result object:\n         *\n         *  - `content` (String): The text.\n         *  - `fg` (String|null): The foreground color.\n         *  - `bg` (String|null): The background color.\n         *  - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).\n         *  - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).\n         *  - `clearLine` (Boolean): `true` if a carriageReturn \\r was fount at end of line.\n         *  - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.\n         *  - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.\n         *\n         */\n\n    }, {\n        key: \"processChunkJson\",\n        value: function processChunkJson(text, options, markup) {\n\n            // Are we using classes or styles?\n            options = typeof options == \"undefined\" ? {} : options;\n            var use_classes = options.use_classes = typeof options.use_classes != \"undefined\" && options.use_classes;\n            var key = options.key = use_classes ? \"class\" : \"color\";\n\n            var result = {\n                content: text,\n                fg: null,\n                bg: null,\n                fg_truecolor: null,\n                bg_truecolor: null,\n                clearLine: options.clearLine,\n                decoration: null,\n                was_processed: false,\n                isEmpty: function isEmpty() {\n                    return !result.content;\n                }\n            };\n\n            // Each \"chunk\" is the text after the CSI (ESC + \"[\") and before the next CSI/EOF.\n            //\n            // This regex matches four groups within a chunk.\n            //\n            // The first and third groups match code type.\n            // We supported only SGR command. It has empty first group and \"m\" in third.\n            //\n            // The second group matches all of the number+semicolon command sequences\n            // before the \"m\" (or other trailing) character.\n            // These are the graphics or SGR commands.\n            //\n            // The last group is the text (including newlines) that is colored by\n            // the other group\"s commands.\n            var matches = text.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);\n\n            if (!matches) return result;\n\n            var orig_txt = result.content = matches[4];\n            var nums = matches[2].split(\";\");\n\n            // We currently support only \"SGR\" (Select Graphic Rendition)\n            // Simply ignore if not a SGR command.\n            if (matches[1] !== \"\" || matches[3] !== \"m\") {\n                return result;\n            }\n\n            if (!markup) {\n                return result;\n            }\n\n            var self = this;\n\n            self.decoration = null;\n\n            while (nums.length > 0) {\n                var num_str = nums.shift();\n                var num = parseInt(num_str);\n\n                if (isNaN(num) || num === 0) {\n                    self.fg = self.bg = self.decoration = null;\n                } else if (num === 1) {\n                    self.decoration = \"bold\";\n                } else if (num === 2) {\n                    self.decoration = \"dim\";\n                    // Enable code 2 to get string\n                } else if (num == 3) {\n                    self.decoration = \"italic\";\n                } else if (num == 4) {\n                    self.decoration = \"underline\";\n                } else if (num == 5) {\n                    self.decoration = \"blink\";\n                } else if (num === 7) {\n                    self.decoration = \"reverse\";\n                } else if (num === 8) {\n                    self.decoration = \"hidden\";\n                    // Enable code 9 to get strikethrough\n                } else if (num === 9) {\n                    self.decoration = \"strikethrough\";\n                } else if (num == 39) {\n                    self.fg = null;\n                } else if (num == 49) {\n                    self.bg = null;\n                    // Foreground color\n                } else if (num >= 30 && num < 38) {\n                    self.fg = ANSI_COLORS[0][num % 10][key];\n                    // Foreground bright color\n                } else if (num >= 90 && num < 98) {\n                    self.fg = ANSI_COLORS[1][num % 10][key];\n                    // Background color\n                } else if (num >= 40 && num < 48) {\n                    self.bg = ANSI_COLORS[0][num % 10][key];\n                    // Background bright color\n                } else if (num >= 100 && num < 108) {\n                    self.bg = ANSI_COLORS[1][num % 10][key];\n                } else if (num === 38 || num === 48) {\n                    // extend color (38=fg, 48=bg)\n                    var is_foreground = num === 38;\n                    if (nums.length >= 1) {\n                        var mode = nums.shift();\n                        if (mode === \"5\" && nums.length >= 1) {\n                            // palette color\n                            var palette_index = parseInt(nums.shift());\n                            if (palette_index >= 0 && palette_index <= 255) {\n                                if (!use_classes) {\n                                    if (!this.PALETTE_COLORS) {\n                                        self.setupPalette();\n                                    }\n                                    if (is_foreground) {\n                                        self.fg = this.PALETTE_COLORS[palette_index];\n                                    } else {\n                                        self.bg = this.PALETTE_COLORS[palette_index];\n                                    }\n                                } else {\n                                    var klass = palette_index >= 16 ? \"ansi-palette-\" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8][\"class\"];\n                                    if (is_foreground) {\n                                        self.fg = klass;\n                                    } else {\n                                        self.bg = klass;\n                                    }\n                                }\n                            }\n                        } else if (mode === \"2\" && nums.length >= 3) {\n                            // true color\n                            var r = parseInt(nums.shift());\n                            var g = parseInt(nums.shift());\n                            var b = parseInt(nums.shift());\n                            if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n                                var color = r + \", \" + g + \", \" + b;\n                                if (!use_classes) {\n                                    if (is_foreground) {\n                                        self.fg = color;\n                                    } else {\n                                        self.bg = color;\n                                    }\n                                } else {\n                                    if (is_foreground) {\n                                        self.fg = \"ansi-truecolor\";\n                                        self.fg_truecolor = color;\n                                    } else {\n                                        self.bg = \"ansi-truecolor\";\n                                        self.bg_truecolor = color;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (self.fg === null && self.bg === null && self.decoration === null) {\n                return result;\n            } else {\n                var styles = [];\n                var classes = [];\n                var data = {};\n\n                result.fg = self.fg;\n                result.bg = self.bg;\n                result.fg_truecolor = self.fg_truecolor;\n                result.bg_truecolor = self.bg_truecolor;\n                result.decoration = self.decoration;\n                result.was_processed = true;\n\n                return result;\n            }\n        }\n\n        /**\n         * processChunk\n         * Processes the current chunk of text.\n         *\n         * @name processChunk\n         * @function\n         * @param {String} text The input text.\n         * @param {Object} options An object containing the following fields:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup If false, the colors will not be parsed.\n         * @return {Object|String} The result (object if `json` is wanted back or string otherwise).\n         */\n\n    }, {\n        key: \"processChunk\",\n        value: function processChunk(text, options, markup) {\n            var _this2 = this;\n\n            var self = this;\n            options = options || {};\n            var jsonChunk = this.processChunkJson(text, options, markup);\n\n            if (options.json) {\n                return jsonChunk;\n            }\n            if (jsonChunk.isEmpty()) {\n                return \"\";\n            }\n            if (!jsonChunk.was_processed) {\n                return jsonChunk.content;\n            }\n\n            var use_classes = options.use_classes;\n\n            var styles = [];\n            var classes = [];\n            var data = {};\n            var render_data = function render_data(data) {\n                var fragments = [];\n                var key = void 0;\n                for (key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        fragments.push(\"data-\" + key + \"=\\\"\" + _this2.escapeForHtml(data[key]) + \"\\\"\");\n                    }\n                }\n                return fragments.length > 0 ? \" \" + fragments.join(\" \") : \"\";\n            };\n\n            if (jsonChunk.fg) {\n                if (use_classes) {\n                    classes.push(jsonChunk.fg + \"-fg\");\n                    if (jsonChunk.fg_truecolor !== null) {\n                        data[\"ansi-truecolor-fg\"] = jsonChunk.fg_truecolor;\n                        jsonChunk.fg_truecolor = null;\n                    }\n                } else {\n                    styles.push(\"color:rgb(\" + jsonChunk.fg + \")\");\n                }\n            }\n\n            if (jsonChunk.bg) {\n                if (use_classes) {\n                    classes.push(jsonChunk.bg + \"-bg\");\n                    if (jsonChunk.bg_truecolor !== null) {\n                        data[\"ansi-truecolor-bg\"] = jsonChunk.bg_truecolor;\n                        jsonChunk.bg_truecolor = null;\n                    }\n                } else {\n                    styles.push(\"background-color:rgb(\" + jsonChunk.bg + \")\");\n                }\n            }\n\n            if (jsonChunk.decoration) {\n                if (use_classes) {\n                    classes.push(\"ansi-\" + jsonChunk.decoration);\n                } else if (jsonChunk.decoration === \"bold\") {\n                    styles.push(\"font-weight:bold\");\n                } else if (jsonChunk.decoration === \"dim\") {\n                    styles.push(\"opacity:0.5\");\n                } else if (jsonChunk.decoration === \"italic\") {\n                    styles.push(\"font-style:italic\");\n                    // underline and blink are treated bellow\n                } else if (jsonChunk.decoration === \"reverse\") {\n                    styles.push(\"filter:invert(100%)\");\n                } else if (jsonChunk.decoration === \"hidden\") {\n                    styles.push(\"visibility:hidden\");\n                } else if (jsonChunk.decoration === \"strikethrough\") {\n                    styles.push(\"text-decoration:line-through\");\n                } else {\n                    styles.push(\"text-decoration:\" + jsonChunk.decoration);\n                }\n            }\n\n            if (use_classes) {\n                return \"<span class=\\\"\" + classes.join(\" \") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n            } else {\n                return \"<span style=\\\"\" + styles.join(\";\") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n            }\n        }\n    }]);\n\n    return Anser;\n}();\n\n;\n\nmodule.exports = Anser;","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst anser_1 = __importDefault(require(\"anser\"));\nconst escape_carriage_1 = require(\"escape-carriage\");\nconst React = __importStar(require(\"react\"));\n/**\n * Converts ANSI strings into JSON output.\n * @name ansiToJSON\n * @function\n * @param {String} input The input string.\n * @param {boolean} use_classes If `true`, HTML classes will be appended\n *                              to the HTML output.\n * @return {Array} The parsed input.\n */\nfunction ansiToJSON(input, use_classes = false) {\n    input = escape_carriage_1.escapeCarriageReturn(fixBackspace(input));\n    return anser_1.default.ansiToJson(input, {\n        json: true,\n        remove_empty: true,\n        use_classes,\n    });\n}\n/**\n * Create a class string.\n * @name createClass\n * @function\n * @param {AnserJsonEntry} bundle\n * @return {String} class name(s)\n */\nfunction createClass(bundle) {\n    let classNames = \"\";\n    if (bundle.bg) {\n        classNames += `${bundle.bg}-bg `;\n    }\n    if (bundle.fg) {\n        classNames += `${bundle.fg}-fg `;\n    }\n    if (bundle.decoration) {\n        classNames += `ansi-${bundle.decoration} `;\n    }\n    if (classNames === \"\") {\n        return null;\n    }\n    classNames = classNames.substring(0, classNames.length - 1);\n    return classNames;\n}\n/**\n * Create the style attribute.\n * @name createStyle\n * @function\n * @param {AnserJsonEntry} bundle\n * @return {Object} returns the style object\n */\nfunction createStyle(bundle) {\n    const style = {};\n    if (bundle.bg) {\n        style.backgroundColor = `rgb(${bundle.bg})`;\n    }\n    if (bundle.fg) {\n        style.color = `rgb(${bundle.fg})`;\n    }\n    return style;\n}\n/**\n * Converts an Anser bundle into a React Node.\n * @param linkify whether links should be converting into clickable anchor tags.\n * @param useClasses should render the span with a class instead of style.\n * @param bundle Anser output.\n * @param key\n */\nfunction convertBundleIntoReact(linkify, useClasses, bundle, key) {\n    const style = useClasses ? null : createStyle(bundle);\n    const className = useClasses ? createClass(bundle) : null;\n    if (!linkify) {\n        return React.createElement(\"span\", { style, key, className }, bundle.content);\n    }\n    const content = [];\n    const linkRegex = /(\\s|^)(https?:\\/\\/(?:www\\.|(?!www))[^\\s.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/g;\n    let index = 0;\n    let match;\n    while ((match = linkRegex.exec(bundle.content)) !== null) {\n        const [, pre, url] = match;\n        const startIndex = match.index + pre.length;\n        if (startIndex > index) {\n            content.push(bundle.content.substring(index, startIndex));\n        }\n        // Make sure the href we generate from the link is fully qualified. We assume http\n        // if it starts with a www because many sites don't support https\n        const href = url.startsWith(\"www.\") ? `http://${url}` : url;\n        content.push(React.createElement(\"a\", {\n            key: index,\n            href,\n            target: \"_blank\",\n        }, `${url}`));\n        index = linkRegex.lastIndex;\n    }\n    if (index < bundle.content.length) {\n        content.push(bundle.content.substring(index));\n    }\n    return React.createElement(\"span\", { style, key, className }, content);\n}\nfunction Ansi(props) {\n    const { className, useClasses, children, linkify } = props;\n    return React.createElement(\"code\", { className }, ansiToJSON(children !== null && children !== void 0 ? children : \"\", useClasses !== null && useClasses !== void 0 ? useClasses : false).map(convertBundleIntoReact.bind(null, linkify !== null && linkify !== void 0 ? linkify : false, useClasses !== null && useClasses !== void 0 ? useClasses : false)));\n}\nexports.default = Ansi;\n// This is copied from the Jupyter Classic source code\n// notebook/static/base/js/utils.js to handle \\b in a way\n// that is **compatible with Jupyter classic**.   One can\n// argue that this behavior is questionable:\n//   https://stackoverflow.com/questions/55440152/multiple-b-doesnt-work-as-expected-in-jupyter#\nfunction fixBackspace(txt) {\n    let tmp = txt;\n    do {\n        txt = tmp;\n        // Cancel out anything-but-newline followed by backspace\n        tmp = txt.replace(/[^\\n]\\x08/gm, \"\");\n    } while (tmp.length < txt.length);\n    return txt;\n}\n","// MODULES //\n\nimport repeat from '@stdlib/string/repeat';\nimport max from '@stdlib/math/base/special/max';\n\n\n// VARIABLES //\n\nconst RE_ANSI = /[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))/g; // eslint-disable-line no-control-regex\nconst RE_DIGIT_COLON = /\\((\\d+):/;\nconst RE_LINE_DIGIT = /(\\n *)(\\d*) \\|/g;\nconst RE_LINE_WRAPPER_OPENING = /<LineWrapper tagName=\"[a-zA-Z0-9]+\" startLineNumber=\\{\\d+\\} endLineNumber=\\{\\d+\\} >/g;\nconst RE_LINE_WRAPPER_CLOSING = /<\\/LineWrapper>/g;\nconst RE_FRAGMENT = /<\\/?React.Fragment>/g;\nconst RE_STATUSBAR = /<StatusBar[^\\n]+\\n/;\nconst NUM_WRAPPER_LINES = 9;\n\n\n// MAIN //\n\n/**\n * Format an error message by adjusting line numbers and removing hidden code.\n *\n * @param {string} msg - error message\n * @returns {string} formatted error message\n */\nconst formatError = ( msg ) => {\n\tmsg = msg.replace( RE_ANSI, '\\n' );\n\tmsg = msg.replace( RE_STATUSBAR, '\\n' );\n\tmsg = msg.replace( '</Lesson>', '' );\n\tmsg = msg.replace( RE_DIGIT_COLON, ( match, p1 ) => {\n\t\tconst line = String( parseInt( p1, 10 )-NUM_WRAPPER_LINES );\n\t\treturn '(' + line + ':';\n\t});\n\tmsg = msg.replace( RE_LINE_DIGIT, ( match, p1, p2 ) => {\n\t\tconst line = p2 ? String( parseInt( p2, 10 )-NUM_WRAPPER_LINES ) : '';\n\t\tconst spaces = repeat( ' ', max( p2.length - line.length, 0 ) );\n\t\treturn p1 + spaces + line + ' |';\n\t});\n\tmsg = msg.replace( RE_LINE_WRAPPER_OPENING, '' );\n\tmsg = msg.replace( RE_LINE_WRAPPER_CLOSING, '' );\n\tmsg = msg.replace( RE_FRAGMENT, '' );\n\tmsg = msg.replace( '&lt;', '<' );\n\tmsg = msg.replace( '&gt;', '>' );\n\treturn msg;\n};\n\n\n// EXPORTS //\n\nexport default formatError;\n","// MODULES //\n\nimport React, { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Ansi from 'ansi-to-react';\nimport formatError from '@isle-project/utils/format-error';\nimport Tooltip from '@isle-project/components/tooltip';\nimport './error_message.css';\n\n\n// MAIN //\n\nconst ErrorMessage = ( props ) => {\n\tconst { t } = useTranslation( 'general' );\n\tconst [ showStack, setShowStack ] = useState( false );\n\tconst toggleStack = useCallback( () => {\n\t\tsetShowStack( !showStack );\n\t}, [ showStack ] );\n\tlet title = t('error-encountered');\n\tif ( props.componentName ) {\n\t\ttitle += ` ${t('in')} <${props.componentName} />`;\n\t}\n\treturn ( <Card className=\"error-boundary-message\">\n\t\t<Card.Body>\n\t\t\t<h3>{title}</h3>\n\t\t\t<pre>\n\t\t\t\t<Ansi>{formatError( showStack ? props.error.stack : props.error.message )}</Ansi>\n\t\t\t</pre>\n\t\t\t<ButtonGroup style={{ position: 'absolute', top: 12, right: 22 }} >\n\t\t\t\t<Tooltip tooltip={t('toggle-error-stack-trace')} placement=\"left\" >\n\t\t\t\t\t<Button aria-label={t('toggle-error-stack-trace')} variant=\"outline-secondary\" onClick={toggleStack} >\n\t\t\t\t\t\t<i className=\"fas fa-layer-group\"></i>\n\t\t\t\t\t</Button>\n\t\t\t\t</Tooltip>\n\t\t\t\t<Tooltip tooltip={t('retry')}>\n\t\t\t\t\t<Button aria-label={t('retry')} variant=\"outline-secondary\" onClick={props.resetError} >\n\t\t\t\t\t\t<i className=\"fas fa-redo\"></i>\n\t\t\t\t\t</Button>\n\t\t\t\t</Tooltip>\n\t\t\t</ButtonGroup>\n\t\t</Card.Body>\n\t</Card> );\n};\n\n\n// EXPORTS //\n\nexport default ErrorMessage;\n","/**\n * Escape carrigage returns like a terminal\n * @param {string} txt - String to escape.\n * @return {string}    - Escaped string.\n */\nfunction escapeCarriageReturn(txt) {\n  if (!txt) return \"\";\n  if (!/\\r/.test(txt)) return txt;\n  txt = txt.replace(/\\r+\\n/gm, \"\\n\"); // \\r followed by \\n --> newline\n  while (/\\r[^$]/.test(txt)) {\n    var base = /^(.*)\\r+/m.exec(txt)[1];\n    var insert = /\\r+(.*)$/m.exec(txt)[1];\n    insert = insert + base.slice(insert.length, base.length);\n    txt = txt.replace(/\\r+.*$/m, \"\\r\").replace(/^.*\\r/m, insert);\n  }\n  return txt;\n}\n\nfunction findLongestString(arr) {\n  var longest = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[longest].length <= arr[i].length) {\n      longest = i;\n    }\n  }\n  return longest;\n}\n\nfunction escapeSingleLineSafe(txt) {\n  if (!/\\r/.test(txt)) return txt;\n  var arr = txt.split(\"\\r\");\n  var res = [];\n\n  while (arr.length > 0) {\n    var longest = findLongestString(arr);\n    res.push(arr[longest]);\n    arr = arr.slice(longest + 1);\n  }\n\n  return res.join(\"\\r\");\n}\n\n/**\n * Safely escape carrigage returns like a terminal.\n * This allows to escape carrigage returns while allowing future output to be appended\n * without loosing information.\n * Use this as a intermediate escape step if your stream hasn't completed yet.\n * @param {string} txt - String to escape.\n * @return {string}    - Escaped string.\n */\nfunction escapeCarriageReturnSafe(txt) {\n  if (!txt) return \"\";\n  if (!/\\r/.test(txt)) return txt;\n  if (!/\\n/.test(txt)) return escapeSingleLineSafe(txt);\n  txt = txt.replace(/\\r+\\n/gm, \"\\n\"); // \\r followed by \\n --> newline\n  var idx = txt.lastIndexOf(\"\\n\");\n\n  return (\n    escapeCarriageReturn(txt.slice(0, idx)) +\n    \"\\n\" +\n    escapeSingleLineSafe(txt.slice(idx + 1))\n  );\n}\n\nmodule.exports = escapeCarriageReturn;\nmodule.exports.escapeCarriageReturn = escapeCarriageReturn;\nmodule.exports.escapeCarriageReturnSafe = escapeCarriageReturnSafe;\n"],"sourceRoot":""}