{"version":3,"sources":["../node_modules/@isle-project/components/color-picker/main.js"],"names":[],"mappings":"i/EASA,KAAM,cAAe,8EAAU,IAAM,6JAC/B,cAAgB,8EAAU,IAAM,6JAChC,eAAiB,8EAAU,IAAM,6JACjC,YAAc,8EAAU,IAAM,6JAM9B,kBAAsB,aAAiB,CAC5C,KAAM,CAAE,KAAM,SAAY,gDAAU,IAC9B,OAAS,8CAAQ,MACjB,YAAc,mDAAa,IAAM,CACtC,QAAS,CAAC,OACR,CAAE,OACL,MACC,kDAAC,4CAAD,KACC,iDAAC,8DAAD,CAAQ,IAAK,OAAQ,KAAK,KAAK,MAAO,CACrC,gBAAiB,YAAY,MAAO,MAAO,GAAI,OAAQ,IACrD,QAAS,cAEV,KAAO,iDAAC,+DAAD,CAAS,OAAQ,OAAO,QAAS,KAAY,UAAU,SAC9D,IAA0D,CAA1D,UAAE,WAAW,WAAY,KAAM,MAAO,QAAtC,GAAiD,gBAAjD,GAAiD,CAA/C,YAAW,aAAY,OAAa,WACvC,wDAAC,+DAAD,gCAAa,OAAb,CAAoB,GAAI,GAAG,MAAM,kBAAmB,MAAO,gBAAE,OAAQ,MAAS,MAAM,SACnF,iDAAC,mEAAD,KACC,iDAAC,aAAD,kBAAkB,kBAIR,OAqBV,YAAgB,OAAW,CAChC,GAAI,aACJ,OAAS,MAAM,aACT,QACJ,YAAc,iDAAC,YAAD,kBAAiB,QAC/B,UACI,UACJ,YAAc,iDAAC,cAAD,kBAAmB,QACjC,UACI,WACJ,YAAc,iDAAC,eAAD,kBAAoB,QAClC,UACI,SAAU,CACd,YAAc,iDAAC,kBAAD,kBAAuB,QACrC,UAEI,iBAEJ,YAAc,iDAAC,aAAD,kBAAkB,QAChC,MAEF,MACC,kDAAC,MAAD,CAAK,UAAW,MAAM,UAAW,MAAO,gBAAE,MAAO,cAAe,OAAQ,UAAa,MAAM,QACzF,cAQJ,YAAY,UAAY,CACvB,QAAS,wDAAgB,CACxB,SAAU,WAAY,QAAS,UAAW,WAE3C,MAAO,4DAAoB,CAC1B,yDACA,2DAED,aAAc,uDACd,aAAc,0DAAmB,0DACjC,MAAO,yDACP,UAAW,yDACX,MAAO,yDACP,SAAU,uDACV,iBAAkB,wDAGnB,YAAY,aAAe,CAC1B,QAAS,SACT,MAAO,OACP,aAAc,GACd,aAAc,CAAE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC1K,MAAO,IACP,UAAW,GACX,MAAO,GACP,UAAW,GACX,kBAAmB,IAMpB,4BAAe,kEAAe,4CAAM","file":"static/js/ColorPicker.facaa6c4.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { Fragment, memo, useCallback, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverBody from 'react-bootstrap/PopoverBody';\nimport Loadable from '@isle-project/components/internal/loadable';\nconst SketchPicker = Loadable( () => import( 'react-color/lib/components/sketch/Sketch' ) );\nconst CompactPicker = Loadable( () => import( 'react-color/lib/components/compact/Compact' ) );\nconst MaterialPicker = Loadable( () => import( 'react-color/lib/components/material/Material' ) );\nconst BlockPicker = Loadable( () => import( 'react-color/lib/components/block/Block' ) );\nimport { withPropCheck } from '@isle-project/utils/prop-check';\n\n\n// FUNCTIONS //\n\nconst ButtonColorPicker = ( pickerProps ) => {\n\tconst [ show, setShow ] = useState( false );\n\tconst target = useRef( null );\n\tconst handleClick = useCallback( () => {\n\t\tsetShow( !show );\n\t}, [ show ] );\n\treturn (\n\t\t<Fragment>\n\t\t\t<Button ref={target} size=\"sm\" style={{\n\t\t\t\tbackgroundColor: pickerProps.color, width: 38, height: 38\n\t\t\t}} onClick={handleClick} >\n\t\t\t</Button>\n\t\t\t{ show ? <Overlay target={target.current} show={show} placement=\"right\" >\n\t\t\t{({ placement, arrowProps, show: _show, popper, ...props }) => (\n\t\t\t\t<Popover {...props} id={`${props.variant}-popover`} style={{ zIndex: 1051, ...props.style }} >\n\t\t\t\t\t<PopoverBody>\n\t\t\t\t\t\t<SketchPicker {...pickerProps} />\n\t\t\t\t\t</PopoverBody>\n\t\t\t\t</Popover>\n\t\t\t)}\n\t\t\t</Overlay> : null }\n\t\t</Fragment>\n\t);\n};\n\n\n// MAIN //\n\n/**\n* A wrapper for the [react-color](https://casesandberg.github.io/react-color/) color picker.\n*\n* @property {string} variant - color picker variant (either `Compact`, `Sketch`, `Material`, `Button`, or `Block`)\n* @property {(string|Object)} color - `string` holding an HeX code or an `object` holding RGB or HSL values such as `{ r: 255, g: 255, b: 255 }` or `{ h: 0, s: 0, l: .10 }`, which determines the active color. Both accept an `a` property for alpha values other than one\n* @property {boolean} disableAlpha - controls whether to remove alpha slider and options\n* @property {Array<string>} presetColors - HeX `strings` specifying the default colors at the bottom of the colorpicker\n* @property {number} width - width of the color picker (in px)\n* @property {string} className - class name\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback invoked every time color is changed\n* @property {Function} onChangeComplete - callback invoked once a color change is complete\n*/\nconst ColorPicker = ( props ) => {\n\tlet colorPicker;\n\tswitch ( props.variant ) {\n\t\tcase 'Block':\n\t\t\tcolorPicker = <BlockPicker {...props} />;\n\t\t\tbreak;\n\t\tcase 'Compact':\n\t\t\tcolorPicker = <CompactPicker {...props} />;\n\t\t\tbreak;\n\t\tcase 'Material':\n\t\t\tcolorPicker = <MaterialPicker {...props} />;\n\t\t\tbreak;\n\t\tcase 'Button': {\n\t\t\tcolorPicker = <ButtonColorPicker {...props} />;\n\t\t\tbreak;\n\t\t}\n\t\tcase 'Sketch':\n\t\tdefault:\n\t\t\tcolorPicker = <SketchPicker {...props} />;\n\t\t\tbreak;\n\t}\n\treturn (\n\t\t<div className={props.className} style={{ width: 'fit-content', margin: '0 auto', ...props.style }}>\n\t\t\t{colorPicker}\n\t\t</div>\n\t);\n};\n\n\n// PROPERTIES //\n\nColorPicker.propTypes = {\n\tvariant: PropTypes.oneOf([\n\t\t'Sketch', 'Material', 'Block', 'Compact', 'Button'\n\t]),\n\tcolor: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.object\n\t]),\n\tdisableAlpha: PropTypes.bool,\n\tpresetColors: PropTypes.arrayOf( PropTypes.string ),\n\twidth: PropTypes.number,\n\tclassName: PropTypes.string,\n\tstyle: PropTypes.object,\n\tonChange: PropTypes.func,\n\tonChangeComplete: PropTypes.func\n};\n\nColorPicker.defaultProps = {\n\tvariant: 'Sketch',\n\tcolor: '#fff',\n\tdisableAlpha: false,\n\tpresetColors: [ '#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF' ],\n\twidth: 200,\n\tclassName: '',\n\tstyle: {},\n\tonChange() {},\n\tonChangeComplete() {}\n};\n\n\n// EXPORTS //\n\nexport default withPropCheck( memo( ColorPicker ) );\n"],"sourceRoot":""}