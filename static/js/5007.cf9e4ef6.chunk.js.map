{"version":3,"file":"static/js/5007.cf9e4ef6.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/input/text-area/main.js","../node_modules/@isle-project/components/input/text-area/index.js","../node_modules/@isle-project/components/input/text/main.js","../node_modules/@isle-project/components/input/text/index.js"],"sourcesContent":["// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","// MODULES //\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport FormControl from 'react-bootstrap/FormControl';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport generateUID from '@isle-project/utils/uid';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'text-area' );\n\n\n// MAIN //\n\n/**\n* A text area component. Used as a stand-alone component, changes should be handled via the `onChange` attribute.\n*\n* @property {string} defaultValue - default value of the text area\n* @property {string} value - text value (for controlled component)\n* @property {boolean} disabled - controls whether the text area shall be disabled\n* @property {string} legend - legend text\n* @property {string} placeholder - placeholder text\n* @property {string} resizable - controls whether the text area shall be resizable (can be either `both`, `horizontal`, `vertical`, or `none`)\n* @property {number} rows - number of rows\n* @property {Object} style - CSS inline styles\n* @property {Function} onBlur - callback function invoked when the text area loses focus\n* @property {Function} onChange - callback function invoked with the new text when the area text changes\n*/\nconst TextArea = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { defaultValue, placeholder, onChange } = props;\n\tconst [ value, setValue ] = useState( props.value || defaultValue );\n\tconst { t } = useTranslation( 'input' );\n\tconst textarea = useRef();\n\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ]);\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tsetValue( event.target.value );\n\t\tonChange( event.target.value );\n\t}, [ onChange ] );\n\n\tlet legend;\n\tif ( props.legend ) {\n\t\tlegend = <FormLabel htmlFor={id} >\n\t\t\t{props.legend}\n\t\t</FormLabel>;\n\t}\n\treturn (\n\t\t<FormGroup className=\"input\" id={`${id}-form`} >\n\t\t\t{legend}\n\t\t\t<FormControl\n\t\t\t\tid={id}\n\t\t\t\tas=\"textarea\"\n\t\t\t\tplaceholder={isString( placeholder ) ? placeholder : t('enter-text')}\n\t\t\t\tref={div => { textarea.current = div; }}\n\t\t\t\tonBlur={props.onBlur}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tstyle={{\n\t\t\t\t\tresize: props.resizable,\n\t\t\t\t\t...props.style\n\t\t\t\t}}\n\t\t\t\trows={props.rows}\n\t\t\t\tvalue={props.value !== null ? props.value : value}\n\t\t\t\tdisabled={props.disabled}\n\t\t\t/>\n\t\t</FormGroup>\n\t);\n};\n\n\n// PROPERTIES //\n\nTextArea.defaultProps = {\n\tdefaultValue: '',\n\tvalue: null,\n\tdisabled: false,\n\tlegend: '',\n\tonBlur() {},\n\tonChange() {},\n\tplaceholder: null,\n\tresizable: 'none',\n\trows: 5,\n\tstyle: {}\n};\n\nTextArea.propTypes = {\n\tdefaultValue: PropTypes.string,\n\tvalue: PropTypes.string,\n\tdisabled: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tplaceholder: PropTypes.string,\n\tresizable: PropTypes.string,\n\trows: PropTypes.number,\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default TextArea;\n","// MODULES //\n\nimport TextArea from './main.js';\n\n\n// EXPORTS //\n\nexport default TextArea;\n","// MODULES //\n\nimport React, { useCallback, useRef, useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport generateUID from '@isle-project/utils/uid';\nimport SessionContext from '@isle-project/session/context.js';\nimport './text.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'text-input' );\n\n\n// MAIN //\n\n/**\n* A text input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {Function} onChange - function to be called when a text value is changed\n* @property {string} defaultValue - value indicating the default value of the input at start\n* @property {string} value - text value (for controlled component)\n* @property {number} width - number indicating the width of the input in pixels\n* @property {boolean} inline - Indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {string} placeholder - string indicating the value to be displayed before an initial choice is made\n* @property {Object} style - CSS inline styles\n* @property {Function} onBlur - callback function invoked when the text area loses focus\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst TextInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst { bind, defaultValue, placeholder, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst [ value, setValue ] = useState(\n\t\tprops.bind && session.state ? session.state[ props.bind ]: props.defaultValue\n\t);\n\tconst textInput = useRef();\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ]);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ]);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst value = event.target.value;\n\t\tonChange( value );\n\t\tsetValue( value );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: value\n\t\t\t});\n\t\t}\n\t}, [ bind, onChange ] );\n\n\tif ( props.inline ) {\n\t\treturn (\n\t\t\t<span className=\"input\" style={props.style} >\n\t\t\t\t{ props.legend ? <label htmlFor={id} >\n\t\t\t\t\t{props.legend}:\n\t\t\t\t</label> : <span /> }\n\t\t\t\t<input\n\t\t\t\t\tid={id}\n\t\t\t\t\tclassName=\"text-inline-input\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tplaceholder={isString( placeholder ) ? placeholder : t('enter-text')}\n\t\t\t\t\tvalue={props.value !== null ? props.value : value}\n\t\t\t\t\tref={( input ) => {\n\t\t\t\t\t\ttextInput.current = input;\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: props.width\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> ({props.description}) </span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<div className=\"input text-container-div\" style={props.style} >\n\t\t\t<span>\n\t\t\t\t{ props.legend ?\n\t\t\t\t\t<label htmlFor={id} >{props.legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>\n\t\t\t<input\n\t\t\t\tid={id}\n\t\t\t\tclassName=\"text-input\"\n\t\t\t\ttype=\"text\"\n\t\t\t\tname=\"input\"\n\t\t\t\tplaceholder={isString( placeholder ) ? placeholder : t('enter-text')}\n\t\t\t\tvalue={props.value !== null ? props.value : value}\n\t\t\t\tref={( input ) => {\n\t\t\t\t\ttextInput.current = input;\n\t\t\t\t}}\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: props.width\n\t\t\t\t}}\n\t\t\t\tonBlur={props.onBlur}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n\n// PROPERTIES //\n\nTextInput.defaultProps = {\n\tbind: null,\n\tdefaultValue: '',\n\tvalue: null,\n\tlegend: '',\n\twidth: 80,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tplaceholder: null,\n\tstyle: {}\n};\n\nTextInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.string,\n\tvalue: PropTypes.string,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tinline: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tplaceholder: PropTypes.string,\n\twidth: PropTypes.number,\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default TextInput;\n","// MODULES //\n\nimport TextInput from './main.js';\n\n\n// EXPORTS //\n\nexport default TextInput;\n"],"names":["uid","generateUID","CheckboxInput","props","bind","defaultValue","disabled","onChange","id","useRef","session","useContext","SessionContext","useState","state","value","setValue","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","className","type","tooltip","inline","placement","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onClick","onKeyPress","legend","onSpanChange","noop","defaultProps","min","max","step","t","PINF","NINF","debug","logger","NumberInput","propValue","onBlur","useTranslation","isNumber","valid","validity","parseFloat","isnan","finishChange","contains","splitted","split","isNull","createTooltip","padding","htmlFor","numbersOnly","name","width","paddingLeft","inputStyle","onKeyDown","onKeyUp","autoComplete","description","show","marginBottom","marginTop","isString","TextArea","placeholder","textarea","FormLabel","FormGroup","FormControl","as","ref","div","resize","resizable","rows","TextInput","textInput"],"sourceRoot":""}