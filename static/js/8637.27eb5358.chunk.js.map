{"version":3,"file":"static/js/8637.27eb5358.chunk.js","mappings":";uHAyCA,IAAIA,EAAW,EAAQ,OAGvBC,EAAOC,QAAUF,yBCzBjB,IAAIG,EAAc,EAAQ,OAEtBC,EAAa,EAAQ,OAErBC,EAAe,EAAQ,OAEvBC,EAAiB,EAAQ,MAsJ7BL,EAAOC,QA1HP,SAASK,EAAeC,GACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAKR,EAAaG,GAChB,MAAM,IAAIM,UAAU,0EAA4EN,EAAM,MAGxG,GAAIO,UAAUC,OAAS,EAAG,CAGxB,IAAKZ,EAFLQ,EAAMG,UAAU,IAGd,MAAM,IAAID,UAAU,iEAAmEF,EAAM,MAG/FH,EAAUM,UAAU,GAmBtB,OAhBAF,GAAK,EAKHV,EAHFO,EAAO,GAGa,OADhBE,EACwBK,EAEAC,GAG5Bf,EAAYO,EAAM,SAAUS,GAExBb,GACFH,EAAYO,EAAMJ,EAAgBc,GAG7BV,EAQP,SAASO,IAGP,OAFAJ,GAAK,EAEDF,GAAOE,GAAKL,EAAIQ,OACX,CACL,MAAQ,GAIL,CACL,MAASJ,EAAIS,KAAKZ,EAASD,EAAIK,GAAIA,EAAGL,GACtC,MAAQ,GAWZ,SAASU,IAGP,OAFAL,GAAK,EAEDF,GAAOE,GAAKL,EAAIQ,OACX,CACL,MAAQ,GAIL,CACL,MAASR,EAAIK,GACb,MAAQ,GAYZ,SAASM,EAAIG,GAGX,OAFAX,GAAM,EAEFI,UAAUC,OACL,CACL,MAASM,EACT,MAAQ,GAIL,CACL,MAAQ,GAWZ,SAASF,IACP,OAAIR,EACKL,EAAeC,EAAKI,EAAKH,GAG3BF,EAAeC,4BC3I1B,IAAIe,EAA2B,EAAQ,OAGvCtB,EAAOC,QAAUqB,yBCfjB,IAAIC,EAAa,EAAQ,OAkBzBvB,EAAOC,QALP,WACE,MAAyB,oBAAXuB,QAAkD,kBAAlBA,OAAO,QAAuBD,EAAWC,OAAQ,aAA0C,kBAApBA,OAAOzB,iCCI9H,IAAI0B,EAAa,EAAQ,OAGzBzB,EAAOC,QAAUwB,yBCrBjB,IAAItB,EAAa,EAAQ,OA8BzBH,EAAOC,QALP,SAAwBoB,GACtB,OAAiB,OAAVA,GAAmC,kBAAVA,GAAsBlB,EAAWkB,EAAMK,OAA+B,IAAtBL,EAAMK,KAAKX,+BCF7F,IAAIY,EAAO,EAAQ,OAGnB3B,EAAOC,QAAU0B,qBCHjB,IAAIA,EAAOC,KAAKD,KAGhB3B,EAAOC,QAAU0B,yBCJjB,IAAIE,EAAW,EAAQ,OAGvB7B,EAAOC,QAAU4B,qBCuCjB7B,EAAOC,QA9BP,WACE,IAAI6B,EACAC,EAGJ,OAFAD,EAAK,EACLC,EAAI,EAUJ,SAAqBC,GACnB,GAAyB,IAArBlB,UAAUC,OACZ,OAAU,IAANgB,EACK,KAGFD,EAKT,OADAA,IAAOE,EAAIF,IADXC,GAAK,4BCnCT,IAAIE,EAAY,EAAQ,OAGxBjC,EAAOC,QAAUgC,yBC1BjB,IAAIC,EAAW,qBAEXP,EAAO,EAAQ,OAEfQ,EAAQ,EAAQ,OAiJpBnC,EAAOC,QA7EP,SAAmBmC,GACjB,IAAIC,EACAP,EACAQ,EACAP,EAIJ,GAHAO,EAAK,EACLP,EAAI,EAEAjB,UAAUC,OAAQ,CACpB,IAAKmB,EAASE,GACZ,MAAM,IAAIvB,UAAU,8DAAgEuB,EAAO,MAI7F,OADAN,EAAKM,EACEG,EAIT,OADAT,EAAK,EACEU,EASP,SAASA,EAAaR,GACpB,OAAyB,IAArBlB,UAAUC,OACF,IAANgB,EACK,KAGC,IAANA,EACKI,EAAMG,GAAMG,IAAM,EAGpBd,EAAKW,GAAMP,EAAI,KAMxBO,IAFAD,EAAQL,EAAIF,IAEGE,GADfF,GAAMO,GAFNN,GAAK,KAKDA,EAAI,EACCI,EAAMG,GAAMG,IAAM,EAGpBd,EAAKW,GAAMP,EAAI,KAWxB,SAASQ,EAAaP,GACpB,OAAyB,IAArBlB,UAAUC,OACF,IAANgB,EACK,KAGFJ,EAAKW,EAAKP,GAMZJ,GADPW,IADAD,EAAQL,EAAIF,GACEO,IAFdN,GAAK,6BC5HT,IAAIW,EAAO,EAAQ,OAGnB1C,EAAOC,QAAUyC,yBCpBjB,IAAIC,EAAiB,EAAQ,OAEzBpB,EAAa,EAAQ,OAErBM,EAAW,EAAQ,OAiDvB7B,EAAOC,QA5BP,SAAkBF,GAChB,IAAI6C,EACAC,EAEJ,IAAKF,EAAe5C,GAClB,MAAM,IAAIc,UAAU,uDAAyDd,EAAW,MAK1F,IAFA6C,EAAMf,IAKmB,kBAFvBgB,EAAI9C,EAAS2B,QAEAL,MACXuB,EAAIC,EAAExB,OACGE,EAAWsB,EAAG,UACvBD,EAAIH,MAGFI,EAAEC,OAKR,OAAOF,4BChCT,IAAIF,EAAO,EAAQ,OAGnB1C,EAAOC,QAAUyC,yBCpBjB,IAAIC,EAAiB,EAAQ,OAEzBpB,EAAa,EAAQ,OAErBW,EAAW,qBAEXD,EAAY,EAAQ,OA2DxBjC,EAAOC,QApCP,SAAmBF,EAAUqC,GAC3B,IAAIQ,EACAC,EAEJ,IAAKF,EAAe5C,GAClB,MAAM,IAAIc,UAAU,iEAAmEd,EAAW,MAGpG,GAAIe,UAAUC,OAAS,EAAG,CACxB,IAAKmB,EAASE,GACZ,MAAM,IAAIvB,UAAU,yEAA2EuB,EAAO,MAGxGQ,EAAMX,EAAUG,QAEhBQ,EAAMX,IAGR,KAGyB,kBAFvBY,EAAI9C,EAAS2B,QAEAL,MACXuB,EAAIC,EAAExB,OACGE,EAAWsB,EAAG,UACvBD,EAAIH,MAGFI,EAAEC,OAKR,OAAOF,2BCdT,IAAIG,EAAiB,EAAQ,OAG7B/C,EAAOC,QAAU8C,yBClDjB,IAkDIA,EAlD2B,EAAQ,MAkDlBzB,GAA6BE,OAAOzB,SAAW,KAEpEC,EAAOC,QAAU8C","sources":["../node_modules/@stdlib/array/to-iterator/lib/index.js","../node_modules/@stdlib/array/to-iterator/lib/main.js","../node_modules/@stdlib/assert/has-iterator-symbol-support/lib/index.js","../node_modules/@stdlib/assert/has-iterator-symbol-support/lib/main.js","../node_modules/@stdlib/assert/is-iterator-like/lib/index.js","../node_modules/@stdlib/assert/is-iterator-like/lib/main.js","../node_modules/@stdlib/math/base/special/sqrt/lib/index.js","../node_modules/@stdlib/math/base/special/sqrt/lib/main.js","../node_modules/@stdlib/stats/incr/mean/lib/index.js","../node_modules/@stdlib/stats/incr/mean/lib/main.js","../node_modules/@stdlib/stats/incr/stdev/lib/index.js","../node_modules/@stdlib/stats/incr/stdev/lib/main.js","../node_modules/@stdlib/stats/iter/mean/lib/index.js","../node_modules/@stdlib/stats/iter/mean/lib/main.js","../node_modules/@stdlib/stats/iter/stdev/lib/index.js","../node_modules/@stdlib/stats/iter/stdev/lib/main.js","../node_modules/@stdlib/symbol/iterator/lib/index.js","../node_modules/@stdlib/symbol/iterator/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Create an iterator from an array-like object.\n*\n* @module @stdlib/array/to-iterator\n*\n* @example\n* var array2iterator = require( '@stdlib/array/to-iterator' );\n*\n* var iter = array2iterator( [ 1, 2, 3, 4 ] );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\n// MODULES //\n\nvar iterator = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = iterator;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar setReadOnly = require('@stdlib/utils/define-nonenumerable-read-only-property');\n\nvar isFunction = require('@stdlib/assert/is-function');\n\nvar isCollection = require('@stdlib/assert/is-collection');\n\nvar iteratorSymbol = require('@stdlib/symbol/iterator'); // MAIN //\n\n/**\n* Returns an iterator which iterates over each element in an array-like object.\n*\n* @param {Collection} src - input value\n* @param {Function} [mapFcn] - function to invoke for each iterated value\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} second argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = array2iterator( [ 1, 2, 3, 4 ] );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 3\n*\n* // ...\n*/\n\n\nfunction array2iterator(src) {\n  var thisArg;\n  var iter;\n  var FLG;\n  var fcn;\n  var i;\n\n  if (!isCollection(src)) {\n    throw new TypeError('invalid argument. First argument must be an array-like object. Value: `' + src + '`.');\n  }\n\n  if (arguments.length > 1) {\n    fcn = arguments[1];\n\n    if (!isFunction(fcn)) {\n      throw new TypeError('invalid argument. Second argument must be a function. Value: `' + fcn + '`.');\n    }\n\n    thisArg = arguments[2];\n  }\n\n  i = -1; // Create an iterator protocol-compliant object:\n\n  iter = {};\n\n  if (fcn) {\n    setReadOnly(iter, 'next', next1);\n  } else {\n    setReadOnly(iter, 'next', next2);\n  }\n\n  setReadOnly(iter, 'return', end); // If an environment supports `Symbol.iterator`, make the iterator iterable:\n\n  if (iteratorSymbol) {\n    setReadOnly(iter, iteratorSymbol, factory);\n  }\n\n  return iter;\n  /**\n  * Returns an iterator protocol-compliant object containing the next iterated value.\n  *\n  * @private\n  * @returns {Object} iterator protocol-compliant object\n  */\n\n  function next1() {\n    i += 1;\n\n    if (FLG || i >= src.length) {\n      return {\n        'done': true\n      };\n    }\n\n    return {\n      'value': fcn.call(thisArg, src[i], i, src),\n      'done': false\n    };\n  }\n  /**\n  * Returns an iterator protocol-compliant object containing the next iterated value.\n  *\n  * @private\n  * @returns {Object} iterator protocol-compliant object\n  */\n\n\n  function next2() {\n    i += 1;\n\n    if (FLG || i >= src.length) {\n      return {\n        'done': true\n      };\n    }\n\n    return {\n      'value': src[i],\n      'done': false\n    };\n  }\n  /**\n  * Finishes an iterator.\n  *\n  * @private\n  * @param {*} [value] - value to return\n  * @returns {Object} iterator protocol-compliant object\n  */\n\n\n  function end(value) {\n    FLG = true;\n\n    if (arguments.length) {\n      return {\n        'value': value,\n        'done': true\n      };\n    }\n\n    return {\n      'done': true\n    };\n  }\n  /**\n  * Returns a new iterator.\n  *\n  * @private\n  * @returns {Iterator} iterator\n  */\n\n\n  function factory() {\n    if (fcn) {\n      return array2iterator(src, fcn, thisArg);\n    }\n\n    return array2iterator(src);\n  }\n} // EXPORTS //\n\n\nmodule.exports = array2iterator;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Test for native `Symbol.iterator` support.\n*\n* @module @stdlib/assert/has-iterator-symbol-support\n*\n* @example\n* var hasIteratorSymbolSupport = require( '@stdlib/assert/has-iterator-symbol-support' );\n*\n* var bool = hasIteratorSymbolSupport();\n* // returns <boolean>\n*/\n// MODULES //\n\nvar hasIteratorSymbolSupport = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = hasIteratorSymbolSupport;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar hasOwnProp = require('./../../has-own-property'); // MAIN //\n\n/**\n* Tests for native `Symbol.iterator` support.\n*\n* @returns {boolean} boolean indicating if an environment has `Symbol.iterator` support\n*\n* @example\n* var bool = hasIteratorSymbolSupport();\n* // returns <boolean>\n*/\n\n\nfunction hasIteratorSymbolSupport() {\n  return typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol' && hasOwnProp(Symbol, 'iterator') && typeof Symbol.iterator === 'symbol';\n} // EXPORTS //\n\n\nmodule.exports = hasIteratorSymbolSupport;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Test if a value is iterator-like.\n*\n* @module @stdlib/assert/is-iterator-like\n*\n* @example\n* var isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\n*\n* var it = {\n*     'next': function noop() {}\n* };\n* var bool = isIteratorLike( it );\n* // returns true\n*\n* bool = isIteratorLike( {} );\n* // returns false\n*/\n// MODULES //\n\nvar isIterator = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = isIterator;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar isFunction = require('./../../is-function'); // MAIN //\n\n/**\n* Tests if a value is iterator-like.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is iterator-like\n*\n* @example\n* var it = {\n*     'next': function noop() {}\n* };\n* var bool = isIteratorLike( it );\n* // returns true\n*\n* @example\n* var bool = isIteratorLike( {} );\n* // returns false\n*\n* @example\n* var bool = isIteratorLike( null );\n* // returns false\n*/\n\n\nfunction isIteratorLike(value) {\n  return value !== null && typeof value === 'object' && isFunction(value.next) && value.next.length === 0;\n} // EXPORTS //\n\n\nmodule.exports = isIteratorLike;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @module @stdlib/math/base/special/sqrt\n*\n* @example\n* var sqrt = require( '@stdlib/math/base/special/sqrt' );\n*\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\n// MODULES //\n\nvar sqrt = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = sqrt;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MAIN //\n\n/**\n* Compute the principal square root of a double-precision floating-point number.\n*\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} principal square root\n*\n* @example\n* var v = sqrt( 4.0 );\n* // returns 2.0\n*\n* v = sqrt( 9.0 );\n* // returns 3.0\n*\n* v = sqrt( 0.0 );\n* // returns 0.0\n*\n* v = sqrt( -4.0 );\n* // returns NaN\n*\n* v = sqrt( NaN );\n* // returns NaN\n*/\n\nvar sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math\n// EXPORTS //\n\nmodule.exports = sqrt;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Compute an arithmetic mean incrementally.\n*\n* @module @stdlib/stats/incr/mean\n*\n* @example\n* var incrmean = require( '@stdlib/stats/incr/mean' );\n*\n* var accumulator = incrmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator();\n* // returns -1.5\n*/\n// MODULES //\n\nvar incrmean = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = incrmean;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean.\n*\n* ## Method\n*\n* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu_n &= \\frac{1}{n} \\sum_{i=0}^{n-1} x_i \\\\\n*           &= \\frac{1}{n} \\biggl(x_{n-1} + \\sum_{i=0}^{n-2} x_i \\biggr) \\\\\n*           &= \\frac{1}{n} (x_{n-1} + (n-1)\\mu_{n-1}) \\\\\n*           &= \\mu_{n-1} + \\frac{1}{n} (x_{n-1} - \\mu_{n-1})\n*     \\end{align*}\n*     ```\n*\n* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator();\n* // returns -1.5\n*/\n\nfunction incrmean() {\n  var mu;\n  var N;\n  mu = 0.0;\n  N = 0;\n  return accumulator;\n  /**\n  * If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n  *\n  * @private\n  * @param {number} [x] - new value\n  * @returns {(number|null)} mean value or null\n  */\n\n  function accumulator(x) {\n    if (arguments.length === 0) {\n      if (N === 0) {\n        return null;\n      }\n\n      return mu;\n    }\n\n    N += 1;\n    mu += (x - mu) / N;\n    return mu;\n  }\n} // EXPORTS //\n\n\nmodule.exports = incrmean;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Compute a corrected sample standard deviation incrementally.\n*\n* @module @stdlib/stats/incr/stdev\n*\n* @example\n* var incrstdev = require( '@stdlib/stats/incr/stdev' );\n*\n* var accumulator = incrstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator();\n* // returns ~4.95\n*/\n// MODULES //\n\nvar incrstdev = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = incrstdev;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar isNumber = require('@stdlib/assert/is-number').isPrimitive;\n\nvar sqrt = require('@stdlib/math/base/special/sqrt');\n\nvar isnan = require('@stdlib/math/base/assert/is-nan'); // MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a corrected sample standard deviation.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator();\n* // returns ~4.95\n*\n* @example\n* var accumulator = incrstdev( 3.0 );\n*/\n\n\nfunction incrstdev(mean) {\n  var delta;\n  var mu;\n  var M2;\n  var N;\n  M2 = 0.0;\n  N = 0;\n\n  if (arguments.length) {\n    if (!isNumber(mean)) {\n      throw new TypeError('invalid argument. Must provide a number primitive. Value: `' + mean + '`.');\n    }\n\n    mu = mean;\n    return accumulator2;\n  }\n\n  mu = 0.0;\n  return accumulator1;\n  /**\n  * If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n  *\n  * @private\n  * @param {number} [x] - new value\n  * @returns {(number|null)} corrected sample standard deviation or null\n  */\n\n  function accumulator1(x) {\n    if (arguments.length === 0) {\n      if (N === 0) {\n        return null;\n      }\n\n      if (N === 1) {\n        return isnan(M2) ? NaN : 0.0;\n      }\n\n      return sqrt(M2 / (N - 1));\n    }\n\n    N += 1;\n    delta = x - mu;\n    mu += delta / N;\n    M2 += delta * (x - mu);\n\n    if (N < 2) {\n      return isnan(M2) ? NaN : 0.0;\n    }\n\n    return sqrt(M2 / (N - 1));\n  }\n  /**\n  * If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n  *\n  * @private\n  * @param {number} [x] - new value\n  * @returns {(number|null)} corrected sample standard deviation or null\n  */\n\n\n  function accumulator2(x) {\n    if (arguments.length === 0) {\n      if (N === 0) {\n        return null;\n      }\n\n      return sqrt(M2 / N);\n    }\n\n    N += 1;\n    delta = x - mu;\n    M2 += delta * delta;\n    return sqrt(M2 / N);\n  }\n} // EXPORTS //\n\n\nmodule.exports = incrstdev;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Compute the arithmetic mean over all iterated values.\n*\n* @module @stdlib/stats/iter/mean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermean = require( '@stdlib/stats/iter/mean' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermean( rand );\n* // returns <number>\n*/\n// MODULES //\n\nvar main = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = main;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar isIteratorLike = require('@stdlib/assert/is-iterator-like');\n\nvar hasOwnProp = require('@stdlib/assert/has-own-property');\n\nvar incrmean = require('./../../../incr/mean'); // MAIN //\n\n/**\n* Computes the arithmetic mean over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermean( rand );\n* // returns <number>\n*/\n\n\nfunction itermean(iterator) {\n  var acc;\n  var v;\n\n  if (!isIteratorLike(iterator)) {\n    throw new TypeError('invalid argument. Must provide an iterator. Value: `' + iterator + '`.');\n  }\n\n  acc = incrmean();\n\n  while (true) {\n    v = iterator.next();\n\n    if (typeof v.value === 'number') {\n      acc(v.value);\n    } else if (hasOwnProp(v, 'value')) {\n      acc(NaN);\n    }\n\n    if (v.done) {\n      break;\n    }\n  }\n\n  return acc();\n} // EXPORTS //\n\n\nmodule.exports = itermean;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Compute the corrected sample standard deviation over all iterated values.\n*\n* @module @stdlib/stats/iter/stdev\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var iterstdev = require( '@stdlib/stats/iter/stdev' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = iterstdev( rand );\n* // returns <number>\n*/\n// MODULES //\n\nvar main = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = main;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar isIteratorLike = require('@stdlib/assert/is-iterator-like');\n\nvar hasOwnProp = require('@stdlib/assert/has-own-property');\n\nvar isNumber = require('@stdlib/assert/is-number').isPrimitive;\n\nvar incrstdev = require('./../../../incr/stdev'); // MAIN //\n\n/**\n* Computes the corrected sample standard deviation over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} corrected sample standard deviation\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = iterstdev( rand );\n* // returns <number>\n*/\n\n\nfunction iterstdev(iterator, mean) {\n  var acc;\n  var v;\n\n  if (!isIteratorLike(iterator)) {\n    throw new TypeError('invalid argument. First argument must be an iterator. Value: `' + iterator + '`.');\n  }\n\n  if (arguments.length > 1) {\n    if (!isNumber(mean)) {\n      throw new TypeError('invalid argument. Second argument must be a number primitive. Value: `' + mean + '`.');\n    }\n\n    acc = incrstdev(mean);\n  } else {\n    acc = incrstdev();\n  }\n\n  while (true) {\n    v = iterator.next();\n\n    if (typeof v.value === 'number') {\n      acc(v.value);\n    } else if (hasOwnProp(v, 'value')) {\n      acc(NaN);\n    }\n\n    if (v.done) {\n      break;\n    }\n  }\n\n  return acc();\n} // EXPORTS //\n\n\nmodule.exports = iterstdev;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Iterator symbol.\n*\n* @module @stdlib/symbol/iterator\n*\n* @example\n* var IteratorSymbol = require( '@stdlib/symbol/iterator' );\n*\n* function iterator() {\n*     var it;\n*     var i;\n*\n*     i = -1;\n*\n*     it = {};\n*     it.next = next;\n*     it.return = done;\n*\n*     if ( IteratorSymbol ) {\n*         it[ IteratorSymbol ] = iterator;\n*     }\n*     return it;\n*\n*     function next() {\n*         i += 1;\n*         return {\n*             'value': i,\n*             'done': false\n*         };\n*     }\n*\n*     function done( value ) {\n*         if ( arguments.length === 0 ) {\n*             return {\n*                 'done': true\n*             };\n*         }\n*         return {\n*             'value': value,\n*             'done': true\n*         };\n*     }\n* }\n*\n* var obj = iterator();\n*/\n// MAIN //\n\nvar IteratorSymbol = require('./main.js'); // EXPORTS //\n\n\nmodule.exports = IteratorSymbol;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar hasIteratorSymbolSupport = require('@stdlib/assert/has-iterator-symbol-support'); // MAIN //\n\n/**\n* Iterator symbol.\n*\n* @name IteratorSymbol\n* @constant\n* @type {(symbol|null)}\n*\n* @example\n* function iterator() {\n*     var it;\n*     var i;\n*\n*     i = -1;\n*\n*     it = {};\n*     it.next = next;\n*     it.return = done;\n*\n*     if ( IteratorSymbol ) {\n*         it[ IteratorSymbol ] = iterator;\n*     }\n*     return it;\n*\n*     function next() {\n*         i += 1;\n*         return {\n*             'value': i,\n*             'done': false\n*         };\n*     }\n*\n*     function done( value ) {\n*         if ( arguments.length === 0 ) {\n*             return {\n*                 'done': true\n*             };\n*         }\n*         return {\n*             'value': value,\n*             'done': true\n*         };\n*     }\n* }\n*\n* var obj = iterator();\n*/\n\n\nvar IteratorSymbol = hasIteratorSymbolSupport() ? Symbol.iterator : null; // EXPORTS //\n\nmodule.exports = IteratorSymbol;"],"names":["iterator","module","exports","setReadOnly","isFunction","isCollection","iteratorSymbol","array2iterator","src","thisArg","iter","FLG","fcn","i","TypeError","arguments","length","next1","next2","end","factory","call","value","hasIteratorSymbolSupport","hasOwnProp","Symbol","isIterator","next","sqrt","Math","incrmean","mu","N","x","incrstdev","isNumber","isnan","mean","delta","M2","accumulator2","accumulator1","NaN","main","isIteratorLike","acc","v","done","IteratorSymbol"],"sourceRoot":""}