{"version":3,"sources":["../node_modules/@isle-project/utils/file-saver/index.js","../node_modules/linkify-it/index.js","../node_modules/linkify-it/lib/re.js","../node_modules/markdown-it/index.js","../node_modules/markdown-it/lib/common/entities.js","../node_modules/markdown-it/lib/common/html_blocks.js","../node_modules/markdown-it/lib/common/html_re.js","../node_modules/markdown-it/lib/common/utils.js","../node_modules/markdown-it/lib/helpers/index.js","../node_modules/markdown-it/lib/helpers/parse_link_destination.js","../node_modules/markdown-it/lib/helpers/parse_link_label.js","../node_modules/markdown-it/lib/helpers/parse_link_title.js","../node_modules/markdown-it/lib/index.js","../node_modules/markdown-it/lib/parser_block.js","../node_modules/markdown-it/lib/parser_core.js","../node_modules/markdown-it/lib/parser_inline.js","../node_modules/markdown-it/lib/presets/commonmark.js","../node_modules/markdown-it/lib/presets/default.js","../node_modules/markdown-it/lib/presets/zero.js","../node_modules/markdown-it/lib/renderer.js","../node_modules/markdown-it/lib/ruler.js","../node_modules/markdown-it/lib/rules_block/blockquote.js","../node_modules/markdown-it/lib/rules_block/code.js","../node_modules/markdown-it/lib/rules_block/fence.js","../node_modules/markdown-it/lib/rules_block/heading.js","../node_modules/markdown-it/lib/rules_block/hr.js","../node_modules/markdown-it/lib/rules_block/html_block.js","../node_modules/markdown-it/lib/rules_block/lheading.js","../node_modules/markdown-it/lib/rules_block/list.js","../node_modules/markdown-it/lib/rules_block/paragraph.js","../node_modules/markdown-it/lib/rules_block/reference.js","../node_modules/markdown-it/lib/rules_block/state_block.js","../node_modules/markdown-it/lib/rules_block/table.js","../node_modules/markdown-it/lib/rules_core/block.js","../node_modules/markdown-it/lib/rules_core/inline.js","../node_modules/markdown-it/lib/rules_core/linkify.js","../node_modules/markdown-it/lib/rules_core/normalize.js","../node_modules/markdown-it/lib/rules_core/replacements.js","../node_modules/markdown-it/lib/rules_core/smartquotes.js","../node_modules/markdown-it/lib/rules_core/state_core.js","../node_modules/markdown-it/lib/rules_inline/autolink.js","../node_modules/markdown-it/lib/rules_inline/backticks.js","../node_modules/markdown-it/lib/rules_inline/balance_pairs.js","../node_modules/markdown-it/lib/rules_inline/emphasis.js","../node_modules/markdown-it/lib/rules_inline/entity.js","../node_modules/markdown-it/lib/rules_inline/escape.js","../node_modules/markdown-it/lib/rules_inline/html_inline.js","../node_modules/markdown-it/lib/rules_inline/image.js","../node_modules/markdown-it/lib/rules_inline/link.js","../node_modules/markdown-it/lib/rules_inline/newline.js","../node_modules/markdown-it/lib/rules_inline/state_inline.js","../node_modules/markdown-it/lib/rules_inline/strikethrough.js","../node_modules/markdown-it/lib/rules_inline/text.js","../node_modules/markdown-it/lib/rules_inline/text_collapse.js","../node_modules/markdown-it/lib/token.js","../node_modules/mdurl/decode.js","../node_modules/mdurl/encode.js","../node_modules/mdurl/format.js","../node_modules/mdurl/index.js","../node_modules/mdurl/parse.js","../node_modules/punycode/punycode.js","../node_modules/uc.micro/categories/Cc/regex.js","../node_modules/uc.micro/categories/Cf/regex.js","../node_modules/uc.micro/categories/P/regex.js","../node_modules/uc.micro/categories/Z/regex.js","../node_modules/uc.micro/index.js","../node_modules/uc.micro/properties/Any/regex.js"],"names":[],"mappings":"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","file":"static/js/3550.b41c00f3.chunk.js","sourcesContent":["/*\n* Adapted from:\n*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n* 1.3.8\n* 2018-03-22 14:03:47\n*\n* By Eli Grey, https://eligrey.com\n* License: MIT\n*   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n*\n* @source http://purl.eligrey.com/github/FileSaver.js/blob/master/src/FileSaver.js\n*/\n\n// VARIABLES //\n\nconst RE_AUTO_BOM = /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i;\nconst ARBITRARY_REVOKE_TIMEOUT = 1000 * 40; // in ms\n\n\n// FUNCTIONS //\n\nfunction click(node) {\n\tconst event = new MouseEvent( 'click' );\n\tnode.dispatchEvent( event );\n}\n\nfunction throwOutside( ex ) {\n\tsetImmediate(function throwEx() {\n\t\tthrow ex;\n\t}, 0 );\n}\n\nfunction autoBOM( blob ) {\n\t// Prepend BOM for UTF-8 XML and text/* types (including HTML). Note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n\tif ( RE_AUTO_BOM.test( blob.type ) ) {\n\t\treturn new Blob([ String.fromCharCode( 0xFEFF ), blob ], {\n\t\t\ttype: blob.type\n\t\t});\n\t}\n\treturn blob;\n}\n\nfunction dispatch( filesaver, eventTypes, event ) {\n\teventTypes = [].concat( eventTypes );\n\tlet i = eventTypes.length;\n\twhile ( i-- ) {\n\t\tconst listener = filesaver[ 'on' + eventTypes[i] ];\n\t\tif ( typeof listener === 'function' ) {\n\t\t\ttry {\n\t\t\t\tlistener.call( filesaver, event || filesaver );\n\t\t\t} catch ( ex ) {\n\t\t\t\tthrowOutside( ex );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\nfunction saveFactory( view ) {\n\tif (\n\t\ttypeof view === 'undefined' ||\n\t\ttypeof navigator !== 'undefined' &&\n\t\t/MSIE [1-9]\\./.test( navigator.userAgent )\n\t) {\n\t\treturn;\n\t}\n\tconst doc = view.document;\n\t// only get URL when necessary in case Blob.js hasn't overridden it yet\n\tfunction getURL() {\n\t\treturn view.URL || view.webkitURL || view;\n\t}\n\tfunction revoke( file ) {\n\t\tfunction revoker() {\n\t\t\tif ( typeof file === 'string' ) { // file is an object URL\n\t\t\t\tgetURL().revokeObjectURL(file);\n\t\t\t} else { // file is a File\n\t\t\t\tfile.remove();\n\t\t\t}\n\t\t}\n\t\tsetTimeout( revoker, ARBITRARY_REVOKE_TIMEOUT );\n\t}\n\tlet canUseSaveLink = false;\n\tlet saveLink;\n\tif ( doc && doc.createElementNS ) {\n\t\tsaveLink = doc.createElementNS( 'http://www.w3.org/1999/xhtml', 'a' );\n\t\tcanUseSaveLink = 'download' in saveLink;\n\t}\n\tconst isSafari = /constructor/i.test( view.HTMLElement ) || view.safari;\n\tconst isChromeIOS =/CriOS\\/[\\d]+/.test( navigator.userAgent );\n\tconst setImmediate = view.setImmediate || view.setTimeout;\n\tconst forceSavableType = 'application/octet-stream';\n\n\tfunction FileSaver(blob, name, noAutoBOM ) {\n\t\tif ( !noAutoBOM ) {\n\t\t\tblob = autoBOM(blob);\n\t\t}\n\t\t// First try a download, then web filesystem, then object URLs:\n\t\tconst self = this;\n\t\tconst type = blob.type;\n\t\tconst force = type === forceSavableType;\n\t\tlet objectURL;\n\t\tfunction dispatchAll() {\n\t\t\tdispatch( self, 'writestart progress write writeend'.split(' ') );\n\t\t}\n\t\t// On any filesystem errors, revert to saving with object URLs:\n\t\tfunction fsError() {\n\t\t\tif ((isChromeIOS || (force && isSafari)) && view.FileReader) {\n\t\t\t\t// Safari doesn't allow downloading of blob URLs:\n\t\t\t\tconst reader = new FileReader();\n\t\t\t\treader.onloadend = function onLoadEnd() {\n\t\t\t\t\tlet url = isChromeIOS ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n\t\t\t\t\tconst popup = view.open(url, '_blank');\n\t\t\t\t\tif ( !popup ) {\n\t\t\t\t\t\tview.location.href = url;\n\t\t\t\t\t}\n\t\t\t\t\turl = void 0; // release reference before dispatching\n\t\t\t\t\tself.readyState = self.DONE;\n\t\t\t\t\tdispatchAll();\n\t\t\t\t};\n\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\tself.readyState = self.INIT;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Don't create more object URLs than needed:\n\t\t\tif ( !objectURL ) {\n\t\t\t\tobjectURL = getURL().createObjectURL( blob );\n\t\t\t}\n\t\t\tif ( force ) {\n\t\t\t\tview.location.href = objectURL;\n\t\t\t} else {\n\t\t\t\tconst opened = view.open( objectURL, '_blank' );\n\t\t\t\tif ( !opened ) {\n\t\t\t\t\t// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n\t\t\t\t\tview.location.href = objectURL;\n\t\t\t\t}\n\t\t\t}\n\t\t\tself.readyState = self.DONE;\n\t\t\tdispatchAll();\n\t\t\trevoke( objectURL );\n\t\t}\n\t\tself.readyState = self.INIT;\n\n\t\tif ( canUseSaveLink ) {\n\t\t\tobjectURL = getURL().createObjectURL( blob );\n\t\t\tsetImmediate(function save() {\n\t\t\t\tsaveLink.href = objectURL;\n\t\t\t\tsaveLink.download = name;\n\t\t\t\tclick( saveLink );\n\t\t\t\tdispatchAll();\n\t\t\t\trevoke( objectURL );\n\t\t\t\tself.readyState = self.DONE;\n\t\t\t}, 0);\n\t\t\treturn;\n\t\t}\n\n\t\tfsError();\n\t}\n\tconst proto = FileSaver.prototype;\n\tfunction saveAs( blob, name, noAutoBOM ) {\n\t\treturn new FileSaver( blob, name || blob.name || 'download', noAutoBOM );\n\t}\n\n\t// IE 10+ (native saveAs)\n\tif ( typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob ) {\n\t\treturn function saveAs( blob, name, noAutoBOM ) {\n\t\t\tname = name || blob.name || 'download';\n\t\t\tif ( !noAutoBOM ) {\n\t\t\t\tblob = autoBOM( blob );\n\t\t\t}\n\t\t\treturn navigator.msSaveOrOpenBlob(blob, name);\n\t\t};\n\t}\n\n\tproto.abort = function abort(){};\n\tproto.readyState = proto.INIT = 0;\n\tproto.WRITING = 1;\n\tproto.DONE = 2;\n\n\tproto.error = null;\n\tproto.onwritestart = null;\n\tproto.onprogress = null;\n\tproto.onwrite = null;\n\tproto.onabort = null;\n\tproto.onerror = null;\n\tproto.onwriteend = null;\n\n\treturn saveAs;\n}\n\nconst saveAs = saveFactory(\n\ttypeof self !== 'undefined' && self ||\n\ttypeof window !== 'undefined' && window ||\n\tthis.content // eslint-disable-line @babel/no-invalid-this\n);\n\n\n// EXPORTS //\n\nexport default saveAs;\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in \"google search\" links (#66, #81).\n                                     // github has ... in commit range links,\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // - params separator\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          ',(?!' + re.src_ZCc + ').|' +       // allow `,,,` in paths\n          ';(?!' + re.src_ZCc + ').|' +       // allow `;` if not followed by space-like char\n          '\\\\!+(?!' + re.src_ZCc + '|[!]).|' +  // allow `!!!` in paths, but not at the end\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?][\\\\s\\\\S]*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3C /* < */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break; }\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) { return result; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      isOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // set offset past spaces and \">\"\n  initial = offset = state.sCount[startLine] + 1;\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    isOutdented = state.sCount[nextLine] < state.blkIndent;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      initial = offset = state.sCount[nextLine] + 1;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var url, fullUrl, token, ch, start, max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  start = state.pos;\n  max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n\n    ch = state.src.charCodeAt(pos);\n\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n\n  url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n};\n","// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  var headerIdx = 0;\n  var lastTokenIdx = -2; // needs any value lower than -1\n  var jumps = [];\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];\n\n    openerIdx = headerIdx - jumps[headerIdx] - 1;\n\n    newMinOpenerIdx = openerIdx;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (opener.open && opener.end < 0) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            jumps[openerIdx - 1] + 1 :\n            0;\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nmodule.exports = punycode;\n","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/"],"sourceRoot":""}