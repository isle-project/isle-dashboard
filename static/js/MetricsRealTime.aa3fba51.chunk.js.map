{"version":3,"sources":["../node_modules/@isle-project/components/metrics/realtime/main.js"],"names":[],"mappings":"2/BAYA,KAAM,OAAQ,6CAAQ,0BAatB,6BAA8B,6CAAU,CACvC,aAAc,CACb,QACA,KAAK,MAAQ,CACZ,QAAS,IAIX,mBAAoB,CACnB,KAAK,WAAa,GAClB,KAAM,SAAU,KAAK,QAChB,SACJ,OAAO,sCAAsC,KAAK,MAAM,KACxD,KAAK,YAAc,QAAQ,UAAW,CAAE,KAAM,SAAY,CACzD,GAAK,OAAS,kEAAgB,CAC7B,GAAK,OAAO,OAAS,mEAAiB,OAAO,OAAS,kEACrD,MAAO,MAER,KAAM,KAAM,8DAAS,KAAK,MAAM,IAAK,OAAO,IAC5C,GAAK,MAAQ,GAAK,CACjB,GAAI,SAAU,KAAK,MAAM,QAAQ,QACjC,QAAQ,KAAM,KAAK,MAAM,iBAAmB,OAAS,OAAO,OAC5D,KAAK,SAAS,CACb,SACE,IAAM,CACR,MAAO,gDAAkD,KAAK,UAAW,KAAK,MAAM,UACpF,KAAK,MAAM,OAAQ,KAAK,MAAM,QAAS,KACvC,KAAK,MAAM,QAAS,KAAK,MAAM,QAAS,KAAK,MAAM,QAAQ,OAAO,GAAK,QAIrE,KAAK,YACT,KAAK,iBAMT,sBAAuB,CACtB,KAAK,WAAa,GACb,KAAK,aAAc,KAAK,cAG9B,QAAS,CACR,MACC,kDAAC,MAAD,OAQH,gBAAgB,aAAe,CAC9B,QAAS,GACT,SAAU,GACV,iBAAkB,IAGnB,gBAAgB,UAAY,CAC3B,IAAK,mEACL,OAAQ,uDACR,QAAS,uDACT,iBAAkB,wDAGnB,gBAAgB,YAAc,gEAK9B,4BAAe","file":"static/js/MetricsRealTime.aa3fba51.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport indexOf from '@stdlib/utils/index-of';\nimport SessionContext from '@isle-project/session/context.js';\nimport { FOCUS_ELEMENT, LOSE_FOCUS_ELEMENT, MEMBER_ACTION } from '@isle-project/constants/events.js';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:real-time-metrics' );\n\n\n// MAIN //\n\n/**\n* Invisible component listening to incoming member actions and invoking a given callback.\n*\n* @property {string} for - ID of component whose actions should trigger callback(s)\n* @property {Function} onData - callback function called with an array of all actions when a new member action arrives\n* @property {Function} onDatum - callback function invoked with every individual incoming member action\n* @property {boolean} returnFullObject - controls whether to invoke the supplied callback(s) with the full action object or only its value\n*/\nclass RealTimeMetrics extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tactions: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\t\tconst session = this.context;\n\t\tif ( session ) {\n\t\t\tdebug( 'Listening for all actions with id: '+this.props.for );\n\t\t\tthis.unsubscribe = session.subscribe( ( type, action ) => {\n\t\t\t\tif ( type === MEMBER_ACTION ) {\n\t\t\t\t\tif ( action.type === FOCUS_ELEMENT || action.type === LOSE_FOCUS_ELEMENT ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tconst idx = indexOf( this.props.for, action.id );\n\t\t\t\t\tif ( idx !== -1 ) {\n\t\t\t\t\t\tlet actions = this.state.actions.slice();\n\t\t\t\t\t\tactions.push( this.props.returnFullObject ? action : action.value );\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tactions\n\t\t\t\t\t\t}, () => {\n\t\t\t\t\t\t\tdebug( 'A new value for the given IDs was submitted: ' + JSON.stringify( this.state.actions ) );\n\t\t\t\t\t\t\tthis.props.onData( this.state.actions, idx );\n\t\t\t\t\t\t\tthis.props.onDatum( this.state.actions[ this.state.actions.length-1 ], idx );\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( this._isMounted ) {\n\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis._isMounted = false;\n\t\tif ( this.unsubscribe ) this.unsubscribe();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div></div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nRealTimeMetrics.defaultProps = {\n\tonData() {},\n\tonDatum() {},\n\treturnFullObject: false\n};\n\nRealTimeMetrics.propTypes = {\n\tfor: PropTypes.array.isRequired,\n\tonData: PropTypes.func,\n\tonDatum: PropTypes.func,\n\treturnFullObject: PropTypes.bool\n};\n\nRealTimeMetrics.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default RealTimeMetrics;\n"],"sourceRoot":""}