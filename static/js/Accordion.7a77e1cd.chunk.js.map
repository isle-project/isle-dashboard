{"version":3,"sources":["../node_modules/@isle-project/components/accordion/main.js","../node_modules/@isle-project/components/collapse/index.js","../node_modules/@isle-project/utils/is-line-buttons/index.js"],"names":[],"mappings":"o0CAgBA,KAAM,OAAQ,kBAAQ,kBAiBhB,UAAc,OAAW,CAC9B,MAAO,0BACP,KAAM,CAAE,SAAU,aAAgB,mBAAU,MAAM,QAC5C,CAAE,WAAY,eAAkB,mBAAU,MAAM,QAChD,CAAE,GAAM,gBAAgB,aAM9B,GALK,MAAM,SAAW,YACrB,aAAa,MAAM,QACnB,cAAe,MAAM,QACrB,MAAM,SAAU,MAAM,SAElB,CAAC,cAAS,MAAM,UACpB,MAAO,qBAAC,gBAAD,CAAO,QAAQ,UAAW,EAAE,qBAEpC,KAAM,cAAe,CAAE,IAAK,MACtB,MAAM,YACH,IAAM,CACZ,KAAM,QAAW,WAAa,IAAQ,KAAO,IAC7C,YAAa,QACb,MAAM,SAAU,SAGX,IAAM,CACZ,KAAM,QAAW,WAAa,IAAS,KAAI,GAAK,IAAM,IACtD,YAAa,QACb,MAAM,SAAU,SAGZ,IAAM,GACN,QAAU,MAAM,SAAW,GACjC,GAAI,OAAQ,EACZ,OAAU,GAAI,EAAG,EAAI,MAAM,SAAS,OAAQ,IAAM,CACjD,KAAM,OAAQ,MAAM,SAAU,GAC9B,GAAK,CAAC,sBAAe,OAAU,CAC9B,KAAM,OAAQ,CACb,UAAW,kCAEP,QAAU,GACd,OAAM,oBAAsB,EAC5B,MAAM,qBAAuB,GAEzB,IAAM,UACV,OAAM,WAAa,0BAEpB,KAAM,MACL,oBAAC,WAAD,CACC,IAAK,EACL,QAAS,IAAM,SACf,OAAQ,QAAS,QAAW,UAAU,QACtC,gBAAiB,MAAM,gBACvB,YAAa,iCACT,OACA,MAAM,aAEV,QAAS,aAAc,MAAM,SAAS,OAAQ,IAE7C,OAGH,OAAS,EACT,IAAI,KAAM,OAGZ,MACC,qBAAC,MAAD,CACC,UAAW,aAAa,MAAM,YAC9B,MAAO,MAAM,OAEZ,MAQJ,UAAU,aAAe,CACxB,OAAQ,KACR,YAAa,GACb,QAAS,KACT,gBAAiB,KACjB,YAAa,KACb,UAAW,GACX,UAAW,GACX,MAAO,MAGR,UAAU,UAAY,CACrB,OAAQ,4BACR,YAAa,0BACb,QAAS,6BAAmB,+BAAoB,CAC/C,4BAAkB,6BAEnB,YAAa,4BACb,gBAAiB,4BACjB,SAAU,0BACV,UAAW,4BACX,MAAO,6BAMR,SAAe,iBAAe,Y,uLChI9B,KAAM,UAAW,8EAAU,IAAM,uFAKjC,sBAAe,U,+vBCGf,uBAAwB,KAAO,CAC9B,MACC,uEAAe,OACf,KAAK,OACL,uEAAW,KAAK,MAAM,aACtB,uEAAW,KAAK,MAAM,MAOxB,sBAAe","file":"static/js/Accordion.7a77e1cd.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport isArray from '@stdlib/assert/is-array';\nimport Alert from 'react-bootstrap/Alert';\nimport Collapse from '@isle-project/components/collapse';\nimport isLineButtons from '@isle-project/utils/is-line-buttons';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport './accordion.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:accordion' );\n\n\n// MAIN //\n\n/**\n* An accordion component controlling vertical sliders.\n*\n* @property {number} active - index of slider to be opened at the beginning\n* @property {Array} headers - array of header names\n* @property {boolean} canCloseAll - whether one can collapse all headers\n* @property {string} headerClassName - this overrules the given class name of the headers\n* @property {Object} headerStyle - one may also assign a style to the header bars\n* @property {Function} onChange - callback invoked with index of new active vertical slider\n* @property {string} className - class name for outer div\n* @property {Object} style - CSS inline styles for outer div\n*/\nconst Accordion = ( props ) => {\n\tdebug( 'Rendering accordion...' );\n\tconst [ isActive, setIsActive ] = useState( props.active );\n\tconst [ prevActive, setPrevActive ] = useState( props.active );\n\tconst { t } = useTranslation( 'accordion' );\n\tif ( props.active !== prevActive ) {\n\t\tsetIsActive( props.active );\n\t\tsetPrevActive( props.active );\n\t\tprops.onChange( props.active );\n\t}\n\tif ( !isArray( props.children ) ) {\n\t\treturn <Alert variant=\"danger\" >{t('children-missing')}</Alert>;\n\t}\n\tconst clickFactory = ( len, idx ) => {\n\t\tif ( props.canCloseAll ) {\n\t\t\treturn () => {\n\t\t\t\tconst newIdx = ( isActive === idx ) ? null : idx;\n\t\t\t\tsetIsActive( newIdx );\n\t\t\t\tprops.onChange( newIdx );\n\t\t\t};\n\t\t}\n\t\treturn () => {\n\t\t\tconst newIdx = ( isActive === idx ) ? (idx+1) % len : idx;\n\t\t\tsetIsActive( newIdx );\n\t\t\tprops.onChange( newIdx );\n\t\t};\n\t};\n\tconst out = [];\n\tconst headers = props.headers || [];\n\tlet count = 0;\n\tfor ( let i = 0; i < props.children.length; i++ ) {\n\t\tconst child = props.children[ i ];\n\t\tif ( !isLineButtons( child ) ) {\n\t\t\tconst style = {\n\t\t\t\tboxShadow: '0 0 -4px rgba(92, 92, 92, 0.5)'\n\t\t\t};\n\t\t\tif ( count === 0 ) {\n\t\t\t\tstyle.borderTopLeftRadius = 6;\n\t\t\t\tstyle.borderTopRightRadius = 6;\n\t\t\t}\n\t\t\tif ( i === isActive ) {\n\t\t\t\tstyle.background = 'rgba(201, 93, 10, 0.2)';\n\t\t\t}\n\t\t\tconst elem = (\n\t\t\t\t<Collapse\n\t\t\t\t\tkey={i}\n\t\t\t\t\tvisible={i === isActive}\n\t\t\t\t\theader={headers[ count ] || `Header ${count}`}\n\t\t\t\t\theaderClassName={props.headerClassName}\n\t\t\t\t\theaderStyle={{\n\t\t\t\t\t\t...style,\n\t\t\t\t\t\t...props.headerStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={clickFactory( props.children.length, i )}\n\t\t\t\t>\n\t\t\t\t\t{child}\n\t\t\t\t</Collapse>\n\t\t\t);\n\t\t\tcount += 1;\n\t\t\tout.push( elem );\n\t\t}\n\t}\n\treturn (\n\t\t<div\n\t\t\tclassName={`accordion ${props.className}`}\n\t\t\tstyle={props.style}\n\t\t>\n\t\t\t{out}\n\t\t</div>\n\t);\n};\n\n\n// PROPERTIES //\n\nAccordion.defaultProps = {\n\tactive: null,\n\tcanCloseAll: false,\n\theaders: null,\n\theaderClassName: null,\n\theaderStyle: null,\n\tonChange() {},\n\tclassName: '',\n\tstyle: null\n};\n\nAccordion.propTypes = {\n\tactive: PropTypes.number,\n\tcanCloseAll: PropTypes.bool,\n\theaders: PropTypes.arrayOf( PropTypes.oneOfType([\n\t\tPropTypes.string, PropTypes.node\n\t]) ),\n\theaderStyle: PropTypes.object,\n\theaderClassName: PropTypes.string,\n\tonChange: PropTypes.func,\n\tclassName: PropTypes.string,\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default withPropCheck( Accordion );\n","// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Collapse = Loadable( () => import( /* webpackChunkName: \"Collapse\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Collapse;\n","// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\n\n\n// MAIN //\n\n/**\n * Returns whether an object represents a line buttons component.\n *\n * @param {Object} elem - element to test\n * @returns {boolean} boolean indicating whether an object represents a line buttons component\n */\nfunction isLineButtons( elem ) {\n\treturn (\n\t\tisPlainObject( elem ) &&\n\t\telem.props &&\n\t\tisInteger( elem.props.lineNumber ) &&\n\t\tisBoolean( elem.props.show )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isLineButtons;\n"],"sourceRoot":""}