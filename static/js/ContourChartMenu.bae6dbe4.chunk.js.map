{"version":3,"file":"static/js/ContourChartMenu.bae6dbe4.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/data-explorer/menu/contourchart.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/slider/main.js","../node_modules/@isle-project/components/input/slider/index.js"],"sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport ContourChart from '@isle-project/components/plots/contourchart';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport { DATA_EXPLORER_SHARE_CONTOURPLOT, DATA_EXPLORER_CONTOURPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst ContourChartMenu = ( props ) => {\n\tconst [ x, setX ] = useState( props.variables[ 0 ] );\n\tconst [ y, setY ] = useState( props.variables[ 1 ] );\n\tconst [ overlayPoints, setOverlayPoints ] = useState( false );\n\tconst [ regressionMethod, setRegressionMethod ] = useState( [] );\n\tconst [ smoothSpan, setSmoothSpan ] = useState( 0.66 );\n\n\tconst generateContourChart = () => {\n\t\tconst { data, onCreated, onSelected, logAction, session, t } = props;\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx, y, overlayPoints, regressionMethod, smoothSpan, plotId\n\t\t};\n\t\tconst output = <ContourChart\n\t\t\tid={plotId}\n\t\t\taction={action}\n\t\t\tdata={data}\n\t\t\tonShare={() => {\n\t\t\t\tsession.addNotification({\n\t\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\t\tlevel: 'success',\n\t\t\t\t\tposition: 'tr'\n\t\t\t\t});\n\t\t\t\tlogAction( DATA_EXPLORER_SHARE_CONTOURPLOT, action );\n\t\t\t}}\n\t\t\tx={x}\n\t\t\ty={y}\n\t\t\toverlayPoints={overlayPoints}\n\t\t\tregressionMethod={regressionMethod}\n\t\t\tsmoothSpan={smoothSpan}\n\t\t\tonSelected={onSelected}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_CONTOURPLOT, action );\n\t\tonCreated( output );\n\t};\n\tconst { variables, t } = props;\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\" >\n\t\t\t\t{t('Contour Chart')}\n\t\t\t\t<QuestionButton title={t('Contour Chart')} content={t('Contour Chart-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('x-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={x}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tonChange={setX}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('y-axis-variable')}\n\t\t\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t\tonChange={setY}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('overlay-observations')}\n\t\t\t\t\t\t\tdefaultValue={overlayPoints}\n\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\tsetOverlayPoints( !overlayPoints );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('overlay-regression-line')}\n\t\t\t\t\t\t\tmulti={true}\n\t\t\t\t\t\t\toptions={[ 'linear', 'smooth' ]}\n\t\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\t\tif ( !isArray( value ) ) {\n\t\t\t\t\t\t\t\t\tvalue = [ value ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsetRegressionMethod( value );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SliderInput\n\t\t\t\t\t\t\tlegend={t('smoothing-parameter')}\n\t\t\t\t\t\t\tmin={0.01}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tdefaultValue={smoothSpan}\n\t\t\t\t\t\t\tdisabled={!contains( regressionMethod, 'smooth' )}\n\t\t\t\t\t\t\tonChange={setSmoothSpan}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateContourChart}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nContourChartMenu.defaultProps = {\n\tlogAction() {},\n\tonSelected() {}\n};\n\nContourChartMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired,\n\tonCreated: PropTypes.func.isRequired,\n\tonSelected: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default ContourChartMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport Badge from 'react-bootstrap/Badge';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nconst SliderInput = ( props ) => {\n\tconst { bind, defaultValue, legend, disabled, hideTooltip, inline, min, max, onChange, precision, step,\n\t\tminLabel, maxLabel, numberInputStyle, rangeInputStyle, style } = props;\n\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ] : defaultValue\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ]);\n\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if ( step === 1.0 && newValue !== '' ) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, max, min, step, value, onChange ] );\n\n\tconst handleInputChange = useCallback( ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tsetValue( newValue );\n\n\t\tif ( valid && newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, value, onChange ] );\n\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}:`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}:`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\tlet roundedValue;\n\tif ( value !== '' ) {\n\t\troundedValue = roundn( value, ( -1.0 )*precision );\n\t} else {\n\t\troundedValue = value;\n\t}\n\tconst rangeInput = <input\n\t\ttype=\"range\"\n\t\tclassName=\"slider-range-input\"\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tdisabled={disabled}\n\t\tonChange={handleInputChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t...rangeInputStyle\n\t\t}}\n\t/>;\n\tconst numberInput = <input\n\t\ttype=\"number\"\n\t\tname=\"input\"\n\t\tclassName=\"slider-number-input\"\n\t\tdisabled={disabled}\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tonChange={handleInputChange}\n\t\tonBlur={finishChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t...numberInputStyle\n\t\t}}\n\t\tautoComplete=\"off\"\n\t/>;\n\tif ( inline ) {\n\t\treturn (\n\t\t\t<span className=\"input\" style={{\n\t\t\t\tpadding: '5px',\n\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t...style\n\t\t\t}}>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<Tooltip\n\t\t\tid=\"sliderTooltip\"\n\t\t\tplacement=\"top\"\n\t\t\tshow={!hideTooltip}\n\t\t\ttooltip={disabled ? t('slider-disabled') : tooltip}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<br />\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"names":["ContourChartMenu","props","x","setX","useState","variables","y","setY","overlayPoints","setOverlayPoints","regressionMethod","setRegressionMethod","smoothSpan","setSmoothSpan","t","as","title","content","legend","defaultValue","options","onChange","menuPlacement","multi","value","isArray","min","max","step","disabled","contains","variant","block","onClick","data","onCreated","onSelected","logAction","session","plotId","randomstring","action","output","id","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_CONTOURPLOT","DATA_EXPLORER_CONTOURPLOT","defaultProps","propTypes","PropTypes","QuestionButton","popover","trigger","placement","rootClose","overlay","size","className","isRequired","uid","generateUID","CheckboxInput","bind","useRef","useContext","SessionContext","setValue","state","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onKeyPress","onSpanChange","noop","debug","logger","SliderInput","hideTooltip","precision","minLabel","maxLabel","numberInputStyle","rangeInputStyle","useTranslation","finishChange","parseFloat","handleInputChange","valid","validity","roundedValue","PINF","NINF","roundn","rangeInput","float","display","numberInput","name","onBlur","marginTop","autoComplete","padding","opacity","Badge","show"],"sourceRoot":""}