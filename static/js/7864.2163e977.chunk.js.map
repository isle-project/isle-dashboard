{"version":3,"file":"static/js/7864.2163e977.chunk.js","mappings":"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","sources":["../node_modules/tinycolor2/tinycolor.js"],"sourcesContent":["// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n(function (Math) {\n  var trimLeft = /^\\s+/,\n      trimRight = /\\s+$/,\n      tinyCounter = 0,\n      mathRound = Math.round,\n      mathMin = Math.min,\n      mathMax = Math.max,\n      mathRandom = Math.random;\n\n  function tinycolor(color, opts) {\n    color = color ? color : '';\n    opts = opts || {}; // If input is already a tinycolor, return itself\n\n    if (color instanceof tinycolor) {\n      return color;\n    } // If we are called as a function, call using new instead\n\n\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\n    if (this._r < 1) {\n      this._r = mathRound(this._r);\n    }\n\n    if (this._g < 1) {\n      this._g = mathRound(this._g);\n    }\n\n    if (this._b < 1) {\n      this._b = mathRound(this._b);\n    }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n  }\n\n  tinycolor.prototype = {\n    isDark: function isDark() {\n      return this.getBrightness() < 128;\n    },\n    isLight: function isLight() {\n      return !this.isDark();\n    },\n    isValid: function isValid() {\n      return this._ok;\n    },\n    getOriginalInput: function getOriginalInput() {\n      return this._originalInput;\n    },\n    getFormat: function getFormat() {\n      return this._format;\n    },\n    getAlpha: function getAlpha() {\n      return this._a;\n    },\n    getBrightness: function getBrightness() {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function getLuminance() {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n\n      if (RsRGB <= 0.03928) {\n        R = RsRGB / 12.92;\n      } else {\n        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (GsRGB <= 0.03928) {\n        G = GsRGB / 12.92;\n      } else {\n        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      if (BsRGB <= 0.03928) {\n        B = BsRGB / 12.92;\n      } else {\n        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      }\n\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function setAlpha(value) {\n      this._a = boundAlpha(value);\n      this._roundA = mathRound(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function toHsv() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function toHsvString() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = mathRound(hsv.h * 360),\n          s = mathRound(hsv.s * 100),\n          v = mathRound(hsv.v * 100);\n      return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n    },\n    toHsl: function toHsl() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function toHslString() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = mathRound(hsl.h * 360),\n          s = mathRound(hsl.s * 100),\n          l = mathRound(hsl.l * 100);\n      return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n    },\n    toHex: function toHex(allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function toHexString(allow3Char) {\n      return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function toHex8(allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function toHex8String(allow4Char) {\n      return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function toRgb() {\n      return {\n        r: mathRound(this._r),\n        g: mathRound(this._g),\n        b: mathRound(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function toRgbString() {\n      return this._a == 1 ? \"rgb(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" : \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function toPercentageRgb() {\n      return {\n        r: mathRound(bound01(this._r, 255) * 100) + \"%\",\n        g: mathRound(bound01(this._g, 255) * 100) + \"%\",\n        b: mathRound(bound01(this._b, 255) * 100) + \"%\",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function toPercentageRgbString() {\n      return this._a == 1 ? \"rgb(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function toName() {\n      if (this._a === 0) {\n        return \"transparent\";\n      }\n\n      if (this._a < 1) {\n        return false;\n      }\n\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function toFilter(secondColor) {\n      var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n\n      return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n    },\n    toString: function toString(format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n      if (needsAlphaFormat) {\n        // Special case for \"transparent\", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === \"name\" && this._a === 0) {\n          return this.toName();\n        }\n\n        return this.toRgbString();\n      }\n\n      if (format === \"rgb\") {\n        formattedString = this.toRgbString();\n      }\n\n      if (format === \"prgb\") {\n        formattedString = this.toPercentageRgbString();\n      }\n\n      if (format === \"hex\" || format === \"hex6\") {\n        formattedString = this.toHexString();\n      }\n\n      if (format === \"hex3\") {\n        formattedString = this.toHexString(true);\n      }\n\n      if (format === \"hex4\") {\n        formattedString = this.toHex8String(true);\n      }\n\n      if (format === \"hex8\") {\n        formattedString = this.toHex8String();\n      }\n\n      if (format === \"name\") {\n        formattedString = this.toName();\n      }\n\n      if (format === \"hsl\") {\n        formattedString = this.toHslString();\n      }\n\n      if (format === \"hsv\") {\n        formattedString = this.toHsvString();\n      }\n\n      return formattedString || this.toHexString();\n    },\n    clone: function clone() {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function _applyModification(fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function lighten() {\n      return this._applyModification(_lighten, arguments);\n    },\n    brighten: function brighten() {\n      return this._applyModification(_brighten, arguments);\n    },\n    darken: function darken() {\n      return this._applyModification(_darken, arguments);\n    },\n    desaturate: function desaturate() {\n      return this._applyModification(_desaturate, arguments);\n    },\n    saturate: function saturate() {\n      return this._applyModification(_saturate, arguments);\n    },\n    greyscale: function greyscale() {\n      return this._applyModification(_greyscale, arguments);\n    },\n    spin: function spin() {\n      return this._applyModification(_spin, arguments);\n    },\n    _applyCombination: function _applyCombination(fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function analogous() {\n      return this._applyCombination(_analogous, arguments);\n    },\n    complement: function complement() {\n      return this._applyCombination(_complement, arguments);\n    },\n    monochromatic: function monochromatic() {\n      return this._applyCombination(_monochromatic, arguments);\n    },\n    splitcomplement: function splitcomplement() {\n      return this._applyCombination(_splitcomplement, arguments);\n    },\n    triad: function triad() {\n      return this._applyCombination(_triad, arguments);\n    },\n    tetrad: function tetrad() {\n      return this._applyCombination(_tetrad, arguments);\n    }\n  }; // If input is an object, force 1 into \"1.0\" to handle ratios properly\n  // String input requires \"1.0\" as input, so 1 will be treated as 1\n\n  tinycolor.fromRatio = function (color, opts) {\n    if (typeof color == \"object\") {\n      var newColor = {};\n\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === \"a\") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n\n      color = newColor;\n    }\n\n    return tinycolor(color, opts);\n  }; // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     \"red\"\n  //     \"#f00\" or \"f00\"\n  //     \"#ff0000\" or \"ff0000\"\n  //     \"#ff000000\" or \"ff000000\"\n  //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n  //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n  //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n  //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n  //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n  //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n  //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n  //\n\n\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n      color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = \"hsv\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = \"hsl\";\n      }\n\n      if (color.hasOwnProperty(\"a\")) {\n        a = color.a;\n      }\n    }\n\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: mathMin(255, mathMax(rgb.r, 0)),\n      g: mathMin(255, mathMax(rgb.g, 0)),\n      b: mathMin(255, mathMax(rgb.b, 0)),\n      a: a\n    };\n  } // Conversion Functions\n  // --------------------\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n\n\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  } // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n\n\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        l = (max + min) / 2;\n\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  } // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n\n\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = mathMax(r, g, b),\n        min = mathMin(r, g, b);\n    var h,\n        s,\n        v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  } // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n\n\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible\n\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n  } // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n\n\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible\n\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n  } // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for \"toFilter()\"\n\n\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];\n    return hex.join(\"\");\n  } // `equals`\n  // Can be called with any tinycolor input\n\n\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) {\n      return false;\n    }\n\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: mathRandom(),\n      g: mathRandom(),\n      b: mathRandom()\n    });\n  }; // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n\n  function _desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n\n  function _lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  function _brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n\n  function _darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n\n\n  function _spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  } // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n\n  function _complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n\n  function _triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 120) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 240) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 90) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 180) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 270) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n\n    return ret;\n  }\n\n  function _monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n        s = hsv.s,\n        v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n\n    return ret;\n  } // Utility Functions\n  // ---------------------\n\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  }; // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\n\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  }; // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n  // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n  // *Example*\n  //    tinycolor.isReadable(\"#000\", \"#111\") => false\n  //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n\n\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case \"AAsmall\":\n      case \"AAAlarge\":\n        out = readability >= 4.5;\n        break;\n\n      case \"AAlarge\":\n        out = readability >= 3;\n        break;\n\n      case \"AAAsmall\":\n        out = readability >= 7;\n        break;\n    }\n\n    return out;\n  }; // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n\n\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      \"level\": level,\n      \"size\": size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n    }\n  }; // Big List of Colors\n  // ------------------\n  // <http://www.w3.org/TR/css3-color/#svg-color>\n\n\n  var names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n  }; // Make it easy to access colors via `hexNames[hex]`\n\n  var hexNames = tinycolor.hexNames = flip(names); // Utilities\n  // ---------\n  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n\n  function flip(o) {\n    var flipped = {};\n\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n\n    return flipped;\n  } // Return a valid alpha value [0,1] with all invalid values being set to 1\n\n\n  function boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n\n    return a;\n  } // Take input from [0, n] and return it as [0, 1]\n\n\n  function bound01(n, max) {\n    if (isOnePointZero(n)) {\n      n = \"100%\";\n    }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number\n\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    } // Handle floating point rounding errors\n\n\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    } // Convert into [0, 1] range if it isn't already\n\n\n    return n % max / parseFloat(max);\n  } // Force a number between 0 and 1\n\n\n  function clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n  } // Parse a base-16 hex value into a base-10 integer\n\n\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\n\n  function isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n  } // Check to see if string passed in is a percentage\n\n\n  function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n  } // Force a hex value to have 2 characters\n\n\n  function pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n  } // Replace a decimal with it's percentage value\n\n\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + \"%\";\n    }\n\n    return n;\n  } // Converts a decimal to a hex value\n\n\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  } // Converts a hex value to a decimal\n\n\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\"; // <http://www.w3.org/TR/css3-values/#number-value>\n\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\"; // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n      rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n      hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n      hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n      hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n      hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }(); // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n\n\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  } // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n\n\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\n    var named = false;\n\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == 'transparent') {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: \"name\"\n      };\n    } // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n\n\n    var match;\n\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + '' + match[1]),\n        g: parseIntFromHex(match[2] + '' + match[2]),\n        b: parseIntFromHex(match[3] + '' + match[3]),\n        a: convertHexToDecimal(match[4] + '' + match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + '' + match[1]),\n        g: parseIntFromHex(match[2] + '' + match[2]),\n        b: parseIntFromHex(match[3] + '' + match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n\n    return false;\n  }\n\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\n      \"level\": \"AA\",\n      \"size\": \"small\"\n    };\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n\n    if (level !== \"AA\" && level !== \"AAA\") {\n      level = \"AA\";\n    }\n\n    if (size !== \"small\" && size !== \"large\") {\n      size = \"small\";\n    }\n\n    return {\n      \"level\": level,\n      \"size\": size\n    };\n  } // Node: Export function\n\n\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n  } // AMD/requirejs: Define the module\n  else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return tinycolor;\n    });\n  } // Browser: Expose to window\n  else {\n    window.tinycolor = tinycolor;\n  }\n})(Math);"],"names":["Math","trimLeft","trimRight","tinyCounter","mathRound","round","mathMin","min","mathMax","max","mathRandom","random","tinycolor","color","opts","this","rgb","r","g","b","a","s","v","l","ok","format","replace","toLowerCase","match","named","names","matchers","exec","rgba","hsl","h","hsla","hsv","hsva","hex8","parseIntFromHex","convertHexToDecimal","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","bound01","String","substr","convertToPercentage","i","floor","f","p","q","t","mod","hsvToRgb","hue2rgb","hslToRgb","hasOwnProperty","boundAlpha","inputToRGB","_originalInput","_r","_g","_b","_a","_roundA","_format","_gradientType","gradientType","_ok","_tc_id","rgbToHsl","d","rgbToHsv","rgbToHex","allow3Char","hex","pad2","toString","charAt","join","rgbaToArgbHex","convertDecimalToHex","_desaturate","amount","toHsl","clamp01","_saturate","_greyscale","desaturate","_lighten","_brighten","toRgb","_darken","_spin","hue","_complement","_triad","_tetrad","_splitcomplement","_analogous","results","slices","part","ret","push","_monochromatic","toHsv","modification","prototype","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","pow","setAlpha","value","toHsvString","toHslString","toHex","toHexString","toHex8","allow4Char","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","clone","_applyModification","fn","args","apply","concat","slice","call","lighten","arguments","brighten","darken","saturate","greyscale","spin","_applyCombination","analogous","complement","monochromatic","splitcomplement","triad","tetrad","fromRatio","newColor","equals","color1","color2","mix","rgb1","rgb2","readability","c1","c2","isReadable","wcag2","wcag2Parms","out","parms","level","size","toUpperCase","validateWCAG2Parms","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","length","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","o","flipped","flip","parseFloat","isNaN","n","indexOf","isOnePointZero","processPercent","isPercentage","parseInt","abs","val","c","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","module","exports"],"sourceRoot":""}