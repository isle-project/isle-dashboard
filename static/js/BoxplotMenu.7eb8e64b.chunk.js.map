{"version":3,"file":"static/js/BoxplotMenu.7eb8e64b.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/data-explorer/menu/boxplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js"],"sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport SelectInput from '@isle-project/components/input/select';\nimport selectStyles from '@isle-project/components/input/select/styles';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport BoxPlot from '@isle-project/components/plots/boxplot';\nimport { DATA_EXPLORER_SHARE_BOXPLOT, DATA_EXPLORER_BOXPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst BoxplotMenu = ({ data, variables, groupingVariables, t, session, logAction, onCreated }) => {\n\tconst [ selectedVariables, setSelectedVariables ] = useState( [] );\n\tconst [ group, setGroup ] = useState( [] );\n\tconst [ orientation, setOrientation ] = useState( 'vertical' );\n\tconst [ overlayPoints, setOverlayPoints ] = useState( false );\n\n\tconst generateBoxplot = () => {\n\t\tconst groupValues = ( group || [] ).map( e => e.value );\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tvariables: selectedVariables,\n\t\t\tgroup: groupValues,\n\t\t\tplotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_BOXPLOT, action );\n\t\t};\n\t\tconst output = <BoxPlot id={plotId} onShare={onShare} action={action}\n\t\t\tdata={data} variable={selectedVariables} group={groupValues} orientation={orientation}\n\t\t\toverlayPoints={overlayPoints}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_BOXPLOT, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Box Plot')}\n\t\t\t\t<QuestionButton title={t('Box Plot')} content={t('Box Plot-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('variable-s')}\n\t\t\t\t\tmulti\n\t\t\t\t\tdefaultValue={selectedVariables}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\tsetSelectedVariables( value || [] );\n\t\t\t\t\t\tif ( value && value.length > 1 ) {\n\t\t\t\t\t\t\tsetGroup( [] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<FormGroup controlId=\"boxplot-form-select\">\n\t\t\t\t\t<FormLabel>{t('group-by')}</FormLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tvalue={group}\n\t\t\t\t\t\toptions={groupingVariables.map( e => ( { 'label': e, 'value': e } ))}\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tisMulti\n\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\tif ( !value || value.length <= 2 ) {\n\t\t\t\t\t\t\t\tsetGroup( value );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tisDisabled={selectedVariables.length > 1}\n\t\t\t\t\t\tstyles={selectStyles}\n\t\t\t\t\t\tmenuPortalTarget={document.body}\n\t\t\t\t\t\tmenuPlacement=\"auto\"\n\t\t\t\t\t\tmenuShouldScrollIntoView={false}\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('orientation')}\n\t\t\t\t\toptions={[ 'vertical', 'horizontal' ]}\n\t\t\t\t\tdefaultValue=\"vertical\"\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\tonChange={setOrientation}\n\t\t\t\t/>\n\t\t\t\t<CheckboxInput\n\t\t\t\t\tlegend={t('overlay-points')}\n\t\t\t\t\tdefaultValue={false}\n\t\t\t\t\tonChange={setOverlayPoints}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"primary\" block onClick={generateBoxplot}\n\t\t\t\t\tdisabled={!selectedVariables || selectedVariables.length === 0}\n\t\t\t\t>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nBoxplotMenu.defaultProps = {\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {}\n};\n\nBoxplotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default BoxplotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"names":["BoxplotMenu","data","variables","groupingVariables","t","session","logAction","onCreated","useState","selectedVariables","setSelectedVariables","group","setGroup","orientation","setOrientation","overlayPoints","setOverlayPoints","as","title","content","legend","multi","defaultValue","options","onChange","value","length","controlId","map","e","isClearable","isMulti","isDisabled","styles","selectStyles","menuPortalTarget","document","body","menuPlacement","menuShouldScrollIntoView","variant","block","onClick","groupValues","plotId","randomstring","action","output","id","onShare","addNotification","message","level","position","DATA_EXPLORER_SHARE_BOXPLOT","variable","DATA_EXPLORER_BOXPLOT","disabled","defaultProps","props","popover","trigger","placement","rootClose","overlay","size","className","uid","generateUID","CheckboxInput","bind","useRef","useContext","SessionContext","state","setValue","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onKeyPress","onSpanChange","noop"],"sourceRoot":""}