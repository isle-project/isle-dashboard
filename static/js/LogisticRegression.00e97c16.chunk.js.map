{"version":3,"file":"static/js/LogisticRegression.00e97c16.chunk.js","mappings":"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","sources":["../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/@isle-project/components/models/logistic-regression/multiply_matrices.js","../node_modules/@isle-project/components/models/logistic-regression/col_mult.js","../node_modules/@isle-project/components/models/logistic-regression/multiply.js","../node_modules/@isle-project/components/models/logistic-regression/logistic_regression.js","../node_modules/@isle-project/components/models/logistic-regression/main.js","../node_modules/@isle-project/utils/mmult/index.js","../node_modules/@isle-project/utils/subtract/index.js","../node_modules/@isle-project/utils/transpose/index.js","../node_modules/@stdlib/math/base/special/xlogy/lib/index.js","../node_modules/@stdlib/math/base/special/xlogy/lib/xlogy.js","../node_modules/@stdlib/stats/base/dists/bernoulli/pmf/lib/factory.js","../node_modules/@stdlib/stats/base/dists/bernoulli/pmf/lib/index.js","../node_modules/@stdlib/stats/base/dists/bernoulli/pmf/lib/pmf.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js"],"sourcesContent":["import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n\n    let determinant = this.pivotSign;\n    let col = data.columns;\n\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n\n}","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport { hypotenuse } from './util';\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n\n        qr.set(k, k, qr.get(k, k) + 1);\n\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n\n        s = -s / qr.get(k, k);\n\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n\n      X.set(k, k, 1);\n\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n\n    return X;\n  }\n\n}","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}","// MODULES //\n\nimport { Matrix } from 'ml-matrix';\n\n\n// MAIN //\n\n/**\n* Matrix product of `A` and `B`.\n*\n* @param {Matrix} A - first input matrix\n* @param {Matrix} B - second input matrix\n* @returns {Matrix} A * B\n*/\nfunction multiplyMatrices( A, B ) {\n\tconst [ m, n ] = A.shape;\n\tconst p = B.shape[ 1 ];\n\tconst result = Matrix.zeros( m, p );\n\tconst Bcolj = new Float64Array( n );\n\tfor ( let j = 0; j < p; j++ ) {\n\t\tfor ( let k = 0; k < n; k++ ) {\n\t\t\tBcolj[ k ] = B.get(k, j);\n\t\t}\n\t\tfor ( let i = 0; i < m; i++ ) {\n\t\t\tlet s = 0;\n\t\t\tfor ( let k = 0; k < n; k++ ) {\n\t\t\t\ts += A.get( i, k ) * Bcolj[ k ];\n\t\t\t}\n\t\t\tresult.set( i, j, s );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default multiplyMatrices;\n","// MODULES //\n\nimport ndarray from '@stdlib/ndarray/array';\n\n\n// MAIN //\n\n/**\n* Multiplies each column of matrix `A` with the elements of vector `b`.\n*\n* @param {Matrix} A - input matrix\n* @param {NumberArray} b - input vector\n* @returns {Matrix} `A` with columns multiplied by elements of `b`\n*/\nfunction colMult( A, b ) {\n\tconst [ m, n ] = A.shape;\n\tconst result = ndarray( new Float64Array( m*n ), { 'shape': [ m, n ]} );\n\tfor ( let i = 0; i < m; i++ ) {\n\t\tfor ( let j = 0; j < n; j++ ) {\n\t\t\tresult.set( i, j, A.get( i, j ) * b[ i ] );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nexport default colMult;\n","// MAIN //\n\n/**\n* Computes an element-wise multiplication of two arrays.\n*\n* @param {Array} x - numeric array\n* @param {Array} y - numeric array\n*/\nfunction multiply( x, y ) {\n\tconst len = x.length;\n\tconst out = new Array( len );\n\tfor ( let i = 0; i < len; i++ ) {\n\t\tout[ i ] = x[ i ] * y[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default multiply;\n","// MODULES //\n\nimport { Matrix, solve } from 'ml-matrix';\nimport abs from '@stdlib/math/base/special/abs';\nimport ln from '@stdlib/math/base/special/ln';\nimport pow from '@stdlib/math/base/special/pow';\nimport exp from '@stdlib/math/base/special/exp';\nimport xlogy from '@stdlib/math/base/special/xlogy';\nimport EPS from '@stdlib/constants/float64/eps';\nimport dbern from '@stdlib/stats/base/dists/bernoulli/pmf';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport mmult from '@isle-project/utils/mmult';\nimport transpose from '@isle-project/utils/transpose';\nimport multiplyMatrices from './multiply_matrices.js';\nimport colMult from './col_mult.js';\nimport multiply from './multiply.js';\n\n\n// VARIABLES //\n\nconst MAX_IT = 25;\nconst EPSILON = 1e-8;\n\n\n// FUNCTIONS //\n\nconst sum = ( arr ) => {\n\tlet res = 0;\n\tfor ( let i = 0; i < arr.length; i++ ) {\n\t\tres += arr[ i ];\n\t}\n\treturn res;\n};\n\nconst variance = ( mu ) => {\n\tconst out = new Float64Array( mu.length );\n\tfor ( let i = 0; i < mu.length; i++ ) {\n\t\tout[ i ] = mu[ i ] * ( 1.0 - mu[ i ] );\n\t}\n\treturn out;\n};\n\nconst logitLink = ( mu ) => {\n\tconst n = mu.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\tout[ i ] = ln( mu[ i ] / ( 1 - mu[ i ] ) );\n\t}\n\treturn out;\n};\n\nconst logitLinkInv = ( eta ) => {\n\tconst n = eta.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\tconst etai = eta[i];\n\t\tif ( abs( etai ) > 30 ) {\n\t\t\tout[ i ] = EPS;\n\t\t} else {\n\t\t\tconst x = exp( etai );\n\t\t\tout[ i ] = x / ( 1 + x );\n\t\t}\n\t}\n\treturn out;\n};\n\nconst logitMuEta = ( eta ) => {\n\tconst n = eta.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++) {\n\t\tconst val = eta[i];\n\t\tif ( abs( val ) > 30 ) {\n\t\t\tout[ i ] = EPS;\n\t\t} else {\n\t\t\tout[ i ] = exp( val ) / pow( 1 + exp( val ), 2 );\n\t\t}\n\t}\n\treturn out;\n};\n\nconst aic = ( y, mu, numParameters ) => {\n\tlet logLik = 0;\n\tfor ( let i = 0; i < y.length; i++ ) {\n\t\tlogLik += ln( dbern( y[ i ], mu[ i ] ) );\n\t}\n\treturn -2 * logLik + 2*numParameters;\n};\n\nconst devResids = ( y, mu, wt ) => {\n\tconst n = y.length;\n\tconst out = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\tconst mui = mu[ i ];\n\t\tconst yi = y[ i ];\n\t\tout[ i ] = 2.0 * wt[ i ] *\n\t\t( xlogy( yi, yi / mui ) + xlogy( 1 - yi, ( 1 - yi ) / ( 1 - mui ) ) );\n\t}\n\treturn out;\n};\n\nconst calcW = ( weights, gprime, varg ) => {\n\tconst out = new Float64Array( weights.length );\n\tfor ( let i = 0; i < weights.length; i++ ) {\n\t\tout[ i ] = weights[ i ] * ( gprime[i]*gprime[i] / varg[ i ] );\n\t}\n\treturn out;\n};\n\nconst calcZ = ( eta, y, mu, gprime ) => {\n\tconst out = new Float64Array( y.length );\n\tfor ( let i = 0; i < y.length; i++ ) {\n\t\tout[ i ] = eta[ i ] + ( y[ i ] - mu[ i ] ) / gprime[ i ];\n\t}\n\treturn out;\n};\n\nfunction sigmoid( x ) {\n\tconst result = new Float64Array( x.length );\n\tfor ( let i = 0; i < x.length; i++) {\n\t\tresult[ i ]= 1 / (1 + exp(-x[i]) );\n\t}\n\treturn result;\n}\n\nfunction stdErrors( matrix, yhat ) {\n\tconst w = new Float64Array( yhat.length );\n\tfor ( let i = 0; i < w.length; i++ ) {\n\t\tw[ i ] = yhat[ i ] * ( 1 - yhat[ i ] );\n\t}\n\tconst [ nrow, ncol ] = matrix.shape;\n\tconst errs = new Float64Array( ncol );\n\tfor ( let j = 0; j < errs.length; j++ ) {\n\t\tlet sum = 0;\n\t\tfor ( let i = 0; i < nrow; i++ ) {\n\t\t\tsum += pow( matrix.get( i, j ), 2 ) * w[ i ];\n\t\t}\n\t\terrs[ j ] = sqrt( 1.0 / sum );\n\t}\n\treturn errs;\n}\n\n\n// MAIN //\n\n/**\n* Iteratively re-weighted least squares algorithm.\n*/\nfunction irls( X, y, nObs ) {\n\tconst Xt = transpose( X );\n\tconst weights = new Array( nObs ).fill( 1 );\n\n\tconst mustart = new Float64Array( weights.length );\n\tfor ( let i = 0; i < nObs; i++ ) {\n\t\tmustart[ i ] = ( weights[ i ] * y[ i ] + 0.5 ) / ( weights[ i ] + 1 );\n\t}\n\tlet eta = logitLink( mustart );\n\tlet mu = logitLinkInv( eta );\n\tlet devOld = sum( devResids( y, mu, weights ) );\n\n\tlet beta;\n\tlet j;\n\tlet converged = false;\n\tfor ( j = 0; j < MAX_IT; j++ ) {\n\t\tconst varg = variance( mu );\n\t\tconst gprime = logitMuEta( eta );\n\t\tconst z = calcZ( eta, y, mu, gprime );\n\t\tconst w = calcW( weights, gprime, varg );\n\t\tconst wz = multiply( w, z );\n\t\tconst Xw = colMult( X, w );\n\t\tconst A = multiplyMatrices( Xt, Xw );\n\t\tconst b = mmult( Xt, wz );\n\t\tbeta = solve( A, Matrix.columnVector( b ) );\n\t\teta = mmult( X, beta.to1DArray() );\n\t\tmu = logitLinkInv( eta );\n\t\tconst dev = sum( devResids( y, mu, weights ) );\n\t\tif ( abs( dev - devOld ) / ( 0.1 + abs( dev ) ) < EPSILON ) {\n\t\t\tconverged = true;\n\t\t\tbreak;\n\t\t}\n\t\tdevOld = dev;\n\t}\n\tconst coefficients = beta.to1DArray();\n\tconst predict = ( X ) => {\n\t\tconst finalData = mmult( X, coefficients );\n\t\tconst predictions = sigmoid( finalData );\n\t\treturn predictions;\n\t};\n\tconst fitted = predict( X, coefficients );\n\treturn {\n\t\taic: aic( y, logitLinkInv( eta ), coefficients.length ),\n\t\tstdErrors: stdErrors( X, fitted ),\n\t\tfitted,\n\t\tcoefficients,\n\t\titerations: j,\n\t\tconverged,\n\t\tpredict\n\t};\n}\n\n\n// EXPORTS //\n\nexport default irls;\n","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport contains from '@stdlib/assert/contains';\nimport ndarray from '@stdlib/ndarray/array';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport isUndefinedOrNull from '@stdlib/assert/is-undefined-or-null';\nimport isArray from '@stdlib/assert/is-array';\nimport isnan from '@stdlib/assert/is-nan';\nimport abs from '@stdlib/math/base/special/abs';\nimport pnorm from '@stdlib/stats/base/dists/normal/cdf';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport Tooltip from '@isle-project/components/tooltip';\nimport Table from '@isle-project/components/table';\nimport TeX from '@isle-project/components/tex';\nimport extractCategoriesFromValues from '@isle-project/utils/extract-categories-from-values';\nimport subtract from '@isle-project/utils/subtract';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\nimport irls from './logistic_regression.js';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\nconst T = 't';\n\n\n// FUNCTIONS //\n\nfunction isMissing( x ) {\n\treturn isnan( x ) || isUndefinedOrNull( x );\n}\n\nfunction isNonMissingNumber( x ) {\n\treturn isNumber( x ) && !isnan( x );\n}\n\nfunction designMatrix( x, y, data, quantitative, intercept, success ) {\n\tconst predictors = [];\n\tconst hash = {};\n\tconst nobs = data[ x[ 0 ] ].length;\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tconst buffer = new Float64Array( nobs * (predictors.length+1) );\n\tfor ( let i = 0; i < nobs; i++ ) {\n\t\tif ( intercept ) {\n\t\t\tbuffer[ (predictors.length+1)*i ] = 1;\n\t\t}\n\t\tlet colIndex = 0;\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\tcolIndex += 1;\n\t\t\t\tbuffer[ (predictors.length+1)*i + colIndex ] = values[ i ];\n\t\t\t} else {\n\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\tcolIndex += 1;\n\t\t\t\t\tbuffer[ (predictors.length+1)*i + colIndex ] = ( val === categories[ k ] ) ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tconst matrix = ndarray( buffer, {\n\t\tshape: [ nobs, predictors.length+1 ]\n\t});\n\tconst yvalues = data[ y ].map( v => {\n\t\treturn v === success ? 1 : 0;\n\t});\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\nfunction designMatrixMissing( x, y, data, quantitative, intercept, success ) {\n\tconst predictors = [];\n\tconst hash = {};\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tlet buffer = [];\n\tconst yvalues = [];\n\tfor ( let i = 0; i < data[ x[ 0 ] ].length; i++ ) {\n\t\tlet missing = false;\n\t\tconst row = [];\n\t\tif ( intercept ) {\n\t\t\trow.push( 1 );\n\t\t}\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\tif ( isNonMissingNumber( values[ i ] ) ) {\n\t\t\t\t\trow.push( values[ i ] );\n\t\t\t\t} else {\n\t\t\t\t\tmissing = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tif ( isMissing( val ) ) {\n\t\t\t\t\tmissing = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\t\trow.push( ( val === categories[ k ] ) ? 1 : 0 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ( !missing ) {\n\t\t\tbuffer = buffer.concat( row );\n\t\t\tyvalues.push( data[ y ][ i ] === success ? 1 : 0 );\n\t\t}\n\t}\n\tconst nobs = yvalues.length;\n\tconst matrix = ndarray( buffer, {\n\t\tshape: [ nobs, predictors.length+1 ]\n\t});\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\nconst summaryTable = ( x, intercept, result, t ) => {\n\treturn (\n\t\t<Table bordered size=\"sm\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<Tooltip placement=\"right\" tooltip={t('name-of-predictor')} ><th>{t('predictor')}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"right\" tooltip={t('change-in-log')}><th>{t('coefficient')}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"left\" tooltip={t('standard-deviation-coefficient')} ><th>{t('std-error')}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"left\" tooltip={<span>{t('test-statistic-coefficient-zero')}<TeX displayMode raw=\"t = \\tfrac{\\text{Coefficient}}{\\text{Std. Error}}\" /></span>} ><th>{T}</th></Tooltip>\n\t\t\t\t\t<Tooltip placement=\"left\" tooltip={<span>{t('p-value-coefficient-zero')}<TeX displayMode raw=\"2 \\Phi( |t| )\" /></span>} ><th>{t('p-value')}</th></Tooltip>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ intercept ? <tr>\n\t\t\t\t\t<th>{t('intercept')}</th>\n\t\t\t\t\t<td>{result.coefficients[ 0 ].toFixed( 6 )}</td>\n\t\t\t\t\t<td>{result.stdErrors[ 0 ].toFixed( 4 )}</td>\n\t\t\t\t\t<td>{( result.coefficients[ 0 ] / result.stdErrors[ 0 ] ).toFixed( 4 )}</td>\n\t\t\t\t\t<td>{( 2.0 * pnorm( -abs( result.coefficients[ 0 ] / result.stdErrors[ 0 ] ), 0.0, 1.0 ) ).toFixed( 4 )}</td>\n\t\t\t\t</tr> : null }\n\t\t\t\t{x.map( ( name, idx ) => {\n\t\t\t\t\tidx = idx + Number( intercept );\n\t\t\t\t\tconst tStat = result.coefficients[ idx ]/ result.stdErrors[ idx ];\n\t\t\t\t\tconst pVal = 2.0 * pnorm( -abs( tStat ), 0.0, 1.0 );\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={idx} >\n\t\t\t\t\t\t\t<th>{name}</th>\n\t\t\t\t\t\t\t<td>{result.coefficients[ idx ].toFixed( 6 )}</td>\n\t\t\t\t\t\t\t<td>{result.stdErrors[ idx ].toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{tStat.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{pVal.toFixed( 4 )}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</Table>\n\t);\n};\n\nconst fitModel = ({ y, success, x, intercept, omitMissing, data, quantitative }) => {\n\ttry {\n\t\tif ( !isArray( x ) ) {\n\t\t\tx = [ x ];\n\t\t}\n\t\tconst dMatrix = omitMissing ? designMatrixMissing : designMatrix;\n\t\tconst { matrix, predictors, yvalues, nobs } = dMatrix( x, y, data, quantitative, intercept, success );\n\t\treturn {\n\t\t\tresult: irls( matrix, yvalues, nobs ),\n\t\t\tpredictors: predictors\n\t\t};\n\t} catch ( _ ) {\n\t\treturn {};\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Logistic regression.\n*\n* @property {Object} data - object of value arrays\n* @property {(string|Factor)} y - outcome variable\n* @property {*} success - success category of `y`\n* @property {(string|Factor|Array<(string|Factor)>)} x - one or more predictor variables\n* @property {Array<string>} quantitative - array of variables in `data` that are `quantitative`\n* @property {boolean} omitMissing - controls whether to omit missing values\n* @property {boolean} intercept - controls whether to fit a model with an intercept term\n* @property {Function} onPredict - callback invoked with predictions and residuals after model fitting\n*/\nclass LogisticRegression extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tCOUNTER += 1;\n\t\tlet { y, success, x, intercept, omitMissing, data, quantitative } = props;\n\t\tconst { result, predictors } = fitModel({ y, success, x, intercept, omitMissing, data, quantitative });\n\t\tthis.state = {\n\t\t\tprobabilityThreshold: 0.5,\n\t\t\tresult,\n\t\t\tpredictors,\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.success !== prevState.success ||\n\t\t\tnextProps.omitMissing !== prevState.omitMissing\n\t\t) {\n\t\t\tconst { y, success, x, intercept, omitMissing, data, quantitative } = nextProps;\n\t\t\tconst newState = {\n\t\t\t\t...fitModel({ y, success, x, intercept, omitMissing, data, quantitative }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\thandlePredict = () => {\n\t\tlet { x, y, data, quantitative, intercept, success } = this.props;\n\t\tif ( !isArray( x ) ) {\n\t\t\tx = [ x ];\n\t\t}\n\t\tconst { matrix, yvalues } = designMatrix( x, y, data, quantitative, intercept, success );\n\t\tconst probs = this.state.result.predict( matrix );\n\t\tconst resid = subtract( probs, yvalues );\n\t\tconst yhat = probs.map( x => x > this.state.probabilityThreshold );\n\t\tthis.props.onPredict( yhat, probs, resid, COUNTER );\n\t}\n\n\trender() {\n\t\tconst { result } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !result ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('logistic-title', { y: this.props.y, counter: COUNTER })}</span>\n\t\t\t\t{summaryTable( this.state.predictors, this.props.intercept, result, this.props.t )}\n\t\t\t\t<i>{result.converged ? t('fisher-scoring-converged', { n: result.iterations }) : t('fisher-scoring-not-converged', { n: result.iterations })}</i>\n\t\t\t\t<p>{t('aic')}: {roundn( result.aic, -3 )}</p>\n\t\t\t\t{this.props.onPredict ? <ButtonGroup>\n\t\t\t\t\t<Tooltip tooltip={t('use-model-to-predict-tooltip-logistic')} >\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={this.handlePredict} >\n\t\t\t\t\t\t\t{this.props.t('use-model-to-predict')}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t\t<InputGroup size=\"sm\" >\n\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t<InputGroup.Text>{t('threshold')}:</InputGroup.Text>\n\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tdefaultValue={0.5}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tonChange={( event ) => {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tprobabilityThreshold: event.target.value\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</InputGroup>\n\t\t\t\t</ButtonGroup> : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nLogisticRegression.defaultProps = {\n\tomitMissing: false,\n\tintercept: true,\n\tonPredict: null\n};\n\nLogisticRegression.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tsuccess: PropTypes.any.isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\tomitMissing: PropTypes.bool,\n\tintercept: PropTypes.bool,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( 'models' )( withPropCheck( LogisticRegression ) );\n","/**\n* Computes a matrix product of a n x p matrix and a column vector of length p.\n*\n* @param {Matrix} A - n x p matrix\n* @param {Array} b - p x 1 column vector\n* @returns {Array} result of matrix multiplication\n*/\nfunction mmult( A, b ) {\n\tconst n = A.shape[ 0 ];\n\tconst p = A.shape[ 1 ];\n\n\tlet ret = new Float64Array( n );\n\tfor ( let i = 0; i < n; i++ ) {\n\t\t\tlet sum = 0;\n\t\t\tfor ( let j = 0; j < p; j++ ) {\n\t\t\t\tsum += A.get( i, j ) * b[ j ];\n\t\t\t}\n\t\t\tret[ i ] = sum;\n\t}\n\treturn ret;\n}\n\n\n// EXPORTS //\n\nexport default mmult;\n","// MODULES //\n\nimport isArrayLike from '@stdlib/assert/is-array-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\n\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @param {NumberArray} arr - input array\n* @param {(NumberArray|number)} x - either an array of equal length or a scalar\n* @returns {NumberArray} output array\n*/\nfunction subtract( arr, x ) {\n\tconst isArr = isArrayLike( x );\n\tif ( !isArrayLike( arr ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Must provide an array. Value: `' + arr + '`.' );\n\t}\n\tif ( !isArr && !isNumber( x ) ) {\n\t\tthrow new TypeError( 'invalid input argument. Second argument must either be an array or number primitive. Value: `' + x + '`.' );\n\t}\n\tconst len = arr.length;\n\tconst out = new Array( len );\n\n\t// Case 1: x is an array\n\tif ( isArr ) {\n\t\tif ( len !== x.length ) {\n\t\t\tthrow new Error( 'invalid input argument. Array to be added must have a length equal to that of the input array.' );\n\t\t}\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x[ i ];\n\t\t}\n\t}\n\t// Case 2: scalar\n\telse {\n\t\tfor ( let i = 0; i < len; i++ ) {\n\t\t\tout[ i ] = arr[ i ] - x;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default subtract;\n","/**\n* Copyright (C) 2020-present The ISLE Authors\n*\n* The isle-dashboard program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Affero General Public License as\n* published by the Free Software Foundation, either version 3 of the\n* License, or (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Affero General Public License for more details.\n*\n* You should have received a copy of the GNU Affero General Public License\n* along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// MODULES //\n\nimport ndarray from '@stdlib/ndarray/ctor';\n\n\n// MAIN //\n\n/**\n* Transposes a matrix.\n*\n* @param {Matrix} X - input matrix (2d `ndarray`)\n* @returns matrix transpose\n*/\nconst transpose = ( X ) => {\n\tconst shape = [ X.shape[ 1 ], X.shape[ 0 ] ];\n\tconst strides = [ X.strides[ 1 ], X.strides[ 0 ] ];\n\tconst offset = X.offset;\n\tconst order = X.order;\n\treturn ndarray( 'float64', X._buffer, shape, strides, offset, order );\n};\n\n\n// EXPORTS //\n\nexport default transpose;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Compute `x * ln(y)` so that the result is `0` if `x = 0`.\n*\n* @module @stdlib/math/base/special/xlogy\n*\n* @example\n* var xlogy = require( '@stdlib/math/base/special/xlogy' );\n*\n* var out = xlogy( 3.0, 2.0 );\n* // returns ~2.079\n*\n* out = xlogy( 1.5, 5.9 );\n* // returns ~2.662\n*\n* out = xlogy( 0.9, 1.0 );\n* // returns 0.0\n*\n* out = xlogy( 0.0, -2.0 );\n* // returns 0.0\n*\n* out = xlogy( 1.5, NaN );\n* // returns NaN\n*\n* out = xlogy( 0.0, NaN );\n* // returns NaN\n*\n* out = xlogy( NaN, 2.3 );\n* // returns NaN\n*/\n// MODULES //\n\nvar xlogy = require('./xlogy.js'); // EXPORTS //\n\n\nmodule.exports = xlogy;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar isnan = require('./../../../../base/assert/is-nan');\n\nvar ln = require('./../../../../base/special/ln'); // MAIN //\n\n/**\n* Computes `x * ln(y)` so that the result is `0` if `x = 0`.\n*\n* @param {number} x - input value\n* @param {number} y - input value\n* @returns {number} function value\n*\n* @example\n* var out = xlogy( 3.0, 2.0 );\n* // returns ~2.079\n*\n* @example\n* var out = xlogy( 1.5, 5.9 );\n* // returns ~2.662\n*\n* @example\n* var out = xlogy( 0.9, 1.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogy( 0.0, -2.0 );\n* // returns 0.0\n*\n* @example\n* var out = xlogy( 1.5, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogy( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var out = xlogy( NaN, 2.3 );\n* // returns NaN\n*/\n\n\nfunction xlogy(x, y) {\n  if (x === 0.0 && !isnan(y)) {\n    return 0.0;\n  }\n\n  return x * ln(y);\n} // EXPORTS //\n\n\nmodule.exports = xlogy;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar constantFunction = require('@stdlib/utils/constant-function');\n\nvar isnan = require('@stdlib/math/base/assert/is-nan'); // MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0.8 );\n* var y = pmf( 0.0 );\n* // returns 0.2\n*\n* y = pmf( 1.0 );\n* // returns 0.8\n*/\n\n\nfunction factory(p) {\n  if (isnan(p) || p < 0.0 || p > 1.0) {\n    return constantFunction(NaN);\n  }\n\n  return pmf;\n  /**\n  * Evaluates the probability mass function (PMF) for a Bernoulli distribution.\n  *\n  * @private\n  * @param {number} x - input value\n  * @returns {Probability} evaluated PMF\n  *\n  * @example\n  * var y = pmf( 2.0 );\n  * // returns <number>\n  */\n\n  function pmf(x) {\n    if (isnan(x)) {\n      return NaN;\n    }\n\n    if (x === 0.0) {\n      return 1.0 - p;\n    }\n\n    if (x === 1.0) {\n      return p;\n    }\n\n    return 0.0;\n  }\n} // EXPORTS //\n\n\nmodule.exports = factory;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n/**\n* Bernoulli distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/bernoulli/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/bernoulli/pmf' );\n*\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* y = pmf( 1.0, 0.7 );\n* // returns 0.7\n*\n* y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 0.5 );\n* y = mypmf( 2.0 );\n* // returns 0.0\n*\n* y = mypmf( 1.0 );\n* // returns 0.5\n*/\n// MODULES //\n\nvar setReadOnly = require('@stdlib/utils/define-nonenumerable-read-only-property');\n\nvar pmf = require('./pmf.js');\n\nvar factory = require('./factory.js'); // MAIN //\n\n\nsetReadOnly(pmf, 'factory', factory); // EXPORTS //\n\nmodule.exports = pmf;","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar isnan = require('@stdlib/math/base/assert/is-nan'); // MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a Bernoulli distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 1.0, 0.3 );\n* // returns 0.3\n*\n* @example\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* @example\n* var y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.8, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = pmf( 1.0, 1.5 );\n* // returns NaN\n*/\n\n\nfunction pmf(x, p) {\n  if (isnan(x) || isnan(p) || p < 0.0 || p > 1.0) {\n    return NaN;\n  }\n\n  if (x === 0.0) {\n    return 1.0 - p;\n  }\n\n  if (x === 1.0) {\n    return p;\n  }\n\n  return 0.0;\n} // EXPORTS //\n\n\nmodule.exports = pmf;","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport { hypotenuse } from './util';\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false\n    } = options;\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n    let swapped = false;\n    let a;\n\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone(); // eslint-disable-next-line no-console\n\n        console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n    let si = new Float64Array(ni);\n\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n\n          a.set(k, k, a.get(k, k) + 1);\n        }\n\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n\n          t = -t / a.get(k, k);\n\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n\n          e[k + 1] += 1;\n        }\n\n        e[k] = -e[k];\n\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n\n        U.set(j, j, 1);\n      }\n\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n\n            t = -t / U.get(k, k);\n\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n\n          U.set(k, k, 1 + U.get(k, k));\n\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n\n            t = -t / V.get(k + 1, k);\n\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n\n    while (p > 0) {\n      let k, kase;\n\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n\n        const alpha = Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n\n          let t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1:\n          {\n            let f = e[p - 2];\n            e[p - 2] = 0;\n\n            for (let j = p - 2; j >= k; j--) {\n              let t = hypotenuse(s[j], f);\n              let cs = s[j] / t;\n              let sn = f / t;\n              s[j] = t;\n\n              if (j !== k) {\n                f = -sn * e[j - 1];\n                e[j - 1] = cs * e[j - 1];\n              }\n\n              if (wantv) {\n                for (let i = 0; i < n; i++) {\n                  t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                  V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                  V.set(i, j, t);\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 2:\n          {\n            let f = e[k - 1];\n            e[k - 1] = 0;\n\n            for (let j = k; j < p; j++) {\n              let t = hypotenuse(s[j], f);\n              let cs = s[j] / t;\n              let sn = f / t;\n              s[j] = t;\n              f = -sn * e[j];\n              e[j] = cs * e[j];\n\n              if (wantu) {\n                for (let i = 0; i < m; i++) {\n                  t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                  U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                  U.set(i, j, t);\n                }\n              }\n            }\n\n            break;\n          }\n\n        case 3:\n          {\n            const scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));\n            const sp = s[p - 1] / scale;\n            const spm1 = s[p - 2] / scale;\n            const epm1 = e[p - 2] / scale;\n            const sk = s[k] / scale;\n            const ek = e[k] / scale;\n            const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n            const c = sp * epm1 * (sp * epm1);\n            let shift = 0;\n\n            if (b !== 0 || c !== 0) {\n              if (b < 0) {\n                shift = 0 - Math.sqrt(b * b + c);\n              } else {\n                shift = Math.sqrt(b * b + c);\n              }\n\n              shift = c / (b + shift);\n            }\n\n            let f = (sk + sp) * (sk - sp) + shift;\n            let g = sk * ek;\n\n            for (let j = k; j < p - 1; j++) {\n              let t = hypotenuse(f, g);\n              if (t === 0) t = Number.MIN_VALUE;\n              let cs = f / t;\n              let sn = g / t;\n\n              if (j !== k) {\n                e[j - 1] = t;\n              }\n\n              f = cs * s[j] + sn * e[j];\n              e[j] = cs * e[j] - sn * s[j];\n              g = sn * s[j + 1];\n              s[j + 1] = cs * s[j + 1];\n\n              if (wantv) {\n                for (let i = 0; i < n; i++) {\n                  t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                  V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                  V.set(i, j, t);\n                }\n              }\n\n              t = hypotenuse(f, g);\n              if (t === 0) t = Number.MIN_VALUE;\n              cs = f / t;\n              sn = g / t;\n              s[j] = t;\n              f = cs * e[j] + sn * s[j + 1];\n              s[j + 1] = -sn * e[j] + cs * s[j + 1];\n              g = sn * e[j + 1];\n              e[j + 1] = cs * e[j + 1];\n\n              if (wantu && j < m - 1) {\n                for (let i = 0; i < m; i++) {\n                  t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                  U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                  U.set(i, j, t);\n                }\n              }\n            }\n\n            e[p - 2] = f;\n            iter = iter + 1;\n            break;\n          }\n\n        case 4:\n          {\n            if (s[k] <= 0) {\n              s[k] = s[k] < 0 ? -s[k] : 0;\n\n              if (wantv) {\n                for (let i = 0; i <= pp; i++) {\n                  V.set(i, k, -V.get(i, k));\n                }\n              }\n            }\n\n            while (k < pp) {\n              if (s[k] >= s[k + 1]) {\n                break;\n              }\n\n              let t = s[k];\n              s[k] = s[k + 1];\n              s[k + 1] = t;\n\n              if (wantv && k < n - 1) {\n                for (let i = 0; i < n; i++) {\n                  t = V.get(i, k + 1);\n                  V.set(i, k + 1, V.get(i, k));\n                  V.set(i, k, t);\n                }\n              }\n\n              if (wantu && k < m - 1) {\n                for (let i = 0; i < m; i++) {\n                  t = U.get(i, k + 1);\n                  U.set(i, k + 1, U.get(i, k));\n                  U.set(i, k, t);\n                }\n              }\n\n              k++;\n            }\n\n            iter = 0;\n            p--;\n            break;\n          }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n\n}","export function hypotenuse(a, b) {\n  let r = 0;\n\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n\n  return 0;\n}","import { AbstractMatrix } from '../matrix';\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n}"],"names":["LuDecomposition","constructor","matrix","i","j","k","p","s","t","v","LUcolj","kmax","lu","clone","rows","columns","pivotVector","Float64Array","pivotSign","get","Math","min","set","abs","this","LU","isSingular","data","col","solve","value","Error","count","X","subMatrixRow","determinant","isSquare","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","Array","from","QrDecomposition","qr","m","n","rdiag","nrm","QR","Rdiag","isFullRank","subMatrix","orthogonalMatrix","leftHandSide","rightHandSide","useSVD","A","B","shape","result","Matrix","Bcolj","b","ndarray","x","y","len","length","out","sum","arr","res","variance","mu","logitLinkInv","eta","etai","EPS","exp","logitMuEta","val","pow","aic","numParameters","logLik","ln","dbern","devResids","wt","mui","yi","xlogy","calcW","weights","gprime","varg","calcZ","stdErrors","yhat","w","nrow","ncol","errs","sqrt","nObs","Xt","transpose","fill","mustart","beta","logitLink","devOld","converged","z","wz","multiply","Xw","colMult","multiplyMatrices","mmult","to1DArray","dev","coefficients","predict","sigmoid","fitted","iterations","COUNTER","isMissing","isnan","isUndefinedOrNull","isNonMissingNumber","isNumber","designMatrix","quantitative","intercept","success","predictors","hash","nobs","values","contains","push","categories","extractCategoriesFromValues","buffer","colIndex","yvalues","map","designMatrixMissing","missing","row","concat","fitModel","omitMissing","isArray","dMatrix","irls","_","LogisticRegression","Component","props","super","probs","state","resid","subtract","probabilityThreshold","onPredict","nextProps","prevState","render","style","overflowX","width","className","counter","bordered","size","placement","tooltip","displayMode","raw","toFixed","pnorm","name","idx","Number","tStat","pVal","key","summaryTable","roundn","ButtonGroup","Button","variant","onClick","handlePredict","InputGroup","FormControl","type","max","defaultValue","step","onChange","event","setState","target","Alert","defaultProps","propTypes","PropTypes","Factor","isRequired","withTranslation","withPropCheck","ret","isArr","isArrayLike","TypeError","strides","offset","order","_buffer","module","exports","constantFunction","NaN","setReadOnly","pmf","SingularValueDecomposition","options","isEmpty","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","a","wantu","Boolean","wantv","swapped","aux","console","warn","nu","ni","U","V","e","work","si","nct","nrt","mrc","pp","iter","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","scale","sp","spm1","epm1","sk","ek","c","shift","g","tmp","Y","threshold","scols","Ls","rightSingularVectors","VL","mmul","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","condition","norm2","rank","tol","r","ii","diagonal","leftSingularVectors","diagonalMatrix","hypotenuse","WrapperMatrix2D","rowIndex","columnIndex"],"sourceRoot":""}