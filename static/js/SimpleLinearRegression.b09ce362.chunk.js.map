{"version":3,"sources":["../node_modules/@stdlib/stats/incr/sumabs2/lib/index.js","../node_modules/@stdlib/stats/incr/sumabs2/lib/main.js","../node_modules/@isle-project/components/models/simple-linear-regression/main.js"],"names":[],"mappings":"qKA6CA,GAAI,aAAc,oBAAS,OAK3B,OAAO,QAAU,a,uBCRjB,sBAAuB,CACtB,GAAI,KAAM,EACN,IACJ,MAAO,aASP,qBAAsB,EAAI,CACzB,MAAK,WAAU,SAAW,EAChB,IAAQ,IAAM,KAExB,KAAM,GACN,KAAO,EAAI,EACJ,MAOT,OAAO,QAAU,a,85HCtCjB,GAAI,SAAU,EACd,KAAM,GAAI,IAKV,+BAAgC,EAAG,EAAI,CACtC,KAAM,KAAM,sEAAM,GACZ,IAAM,sEAAM,GAClB,GAAI,IAAK,EACL,GAAK,EACT,KAAM,KAAM,EAAE,OACd,OAAU,GAAI,EAAG,EAAI,IAAK,IAAM,CAC/B,GAAI,QAAS,EAAG,GAAM,IAClB,OAAS,EAAG,GAAM,IACtB,IAAM,OAAS,OACf,IAAM,OAAS,OAEhB,KAAM,OAAQ,GAAK,GAEnB,MAAO,CAAE,KADI,IAAM,MAAM,IACV,MAAO,GAAI,EAAG,GAAI,GAGlC,uBAAuB,CAAE,EAAG,EAAG,KAAM,MAAO,aAAe,CAC1D,KAAM,IAAK,KAAM,GACX,GAAK,KAAM,GACX,OAAS,KAAM,OACrB,GAAK,YAAc,CAClB,KAAM,OAAQ,GACR,MAAQ,GACR,UAAY,GAClB,GAAK,OACJ,OAAU,GAAI,EAAG,EAAI,GAAG,OAAQ,IAE9B,CAAC,mEAAW,OAAQ,KACpB,8EAAoB,GAAI,KACxB,8EAAoB,GAAI,KAExB,OAAM,KAAM,GAAI,IAChB,MAAM,KAAM,GAAI,IAChB,UAAU,KAAM,OAAQ,SAI1B,QAAU,GAAI,EAAG,EAAI,GAAG,OAAQ,IAE9B,8EAAoB,GAAI,KACxB,8EAAoB,GAAI,KAExB,OAAM,KAAM,GAAI,IAChB,MAAM,KAAM,GAAI,KAInB,MAAO,CACN,GAAI,MACJ,GAAI,MACJ,OAAQ,WAGV,MAAO,CACN,GACA,GACA,QAkBF,oCAAqC,6CAAU,CAC9C,YAAa,MAAQ,CACpB,MAAO,OAEP,SAAW,EACX,KAAM,CAAE,EAAG,EAAG,KAAM,MAAO,aAAgB,MAC3C,KAAK,MAAQ,cAAc,CAAE,EAAG,EAAG,KAAM,MAAO,oBAG1C,0BAA0B,UAAW,UAAY,CACvD,GACC,UAAU,OAAS,UAAU,MAC7B,UAAU,IAAM,UAAU,GAC1B,UAAU,IAAM,UAAU,GAC1B,UAAU,QAAU,UAAU,OAC9B,UAAU,cAAgB,UAAU,YACnC,CACD,KAAM,CAAE,EAAG,EAAG,UAAW,YAAa,KAAM,OAAU,UACtD,MAAO,eAAc,CAAE,EAAG,EAAG,UAAW,YAAa,KAAM,QAE5D,MAAO,MAGR,QAAS,CACR,KAAM,CAAE,GAAI,GAAI,QAAW,KAAK,MAC1B,CAAE,EAAG,EAAG,MAAO,KAAM,GAAM,KAAK,MACtC,GAAI,QACJ,GAAI,CACH,GAAK,MAAQ,CACZ,KAAM,QAAS,2DAAI,GAAI,OAAQ,mEACzB,IAAM,4DAAK,GAAI,GAAI,OAAQ,uBACjC,OAAS,iDAAC,MAAD,CAAK,MAAO,CAAE,UAAW,OAAQ,MAAO,SAChD,iDAAC,QAAD,KAAQ,EAAE,oBAAqB,CAAE,EAAG,KACpC,iDAAC,IAAD,KACC,iDAAC,IAAD,KAAI,EAAE,cAAc,IAAE,MAAM,MAE5B,4DAAc,gEAAW,IAAK,CAAE,KAAM,MAAS,CAC/C,KAAM,CAAE,KAAM,MAAO,GAAI,IAAO,KAC1B,OAAS,oEACT,MAAQ,oEACR,QAAU,oEACV,IAAM,8EAAc,GAAG,OAAS,GACtC,OAAU,GAAI,EAAG,EAAI,GAAG,OAAQ,IAAM,CACrC,KAAM,MAAO,KAAO,MAAQ,GAAI,GAChC,OAAQ,KAAO,GAAI,IACnB,MAAO,GAAI,IACX,QAAS,GAAI,GAAM,OAAQ,MAE5B,KAAM,QAAS,SAAa,IAAG,OAAS,GAClC,SAAW,OAAS,UACpB,QAAU,sEAAM,UAChB,aAAkB,EAAE,GAAG,OAAU,OAAS,QAAY,UACtD,YAAc,sEAAM,cACpB,OAAS,MAAQ,QACjB,WAAa,KAAO,YAC1B,MACC,kDAAC,MAAD,CAAK,IAAK,SAAS,OAClB,iDAAC,QAAD,KAAQ,IAAI,KACZ,iDAAC,8DAAD,CAAO,SAAQ,GAAC,KAAK,MACpB,iDAAC,QAAD,KACC,iDAAC,KAAD,KACC,iDAAC,KAAD,KAAK,EAAE,aACP,iDAAC,KAAD,KAAK,EAAE,gBACP,iDAAC,KAAD,KAAK,EAAE,cACP,iDAAC,KAAD,KAAK,GACL,iDAAC,KAAD,KAAK,EAAE,cAGT,iDAAC,QAAD,KACC,iDAAC,KAAD,KACC,iDAAC,KAAD,KAAK,EAAE,cACP,iDAAC,KAAD,KAAK,KAAK,QAAS,IACnB,iDAAC,KAAD,KAAK,YAAY,QAAS,IAC1B,iDAAC,KAAD,KAAK,WAAW,QAAS,IACzB,iDAAC,KAAD,KAAK,EAAO,GAAI,IAAK,qEAAK,cAAiB,QAAS,KAErD,iDAAC,KAAD,KACC,iDAAC,KAAD,KAAK,GACL,iDAAC,KAAD,KAAK,MAAM,QAAS,IACpB,iDAAC,KAAD,KAAK,QAAQ,QAAS,IACtB,iDAAC,KAAD,KAAK,OAAO,QAAS,IACrB,iDAAC,KAAD,KAAK,EAAO,GAAI,IAAK,qEAAK,UAAa,QAAS,WAOpD,KAAK,MAAM,UAAY,iDAAC,gEAAD,CAAS,QAAS,EAAE,iCAC5C,iDAAC,+DAAD,CAAQ,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAM,CACpD,KAAM,SAAY,OAAU,CAC3B,KAAM,KAAK,MAAM,GACX,IAAK,MAAM,GACX,OAAS,GAAI,cAAc,IAAG,QAC9B,UAAY,GAAI,cAAc,IAAG,QACjC,QAAS,MAAM,OACrB,OAAU,GAAI,EAAG,EAAI,OAAO,OAAQ,IAAM,CACzC,KAAM,CAAE,KAAM,OAAU,IAAK,QAAQ,IACrC,OAAQ,GAAM,KAAO,MAAQ,IAAI,GACjC,UAAW,GAAM,IAAI,GAAM,OAAQ,GAEpC,MAAO,CAAE,OAAQ,YAElB,KAAK,MAAM,UAAW,QAAS,WAC5B,KAAK,MAAM,EAAE,0BACL,KACX,KAAK,MAAM,cAAgB,iDAAC,+DAAD,CAAQ,QAAQ,YAAY,KAAK,KAAK,MAAO,CAAE,WAAY,GAAK,QAAS,IAAM,CAC3G,KAAM,KAAK,KAAM,GACX,IAAK,KAAM,GACX,OAAS,GAAI,cAAc,IAAG,QAC9B,UAAY,GAAI,cAAc,IAAG,QACjC,QAAS,KAAM,OACrB,OAAU,GAAI,EAAG,EAAI,OAAO,OAAQ,IAAM,CACzC,KAAM,CAAE,KAAM,OAAU,IAAK,QAAQ,IACrC,OAAQ,GAAM,KAAO,MAAQ,IAAI,GACjC,UAAW,GAAM,IAAI,GAAM,OAAQ,GAEpC,KAAM,QAAS,iDAAC,gEAAD,8BACd,UAAS,GACT,SAAQ,GAAC,IAAG,IACR,0EAAsB,UAAW,cAHvB,CAId,KAAM,CAAE,KAAM,iCAAkC,EAAG,IAAI,EAAG,QAErD,aAAe,iDAAC,gEAAD,CACpB,UAAS,GAAC,SAAQ,GAAC,IAAG,GACtB,KAAM,CACL,CACC,EAAG,OACH,EAAG,UACH,KAAM,YAGR,OAAQ,CACP,MAAO,CACN,MAAO,EAAE,kBAEV,MAAO,CACN,MAAO,EAAE,cAEV,MAAO,EAAE,wBAEV,KAAM,CAAE,KAAM,kCAAmC,EAAG,IAAI,EAAG,OAEtD,KAAO,iDAAC,yEAAD,CACZ,KAAM,CAAE,UAAa,WACrB,SAAS,YACT,MAAO,EAAE,yBAA0B,CAAE,EAAG,gBAEzC,KAAK,MAAM,cAAc,CAAE,OAAQ,KAAM,iBAExC,EAAE,sBACQ,UAGT,CACJ,KAAM,CAAE,KAAM,OAAU,sBAAuB,GAAI,IAC7C,OAAS,oEACT,MAAQ,oEACR,QAAU,oEACV,MAAQ,sEAAM,IACd,IAAM,8EAAc,GAAG,OAAS,GACtC,OAAU,GAAI,EAAG,EAAI,GAAG,OAAQ,IAAM,CACrC,KAAM,MAAO,KAAO,MAAQ,GAAI,GAChC,OAAQ,KAAO,GAAI,IACnB,MAAO,GAAI,IACX,QAAS,GAAI,GAAM,OAEpB,KAAM,QAAS,SAAa,IAAG,OAAS,GAClC,SAAW,OAAS,UACpB,QAAU,sEAAM,UAChB,aAAkB,EAAE,GAAG,OAAU,OAAS,QAAY,UACtD,YAAc,sEAAM,cACpB,OAAS,MAAQ,QACjB,WAAa,KAAO,YAC1B,OAAS,iDAAC,MAAD,CAAK,MAAO,CAAE,UAAW,OAAQ,MAAO,SAChD,iDAAC,QAAD,KAAQ,EAAE,0BAA2B,CAAE,EAAG,EAAG,QAAS,WACtD,iDAAC,8DAAD,CAAO,SAAQ,GAAC,KAAK,MACpB,iDAAC,QAAD,KACC,iDAAC,KAAD,KACC,iDAAC,KAAD,KAAK,EAAE,aACP,iDAAC,KAAD,KAAK,EAAE,gBACP,iDAAC,KAAD,KAAK,EAAE,cACP,iDAAC,KAAD,KAAK,GACL,iDAAC,KAAD,KAAK,EAAE,cAGT,iDAAC,QAAD,KACC,iDAAC,KAAD,KACC,iDAAC,KAAD,KAAK,EAAE,cACP,iDAAC,KAAD,KAAK,KAAK,QAAS,IACnB,iDAAC,KAAD,KAAK,YAAY,QAAS,IAC1B,iDAAC,KAAD,KAAK,WAAW,QAAS,IACzB,iDAAC,KAAD,KAAK,EAAO,GAAI,IAAK,qEAAK,cAAiB,QAAS,KAErD,iDAAC,KAAD,KACC,iDAAC,KAAD,KAAK,GACL,iDAAC,KAAD,KAAK,MAAM,QAAS,IACpB,iDAAC,KAAD,KAAK,QAAQ,QAAS,IACtB,iDAAC,KAAD,KAAK,OAAO,QAAS,IACrB,iDAAC,KAAD,KAAK,EAAO,GAAI,IAAK,qEAAK,UAAa,QAAS,OAIjD,KAAK,MAAM,UAAY,iDAAC,gEAAD,CAAS,QAAS,EAAE,iCAC5C,iDAAC,+DAAD,CAAQ,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAM,CACpD,KAAM,SAAY,OAAU,CAC3B,KAAM,KAAK,MAAM,GACX,IAAK,MAAM,GACX,OAAS,GAAI,OAAO,IAAG,QACvB,UAAY,GAAI,OAAO,IAAG,QAChC,OAAU,GAAI,EAAG,EAAI,OAAO,OAAQ,IACnC,OAAQ,GAAM,KAAO,MAAQ,IAAI,GACjC,UAAW,GAAM,IAAI,GAAM,OAAQ,GAEpC,MAAO,CAAE,OAAQ,YAElB,KAAK,MAAM,UAAW,QAAS,WAC5B,KAAK,MAAM,EAAE,0BACL,KACX,KAAK,MAAM,cAAgB,iDAAC,+DAAD,CAAQ,QAAQ,YAAY,KAAK,KAAK,MAAO,CAAE,WAAY,GAAK,QAAS,IAAM,CAC3G,KAAM,KAAK,KAAM,GACX,IAAK,KAAM,GACX,KAAO,GAAI,OAAO,IAAG,QACrB,MAAQ,GAAI,OAAO,IAAG,QAC5B,OAAU,GAAI,EAAG,EAAI,KAAK,OAAQ,IACjC,KAAM,GAAM,KAAO,MAAQ,IAAI,GAC/B,MAAO,GAAM,IAAI,GAAM,KAAM,GAE9B,KAAM,QAAS,iDAAC,gEAAD,8BACd,UAAS,GACT,SAAQ,GAAC,IAAG,IACR,0EAAsB,MAAO,cAHnB,CAId,KAAM,CAAE,KAAM,iCAAkC,EAAG,IAAI,EAAG,QAErD,KAAO,iDAAC,yEAAD,CACZ,KAAM,CAAE,UAAa,OACrB,SAAS,YACT,MAAO,EAAE,yBAA0B,CAAE,EAAG,gBAEnC,aAAe,iDAAC,gEAAD,CACpB,UAAS,GAAC,SAAQ,GAAC,IAAG,GACtB,KAAM,CACL,CACC,EAAG,KACH,EAAG,MACH,KAAM,UACN,KAAM,KAAK,OAAS,IAAO,YAAc,YAG3C,OAAQ,CACP,MAAO,CACN,MAAO,EAAE,kBAEV,MAAO,CACN,MAAO,EAAE,cAEV,MAAO,EAAE,wBAEV,KAAM,CAAE,KAAM,kCAAmC,EAAG,IAAI,EAAG,OAE5D,KAAK,MAAM,cAAc,CAAE,OAAQ,KAAM,iBAExC,EAAE,sBACQ,MAGd,MAAO,cACE,EADF,CAEP,MAAO,kDAAC,8DAAD,CAAO,QAAQ,UAAU,EAAE,yBAQrC,uBAAuB,aAAe,CACrC,MAAO,KACP,YAAa,GACb,cAAe,KACf,UAAW,MAGZ,uBAAuB,UAAY,CAClC,KAAM,qEACN,EAAG,qEACH,EAAG,qEACH,MAAO,6DAAoB,CAC1B,0DACA,8DAAsB,uEAEvB,YAAa,wDACb,cAAe,wDACf,UAAW,yDAMZ,4BAAe,mDAAiB,CAAE,SAAU,WAAc,mEAAe","file":"static/js/SimpleLinearRegression.b09ce362.chunk.js","sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of squared absolute values incrementally.\n*\n* @module @stdlib/stats/incr/sumabs2\n*\n* @example\n* var incrsumabs2 = require( '@stdlib/stats/incr/sumabs2' );\n*\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\n\n// MODULES //\n\nvar incrsumabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\nfunction incrsumabs2() {\n\tvar sum = 0.0;\n\tvar FLG;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum : null;\n\t\t}\n\t\tFLG = true;\n\t\tsum += x * x;\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs2;\n","// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Table from '@isle-project/components/table';\nimport Tooltip from '@isle-project/components/tooltip';\nimport objectValues from '@stdlib/utils/values';\nimport mapValues from '@stdlib/utils/map-values';\nimport incrsumabs2 from '@stdlib/stats/incr/sumabs2';\nimport tCDF from '@stdlib/stats/base/dists/t/cdf';\nimport abs from '@stdlib/math/base/special/abs';\nimport sqrt from '@stdlib/math/base/special/sqrt';\nimport mean from '@isle-project/utils/statistic/mean';\nimport Plotly from '@isle-project/components/plotly';\nimport Histogram from '@isle-project/components/plots/histogram';\nimport { generateQQPlotConfig } from '@isle-project/components/plots/qqplot';\nimport by2 from '@isle-project/utils/by2';\nimport by from '@isle-project/utils/by';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\nimport isNonMissingNumber from '@isle-project/utils/is-non-missing-number';\nimport isMissing from '@isle-project/utils/is-missing';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\nconst T = 't';\n\n\n// FUNCTIONS //\n\nfunction calculateCoefficients( x, y ) {\n\tconst xmu = mean( x );\n\tconst ymu = mean( y );\n\tlet C1 = 0;\n\tlet C2 = 0;\n\tconst len = x.length;\n\tfor ( let i = 0; i < len; i++ ) {\n\t\tlet xdelta = x[ i ] - xmu;\n\t\tlet ydelta = y[ i ] - ymu;\n\t\tC1 += xdelta * xdelta;\n\t\tC2 += xdelta * ydelta;\n\t}\n\tconst slope = C2 / C1;\n\tconst yint = ymu - slope*xmu;\n\treturn { yint, slope, xg: x, yg: y };\n}\n\nfunction extractValues({ x, y, data, group, omitMissing }) {\n\tconst xd = data[ x ];\n\tconst yd = data[ y ];\n\tconst groups = data[ group ];\n\tif ( omitMissing ) {\n\t\tconst xvals = [];\n\t\tconst yvals = [];\n\t\tconst groupvals = [];\n\t\tif ( groups ) {\n\t\t\tfor ( let i = 0; i < xd.length; i++ ) {\n\t\t\t\tif (\n\t\t\t\t\t!isMissing( groups[ i ] ) &&\n\t\t\t\t\tisNonMissingNumber( xd[ i ] ) &&\n\t\t\t\t\tisNonMissingNumber( yd[ i ] )\n\t\t\t\t) {\n\t\t\t\t\txvals.push( xd[ i ] );\n\t\t\t\t\tyvals.push( yd[ i ] );\n\t\t\t\t\tgroupvals.push( groups[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( let i = 0; i < xd.length; i++ ) {\n\t\t\t\tif (\n\t\t\t\t\tisNonMissingNumber( xd[ i ] ) &&\n\t\t\t\t\tisNonMissingNumber( yd[ i ] )\n\t\t\t\t) {\n\t\t\t\t\txvals.push( xd[ i ] );\n\t\t\t\t\tyvals.push( yd[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\txd: xvals,\n\t\t\tyd: yvals,\n\t\t\tgroups: groupvals\n\t\t};\n\t}\n\treturn {\n\t\txd: xd,\n\t\tyd: yd,\n\t\tgroups: groups\n\t};\n}\n\n\n// MAIN //\n\n/**\n* Simple linear regression.\n*\n* @property {Object} data - object of value arrays\n* @property {string} x - explanatory variable\n* @property {string} y - response variable\n* @property {(string|Factor)} group - grouping variable\n* @property {boolean} omitMissing - controls whether to omit missing values in model fitting\n* @property {Function} onDiagnostics - callback invoked with diagnostic plots\n* @property {Function} onPredict - callback invoked with a predict function to make predictions for new data\n*/\nclass SimpleLinearRegression extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tCOUNTER += 1;\n\t\tconst { x, y, data, group, omitMissing } = props;\n\t\tthis.state = extractValues({ x, y, data, group, omitMissing });\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.group !== prevState.group ||\n\t\t\tnextProps.omitMissing !== prevState.omitMissing\n\t\t) {\n\t\t\tconst { x, y, intercept, omitMissing, data, group } = nextProps;\n\t\t\treturn extractValues({ x, y, intercept, omitMissing, data, group } );\n\t\t}\n\t\treturn null;\n\t}\n\n\trender() {\n\t\tconst { xd, yd, groups } = this.state;\n\t\tconst { x, y, group, data, t } = this.props;\n\t\tlet output;\n\t\ttry {\n\t\t\tif ( group ) {\n\t\t\t\tconst xmeans = by( xd, groups, mean );\n\t\t\t\tconst res = by2( xd, yd, groups, calculateCoefficients );\n\t\t\t\toutput = <div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t\t<label>{t('regression-y-on-x', { x, y })}</label>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<i>{t('grouped-by')} {group}:</i>\n\t\t\t\t\t</p>\n\t\t\t\t\t{objectValues( mapValues( res, ( elem, key ) => {\n\t\t\t\t\t\tconst { yint, slope, xg, yg } = elem;\n\t\t\t\t\t\tconst resAcc = incrsumabs2();\n\t\t\t\t\t\tconst x2Acc = incrsumabs2();\n\t\t\t\t\t\tconst x2mmAcc = incrsumabs2();\n\t\t\t\t\t\tconst cdf = tCDF.factory( yg.length - 2 );\n\t\t\t\t\t\tfor ( let i = 0; i < yg.length; i++ ) {\n\t\t\t\t\t\t\tconst pred = yint + slope * xg[ i ];\n\t\t\t\t\t\t\tresAcc( pred - yg[ i ] );\n\t\t\t\t\t\t\tx2Acc( xg[ i ] );\n\t\t\t\t\t\t\tx2mmAcc( xg[ i ] - xmeans[ key ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst sigma2 = resAcc() / ( yg.length - 2 );\n\t\t\t\t\t\tconst slopeVar = sigma2 / x2mmAcc();\n\t\t\t\t\t\tconst slopeSE = sqrt( slopeVar );\n\t\t\t\t\t\tconst interceptVar = ( (1/yg.length) * sigma2 * x2Acc() ) / x2mmAcc();\n\t\t\t\t\t\tconst interceptSE = sqrt( interceptVar );\n\t\t\t\t\t\tconst tSlope = slope / slopeSE;\n\t\t\t\t\t\tconst tIntercept = yint / interceptSE;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={`group-${key}`} >\n\t\t\t\t\t\t\t\t<label>{key}:</label>\n\t\t\t\t\t\t\t\t<Table bordered size=\"sm\" >\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('variable')}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('coefficient')}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('std-error')}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{T}</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>{t('p-value')}</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{t('intercept')}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{yint.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{interceptSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{tIntercept.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tIntercept ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{x}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{slope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{slopeSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{tSlope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tSlope ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}) )}\n\t\t\t\t\t{ this.props.onPredict ? <Tooltip tooltip={t('use-model-to-predict-tooltip')} >\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={() => {\n\t\t\t\t\t\t\tconst predict = ( data ) => {\n\t\t\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\t\t\tconst fitted = new Float64Array( yd.length );\n\t\t\t\t\t\t\t\tconst residuals = new Float64Array( yd.length );\n\t\t\t\t\t\t\t\tconst groups = data[ group ];\n\t\t\t\t\t\t\t\tfor ( let i = 0; i < fitted.length; i++ ) {\n\t\t\t\t\t\t\t\t\tconst { yint, slope } = res[ groups[ i ] ];\n\t\t\t\t\t\t\t\t\tfitted[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\t\t\tresiduals[ i ] = yd[ i ] - fitted[ i ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn { fitted, residuals };\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.props.onPredict( predict, COUNTER );\n\t\t\t\t\t\t}}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t\t</Tooltip> : null }\n\t\t\t\t\t{ this.props.onDiagnostics ? <Button variant=\"secondary\" size=\"sm\" style={{ marginLeft: 6 }} onClick={() => {\n\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\tconst fitted = new Float64Array( yd.length );\n\t\t\t\t\t\tconst residuals = new Float64Array( yd.length );\n\t\t\t\t\t\tconst groups = data[ group ];\n\t\t\t\t\t\tfor ( let i = 0; i < fitted.length; i++ ) {\n\t\t\t\t\t\t\tconst { yint, slope } = res[ groups[ i ] ];\n\t\t\t\t\t\t\tfitted[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\tresiduals[ i ] = yd[ i ] - fitted[ i ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst qqPlot = <Plotly\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\teditable fit\n\t\t\t\t\t\t\t{...generateQQPlotConfig( residuals, 'residuals' )}\n\t\t\t\t\t\t\tmeta={{ type: 'qqplot of regression residuals', x: xd, y: yd }}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tconst residualPlot = <Plotly\n\t\t\t\t\t\t\tdraggable editable fit\n\t\t\t\t\t\t\tdata={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx: fitted,\n\t\t\t\t\t\t\t\t\ty: residuals,\n\t\t\t\t\t\t\t\t\tmode: 'markers'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tlayout={{\n\t\t\t\t\t\t\t\txaxis: {\n\t\t\t\t\t\t\t\t\ttitle: t('fitted-values')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tyaxis: {\n\t\t\t\t\t\t\t\t\ttitle: t('residuals')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttitle: t('residuals-vs-fitted')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tmeta={{ type: 'regression residuals vs. fitted', x: xd, y: yd }}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tconst hist = <Histogram\n\t\t\t\t\t\t\tdata={{ 'Residuals': residuals }}\n\t\t\t\t\t\t\tvariable=\"Residuals\"\n\t\t\t\t\t\t\ttitle={t('plotly:histogram-title', { x: 'Residuals' })}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tthis.props.onDiagnostics([ qqPlot, hist, residualPlot ]);\n\t\t\t\t\t}} >\n\t\t\t\t\t\t{t('model-diagnostics')}\n\t\t\t\t\t</Button> : null }\n\t\t\t\t</div>;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst { yint, slope } = calculateCoefficients( xd, yd );\n\t\t\t\tconst resAcc = incrsumabs2();\n\t\t\t\tconst x2Acc = incrsumabs2();\n\t\t\t\tconst x2mmAcc = incrsumabs2();\n\t\t\t\tconst xmean = mean( xd );\n\t\t\t\tconst cdf = tCDF.factory( yd.length - 2 );\n\t\t\t\tfor ( let i = 0; i < yd.length; i++ ) {\n\t\t\t\t\tconst pred = yint + slope * xd[ i ];\n\t\t\t\t\tresAcc( pred - yd[ i ] );\n\t\t\t\t\tx2Acc( xd[ i ] );\n\t\t\t\t\tx2mmAcc( xd[ i ] - xmean );\n\t\t\t\t}\n\t\t\t\tconst sigma2 = resAcc() / ( yd.length - 2 );\n\t\t\t\tconst slopeVar = sigma2 / x2mmAcc();\n\t\t\t\tconst slopeSE = sqrt( slopeVar );\n\t\t\t\tconst interceptVar = ( (1/yd.length) * sigma2 * x2Acc() ) / x2mmAcc();\n\t\t\t\tconst interceptSE = sqrt( interceptVar );\n\t\t\t\tconst tSlope = slope / slopeSE;\n\t\t\t\tconst tIntercept = yint / interceptSE;\n\t\t\t\toutput = <div style={{ overflowX: 'auto', width: '100%' }} >\n\t\t\t\t\t<label>{t('simple-regression-title', { x, y, counter: COUNTER })}</label>\n\t\t\t\t\t<Table bordered size=\"sm\" >\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>{t('variable')}</th>\n\t\t\t\t\t\t\t\t<th>{t('coefficient')}</th>\n\t\t\t\t\t\t\t\t<th>{t('std-error')}</th>\n\t\t\t\t\t\t\t\t<th>{T}</th>\n\t\t\t\t\t\t\t\t<th>{t('p-value')}</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{t('intercept')}</td>\n\t\t\t\t\t\t\t\t<td>{yint.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{interceptSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{tIntercept.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tIntercept ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{x}</td>\n\t\t\t\t\t\t\t\t<td>{slope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{slopeSE.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{tSlope.toFixed( 4 )}</td>\n\t\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( tSlope ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</Table>\n\t\t\t\t\t{ this.props.onPredict ? <Tooltip tooltip={t('use-model-to-predict-tooltip')} >\n\t\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={() => {\n\t\t\t\t\t\t\tconst predict = ( data ) => {\n\t\t\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\t\t\tconst fitted = new Array( yd.length );\n\t\t\t\t\t\t\t\tconst residuals = new Array( yd.length );\n\t\t\t\t\t\t\t\tfor ( let i = 0; i < fitted.length; i++ ) {\n\t\t\t\t\t\t\t\t\tfitted[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\t\t\tresiduals[ i ] = yd[ i ] - fitted[ i ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn { fitted, residuals };\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.props.onPredict( predict, COUNTER );\n\t\t\t\t\t\t}}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t\t</Tooltip> : null }\n\t\t\t\t\t{ this.props.onDiagnostics ? <Button variant=\"secondary\" size=\"sm\" style={{ marginLeft: 6 }} onClick={() => {\n\t\t\t\t\t\tconst xd = data[ x ];\n\t\t\t\t\t\tconst yd = data[ y ];\n\t\t\t\t\t\tconst yhat = new Array( yd.length );\n\t\t\t\t\t\tconst resid = new Array( yd.length );\n\t\t\t\t\t\tfor ( let i = 0; i < yhat.length; i++ ) {\n\t\t\t\t\t\t\tyhat[ i ] = yint + slope * xd[ i ];\n\t\t\t\t\t\t\tresid[ i ] = yd[ i ] - yhat[ i ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst qqPlot = <Plotly\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\teditable fit\n\t\t\t\t\t\t\t{...generateQQPlotConfig( resid, 'residuals' )}\n\t\t\t\t\t\t\tmeta={{ type: 'qqplot of regression residuals', x: xd, y: yd }}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tconst hist = <Histogram\n\t\t\t\t\t\t\tdata={{ 'Residuals': resid }}\n\t\t\t\t\t\t\tvariable=\"Residuals\"\n\t\t\t\t\t\t\ttitle={t('plotly:histogram-title', { x: 'Residuals' })}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tconst residualPlot = <Plotly\n\t\t\t\t\t\t\tdraggable editable fit\n\t\t\t\t\t\t\tdata={[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx: yhat,\n\t\t\t\t\t\t\t\t\ty: resid,\n\t\t\t\t\t\t\t\t\tmode: 'markers',\n\t\t\t\t\t\t\t\t\ttype: yhat.length > 2000 ? 'scattergl' : 'scatter'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tlayout={{\n\t\t\t\t\t\t\t\txaxis: {\n\t\t\t\t\t\t\t\t\ttitle: t('fitted-values')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tyaxis: {\n\t\t\t\t\t\t\t\t\ttitle: t('residuals')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttitle: t('residuals-vs-fitted')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tmeta={{ type: 'regression residuals vs. fitted', x: xd, y: yd }}\n\t\t\t\t\t\t/>;\n\t\t\t\t\t\tthis.props.onDiagnostics([ qqPlot, hist, residualPlot ]);\n\t\t\t\t\t}} >\n\t\t\t\t\t\t{t('model-diagnostics')}\n\t\t\t\t\t</Button> : null }\n\t\t\t\t</div>;\n\t\t\t}\n\t\t\treturn output;\n\t\t} catch ( _ ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t}\n}\n\n\n// PROPERTIES //\n\nSimpleLinearRegression.defaultProps = {\n\tgroup: null,\n\tomitMissing: false,\n\tonDiagnostics: null,\n\tonPredict: null\n};\n\nSimpleLinearRegression.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tx: PropTypes.string.isRequired,\n\ty: PropTypes.string.isRequired,\n\tgroup: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]),\n\tomitMissing: PropTypes.bool,\n\tonDiagnostics: PropTypes.func,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( [ 'models', 'plotly' ] )( withPropCheck( SimpleLinearRegression ) );\n"],"sourceRoot":""}