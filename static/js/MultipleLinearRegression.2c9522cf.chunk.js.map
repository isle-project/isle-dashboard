{"version":3,"sources":["../node_modules/@isle-project/components/models/multiple-linear-regression/main.js","../node_modules/ml-regression-multivariate-linear/lib/index.js"],"names":[],"mappings":"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","file":"static/js/MultipleLinearRegression.2c9522cf.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport MLR from 'ml-regression-multivariate-linear';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport pow from '@stdlib/math/base/special/pow';\nimport round from '@stdlib/math/base/special/round';\nimport fCDF from '@stdlib/stats/base/dists/f/cdf';\nimport contains from '@stdlib/assert/contains';\nimport isArray from '@stdlib/assert/is-array';\nimport abs from '@stdlib/math/base/special/abs';\nimport tCDF from '@stdlib/stats/base/dists/t/cdf';\nimport Table from '@isle-project/components/table';\nimport Tooltip from '@isle-project/components/tooltip';\nimport Plotly from '@isle-project/components/plotly';\nimport Histogram from '@isle-project/components/plots/histogram';\nimport { generateQQPlotConfig } from '@isle-project/components/plots/qqplot';\nimport subtract from '@isle-project/utils/subtract';\nimport mean from '@isle-project/utils/statistic/mean';\nimport extractCategoriesFromValues from '@isle-project/utils/extract-categories-from-values';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\nimport isNonMissingNumber from '@isle-project/utils/is-non-missing-number';\nimport isMissing from '@isle-project/utils/is-missing';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\nconst TSTAT = 't';\nconst DF = 'df';\nconst R2 = 'RÂ²:';\n\n\n// FUNCTIONS //\n\nfunction designMatrix( x, y, data, quantitative, intercept ) {\n\tif ( !isArray( x ) ) {\n\t\tx = [ x ];\n\t}\n\tconst matrix = [];\n\tconst predictors = [];\n\tconst hash = {};\n\tconst nobs = data[ x[ 0 ] ].length;\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tfor ( let i = 0; i < nobs; i++ ) {\n\t\tconst row = [];\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\trow.push( values[ i ] );\n\t\t\t} else {\n\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\trow.push( ( val === categories[ k ] ) ? 1 : 0 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatrix.push( row );\n\t}\n\tconst yvalues = data[ y ].map( x => [ x ]);\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\nfunction designMatrixMissing( x, y, data, quantitative, intercept ) {\n\tif ( !isArray( x ) ) {\n\t\tx = [ x ];\n\t}\n\tconst matrix = [];\n\tconst predictors = [];\n\tconst hash = {};\n\tconst yvalues = [];\n\tfor ( let j = 0; j < x.length; j++ ) {\n\t\tconst values = data[ x[ j ] ];\n\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\tpredictors.push( x[ j ] );\n\t\t} else {\n\t\t\tconst categories = extractCategoriesFromValues( values, x[ j ] );\n\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\tpredictors.push( `${x[ j ]}_${categories[ k ]}` );\n\t\t\t}\n\t\t\thash[ x[ j ] ] = categories;\n\t\t}\n\t}\n\tfor ( let i = 0; i < data[ x[ 0 ] ].length; i++ ) {\n\t\tconst row = [];\n\t\tlet missing = false;\n\t\tfor ( let j = 0; j < x.length; j++ ) {\n\t\t\tconst values = data[ x[ j ] ];\n\t\t\tif ( contains( quantitative, x[ j ] ) ) {\n\t\t\t\tif ( isNonMissingNumber( values[ i ] ) ) {\n\t\t\t\t\trow.push( values[ i ] );\n\t\t\t\t} else {\n\t\t\t\t\tmissing = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst val = values[ i ];\n\t\t\t\tif ( isMissing( val ) ) {\n\t\t\t\t\tmissing = true;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tconst categories = hash[ x[ j ] ];\n\t\t\t\t\tfor ( let k = intercept ? 1 : 0; k < categories.length; k++ ) {\n\t\t\t\t\t\trow.push( ( val === categories[ k ] ) ? 1 : 0 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst yval = data[ y ][ i ];\n\t\tif ( !missing && isNonMissingNumber( yval ) ) {\n\t\t\tmatrix.push( row );\n\t\t\tyvalues.push( [ yval ] );\n\t\t}\n\t}\n\tconst nobs = yvalues.length;\n\treturn { matrix, predictors, yvalues, nobs };\n}\n\nconst summaryTable = ( y, x, nobs, result, t ) => {\n\tconst cdf = tCDF.factory( nobs - x.length - 1 );\n\treturn (\n\t\t<Table bordered size=\"sm\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>{t('predictor')}</th>\n\t\t\t\t\t<th>{t('coefficient')}</th>\n\t\t\t\t\t<th>{t('std-error')}</th>\n\t\t\t\t\t<th>{TSTAT}</th>\n\t\t\t\t\t<th>{t('p-value')}</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ result.intercept ? <tr>\n\t\t\t\t\t<th>{t('intercept')}</th>\n\t\t\t\t\t<td>{result.weights[ x.length ][ 0 ].toFixed( 6 )}</td>\n\t\t\t\t\t<td>{result.stdErrors[ x.length ].toFixed( 4 )}</td>\n\t\t\t\t\t<td>{result.tStats[ x.length ].toFixed( 4 )}</td>\n\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( result.tStats[ x.length ] ) ) ).toFixed( 4 )}</td>\n\t\t\t\t</tr> : null }\n\t\t\t\t{x.map( ( name, idx ) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={idx} >\n\t\t\t\t\t\t\t<th>{name}</th>\n\t\t\t\t\t\t\t<td>{result.weights[ idx ][ 0 ].toFixed( 6 )}</td>\n\t\t\t\t\t\t\t<td>{result.stdErrors[ idx ].toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{result.tStats[ idx ].toFixed( 4 )}</td>\n\t\t\t\t\t\t\t<td>{2.0 * (1.0-cdf( abs( result.tStats[ idx ] ) ) ).toFixed( 4 )}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</Table>\n\t);\n};\n\nconst fitModel = ({ x, y, intercept, omitMissing, data, quantitative }) => {\n\tconst out = {};\n\ttry {\n\t\tconst dMatrix = omitMissing ? designMatrixMissing : designMatrix;\n\t\tconst { matrix, predictors, yvalues, nobs } = dMatrix( x, y, data, quantitative, intercept );\n\t\tout.result = new MLR( matrix, yvalues, {\n\t\t\tintercept\n\t\t});\n\t\tconst yhat = out.result.predict( matrix ).map( v => v[ 0 ] );\n\t\tout.yhat = yhat;\n\t\tconst avgFitted = mean( yhat );\n\t\tlet mss = 0;\n\t\tfor ( let i = 0; i < yhat.length; i++ ) {\n\t\t\tmss += pow( yhat[ i ] - avgFitted, 2 );\n\t\t}\n\t\tconst resid = subtract( yvalues, yhat );\n\t\tlet rss = 0;\n\t\tfor ( let i = 0; i < resid.length; i++ ) {\n\t\t\trss += pow( resid[ i ], 2 );\n\t\t}\n\t\tconst p = predictors.length;\n\t\tout.resid = resid;\n\t\tout.rSquared = mss / ( mss + rss );\n\t\tout.adjRSquared = 1 - ( 1 - out.rSquared ) * ( nobs - 1 ) / ( nobs - p - 1 );\n\t\tout.fScore = ( mss / p ) / ( rss / ( nobs - p - 1 ) );\n\t\tout.p = p;\n\t\tout.nobs = nobs;\n\t\tout.predictors = predictors;\n\t\treturn out;\n\t} catch ( _ ) {\n\t\treturn out;\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Multiple linear regression.\n*\n* @property {Object} data - object of value arrays\n* @property {string} y - outcome variable\n* @property {Array<string>} x - one or more predictor variables\n* @property {(string|Factor|Array<(string|Factor)>)} quantitative - array of variables in `data` that are `quantitative`\n* @property {boolean} omitMissing - controls whether to omit missing values\n* @property {boolean} intercept - controls whether to fit a model with an intercept term\n* @property {Function} onDiagnostics - callback invoked with diagnostic plots\n* @property {Function} onPredict - callback invoked with a predict function to make predictions for new data\n*/\nclass MultipleLinearRegression extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tCOUNTER += 1;\n\t\tconst { x, y, intercept, omitMissing, data, quantitative } = props;\n\t\tthis.state = {\n\t\t\t...fitModel({ x, y, intercept, omitMissing, data, quantitative }),\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.omitMissing !== prevState.omitMissing ||\n\t\t\tnextProps.intercept !== prevState.intercept\n\t\t) {\n\t\t\tconst { x, y, intercept, omitMissing, data, quantitative } = nextProps;\n\t\t\tconst newState = {\n\t\t\t\t...fitModel({ x, y, intercept, omitMissing, data, quantitative }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t\treturn newState;\n\t\t}\n\t\treturn null;\n\t}\n\n\thandleDiagnostics = () => {\n\t\tconst { x, y, intercept, t } = this.props;\n\t\tconst qqPlot = <Plotly\n\t\t\tdraggable\n\t\t\teditable fit\n\t\t\t{...generateQQPlotConfig( this.state.resid, 'residuals' )}\n\t\t\tmeta={{ type: 'qqplot of regression residuals', x, y, intercept }}\n\t\t/>;\n\t\tconst hist = <Histogram\n\t\t\tdata={{ 'Residuals': this.state.resid }}\n\t\t\tvariable=\"Residuals\"\n\t\t\ttitle={t('plotly:histogram-title', { x: 'Residuals' })}\n\t\t/>;\n\t\tconst residualPlot = <Plotly\n\t\t\tdraggable editable fit\n\t\t\tdata={[\n\t\t\t\t{\n\t\t\t\t\tx: this.state.yhat,\n\t\t\t\t\ty: this.state.resid,\n\t\t\t\t\tmode: 'markers',\n\t\t\t\t\ttype: this.state.yhat.length > 2000 ? 'scattergl' : 'scatter'\n\t\t\t\t}\n\t\t\t]}\n\t\t\tlayout={{\n\t\t\t\txaxis: {\n\t\t\t\t\ttitle: t('fitted-values')\n\t\t\t\t},\n\t\t\t\tyaxis: {\n\t\t\t\t\ttitle: t('residuals')\n\t\t\t\t},\n\t\t\t\ttitle: t('residuals-vs-fitted')\n\t\t\t}}\n\t\t\tmeta={{ type: 'regression residuals vs. fitted', x, y, intercept }}\n\t\t/>;\n\t\tthis.props.onDiagnostics([ qqPlot, hist, residualPlot ]);\n\t};\n\n\thandlePredict = () => {\n\t\tconst { quantitative, intercept } = this.props;\n\t\tconst predict = ( data ) => {\n\t\t\tconst { x, y } = this.props;\n\t\t\tconst { matrix } = designMatrix( x, y, data, quantitative, intercept );\n\t\t\tconst fitted = this.state.result.predict( matrix ).map( v => v[ 0 ] );\n\t\t\tconst residuals = subtract( data[ y ], fitted );\n\t\t\treturn { fitted, residuals };\n\t\t};\n\t\tthis.props.onPredict( predict, COUNTER );\n\t};\n\n\trender() {\n\t\tconst { y, predictors, nobs, result, adjRSquared, p, fScore, rSquared } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !result ) {\n\t\t\treturn <Alert variant=\"danger\">{this.props.t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('multiple-regression-title', { y, counter: COUNTER })}</span>\n\t\t\t\t{summaryTable( y, predictors, nobs, result, t )}\n\t\t\t\t<p>{t('residual-standard-error')}: {round( result.stdError )}</p>\n\t\t\t\t<p>{R2} {rSquared.toFixed( 6 )}, {t('adjusted')} {R2} {adjRSquared.toFixed( 6 )}</p>\n\t\t\t\t<p>{t('f-statistic')}: {fScore.toFixed( 3 )} (${DF}: {nobs-p-1}, {p}), {t('p-value')}: {(1.0 - fCDF( fScore, p, nobs-p-1 )).toFixed( 6 )}</p>\n\t\t\t\t{ this.props.onPredict ? <Tooltip placement=\"top\" tooltip={t('use-model-to-predict-tooltip')} >\n\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" onClick={this.handlePredict}>{t('use-model-to-predict')}</Button>\n\t\t\t\t</Tooltip> : null }\n\t\t\t\t{ this.props.onDiagnostics ? <Button variant=\"secondary\" size=\"sm\" style={{ marginLeft: 6 }} onClick={this.handleDiagnostics} >\n\t\t\t\t\t{t('model-diagnostics')}\n\t\t\t\t</Button> : null }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nMultipleLinearRegression.defaultProps = {\n\tomitMissing: false,\n\tintercept: true,\n\tonDiagnostics: null,\n\tonPredict: null\n};\n\nMultipleLinearRegression.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.string.isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\tomitMissing: PropTypes.bool,\n\tintercept: PropTypes.bool,\n\tonDiagnostics: PropTypes.func,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( [ 'models', 'plotly' ] )( withPropCheck( MultipleLinearRegression ) );\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar Matrix = require('ml-matrix');\nvar Matrix__default = _interopDefault(Matrix);\n\nclass MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const { intercept = true, statistics = true } = options;\n    this.statistics = statistics;\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix__default(x);\n      y = new Matrix__default(y);\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n      let xt = x.transpose();\n      const xx = xt.mmul(x);\n      const xy = xt.mmul(y);\n      const invxx = new Matrix.SVD(xx).inverse();\n      const beta = xy\n        .transpose()\n        .mmul(invxx)\n        .transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance =\n          residuals\n            .to2DArray()\n            .map((ri) => Math.pow(ri[0], 2))\n            .reduce((a, b) => a + b) /\n          (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = Matrix.pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix\n          .diagonal()\n          .map((d) => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) =>\n          this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i],\n        );\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n        return y;\n      }\n    } else if (Matrix__default.isMatrix(x)) {\n      const y = new Matrix__default(x.rows, this.outputs);\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n      return y;\n    }\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics\n        ? {\n            regressionStatistics: {\n              standardError: this.stdError,\n              observations: this.outputs,\n            },\n            variables: this.weights.map((d, i) => {\n              return {\n                label:\n                  i === this.weights.length - 1\n                    ? 'Intercept'\n                    : `X Variable ${i + 1}`,\n                coefficients: d,\n                standardError: this.stdErrors[i],\n                tStat: this.tStats[i],\n              };\n            }),\n          }\n        : undefined,\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n    return new MultivariateLinearRegression(true, model);\n  }\n}\n\nmodule.exports = MultivariateLinearRegression;\n"],"sourceRoot":""}