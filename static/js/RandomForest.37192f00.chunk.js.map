{"version":3,"sources":["../node_modules/@isle-project/components/models/random-forest/main.js"],"names":[],"mappings":"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","file":"static/js/RandomForest.37192f00.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport isArray from '@stdlib/assert/is-array';\nimport Plotly from '@isle-project/components/plotly';\nimport Tooltip from '@isle-project/components/tooltip';\nimport { RandomForestClassifier } from '@isle-project/components/models/decision-tree/tree.js';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport { Factor } from '@isle-project/utils/factor-variable';\n\n\n// VARIABLES //\n\nlet COUNTER = 0;\n\n\n// FUNCTIONS //\n\nconst fitModel = ({ y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount }) => {\n\ttry {\n\t\tlet predictors;\n\t\tif ( isArray( x ) ) {\n\t\t\tpredictors = x;\n\t\t} else {\n\t\t\tpredictors = [ x ];\n\t\t}\n\t\tlet forest;\n\t\tif ( type === 'Classification' ) {\n\t\t\tforest = new RandomForestClassifier({\n\t\t\t\tresponse: y,\n\t\t\t\tpredictors,\n\t\t\t\tdata: data,\n\t\t\t\tquantitative: quantitative,\n\t\t\t\tcriterion: impurityMeasure,\n\t\t\t\tnTrees,\n\t\t\t\tnTry,\n\t\t\t\tscoreThreshold,\n\t\t\t\tmaxTreeDepth,\n\t\t\t\tminItemsCount\n\t\t\t});\n\t\t}\n\t\tconst importances = [];\n\t\tfor ( let i = 0; i < predictors.length; i++ ) {\n\t\t\tconst attr = predictors[ i ];\n\t\t\timportances.push( forest.importances[ attr ] );\n\t\t}\n\t\treturn {\n\t\t\tforest,\n\t\t\tpredictors,\n\t\t\timportances\n\t\t};\n\t} catch ( _ ) {\n\t\treturn {};\n\t}\n};\n\n\n// MAIN //\n\n/**\n* Random Forests.\n*\n* @property {Object} data - object of value arrays\n* @property {string} type - currently only `Classification` for categorical responses is supported\n* @property {Array<string>} quantitative - array of variables in `data` that are `quantitative`\n* @property {(string|Factor)} y - outcome variable\n* @property {(string|Factor|Array<(string|Factor)>)} x - one or more predictor variables\n* @property {string} impurityMeasure - impurity measure (`gini` or `entropy`)\n* @property {number} nTrees - number of trees\n* @property {number} nTry - number of predictors to check at each split\n* @property {number} scoreThreshold - score threshold for split\n* @property {number} maxTreeDepth - maximum tree depth\n* @property {number} minItemsCount - minimum # of observations in leaf nodes\n* @property {Function} onPredict - callback invoked with model object when clicking on the predict button\n*/\nclass RandomForest extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tCOUNTER += 1;\n\n\t\tconst { y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount } = props;\n\t\tthis.state = {\n\t\t\t...fitModel({ y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t...props\n\t\t};\n\t}\n\n\tstatic getDerivedStateFromProps( nextProps, prevState ) {\n\t\tif (\n\t\t\tnextProps.y !== prevState.y ||\n\t\t\tnextProps.x !== prevState.x ||\n\t\t\tnextProps.type !== prevState.type ||\n\t\t\tnextProps.nTrees !== prevState.nTrees ||\n\t\t\tnextProps.nTry !== prevState.nTry ||\n\t\t\tnextProps.impurityMeasure !== prevState.impurityMeasure ||\n\t\t\tnextProps.data !== prevState.data ||\n\t\t\tnextProps.quantitative !== prevState.quantitative ||\n\t\t\tnextProps.scoreThreshold !== prevState.scoreThreshold ||\n\t\t\tnextProps.maxTreeDepth !== prevState.maxTreeDepth ||\n\t\t\tnextProps.minItemsCount !== prevState.minItemsCount\n\t\t) {\n\t\t\tconst { y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount } = nextProps;\n\t\t\treturn {\n\t\t\t\t...fitModel({ y, x, type, nTrees, nTry, impurityMeasure, data, quantitative, scoreThreshold, maxTreeDepth, minItemsCount }),\n\t\t\t\t...nextProps\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\thandlePredict = () => {\n\t\tthis.props.onPredict( this.state.forest, COUNTER );\n\t};\n\n\trender() {\n\t\tconst { forest } = this.state;\n\t\tconst { t } = this.props;\n\t\tif ( !forest ) {\n\t\t\treturn <Alert variant=\"danger\">{t('missing-attributes')}</Alert>;\n\t\t}\n\t\treturn (\n\t\t\t<div style={{ overflowX: 'auto', width: '100%' }}>\n\t\t\t\t<span className=\"title\" >{t('random-forest-for', { y: this.props.y, counter: COUNTER })}</span>\n\t\t\t\t<p>{t('created-from-trees', { nTrees: this.props.nTrees, nTry: this.props.nTry })}</p>\n\t\t\t\t<Plotly editable data={[{\n\t\t\t\t\ttype: 'bar',\n\t\t\t\t\tx: this.state.predictors,\n\t\t\t\t\ty: this.state.importances\n\t\t\t\t}]} layout={{\n\t\t\t\t\txaxis: {\n\t\t\t\t\t\ttitle: t('variable')\n\t\t\t\t\t},\n\t\t\t\t\tyaxis: {\n\t\t\t\t\t\ttitle: t('importance')\n\t\t\t\t\t}\n\t\t\t\t}} />\n\t\t\t\t{ this.props.onPredict ? <Tooltip tooltip={t('predictions-attached')} >\n\t\t\t\t\t<Button variant=\"secondary\" size=\"sm\" style={{ marginTop: 10 }} onClick={this.handlePredict}>{this.props.t('use-model-to-predict')}</Button>\n\t\t\t\t</Tooltip> : null }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nRandomForest.defaultProps = {\n\ttype: 'Classification',\n\tnTrees: 50,\n\tnTry: 1,\n\timpurityMeasure: 'gini',\n\tscoreThreshold: 0.01,\n\tmaxTreeDepth: 20,\n\tminItemsCount: 50,\n\tonPredict: null\n};\n\nRandomForest.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\ty: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\tx: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf( PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf( Factor ) ]) ),\n\t\tPropTypes.string,\n\t\tPropTypes.instanceOf( Factor )\n\t]).isRequired,\n\ttype: PropTypes.oneOf([ 'Classification', 'Regression' ]),\n\tquantitative: PropTypes.arrayOf( PropTypes.string ).isRequired,\n\tnTrees: PropTypes.number,\n\tnTry: PropTypes.number,\n\timpurityMeasure: PropTypes.oneOf([ 'gini', 'entropy' ]),\n\tscoreThreshold: PropTypes.number,\n\tmaxTreeDepth: PropTypes.number,\n\tminItemsCount: PropTypes.number,\n\tonPredict: PropTypes.func\n};\n\n\n// EXPORTS //\n\nexport default withTranslation( 'models' )( withPropCheck( RandomForest ) );\n"],"sourceRoot":""}