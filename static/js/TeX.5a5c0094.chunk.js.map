{"version":3,"sources":["../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js","../node_modules/@isle-project/components/tex/main.js"],"names":["input","node"],"mappings":"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","file":"static/js/TeX.5a5c0094.chunk.js","sourcesContent":["// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\n/**\n * Creates a tooltip for a number input.\n *\n * @param {Object} options - function options\n * @param {number} options.min - minimum value\n * @param {number} options.max - maximum value\n * @param {number} options.step - step size\n * @param {Function} options.t - translation function\n * @returns {string} tooltip\n */\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n","/* eslint-disable @babel/no-invalid-this */\n\n// MODULES //\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Overlay from 'react-bootstrap/Overlay';\nimport Popover from 'react-bootstrap/Popover';\nimport debounce from 'lodash.debounce';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport replace from '@stdlib/string/replace';\nimport objectKeys from '@stdlib/utils/keys';\nimport rescape from '@stdlib/utils/escape-regexp-string';\nimport NumberInput from '@isle-project/components/input/number';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { withPropCheck } from '@isle-project/utils/prop-check';\nimport './tex.css';\n\n\n// VARIABLES //\n\nlet counter = 1;\n\n\n// FUNCTIONS //\n\nfunction processEquation( raw, elems, id ) {\n\tconst keys = objectKeys( elems );\n\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\tconst key = keys[ i ];\n\t\tconst el = elems[ key ];\n\t\tconst RE_KEY = new RegExp( '(^| )(\\\\\\\\)?'+rescape( key )+'($| )' );\n\t\tlet replacement = '';\n\t\tif ( el.tooltip ) {\n\t\t\treplacement += `\\\\texttip{$2${key}}{${el.tooltip}}`; // eslint-disable-line i18next/no-literal-string\n\t\t} else {\n\t\t\treplacement = '$2'+key;\n\t\t}\n\t\tif ( el.onChange ) {\n\t\t\treplacement = `\\\\class{tex-clickable}{\\\\cssId{tex-${id}-${key}}{${replacement}}}`; // eslint-disable-line i18next/no-literal-string\n\t\t}\n\t\treplacement = '$1' + replacement + '$3';\n\t\traw = replace( raw, RE_KEY, replacement );\n\t}\n\treturn raw;\n}\n\nconst updateEquations = debounce( () => {\n\twindow.MathJax.startup.document.clear();\n\twindow.MathJax.startup.document.updateDocument();\n}, 200 );\n\n\n// MAIN //\n\n/**\n* `TeX` is an ISLE element that can be used to display LaTeX equations.\n*\n* @property {(string|number)} raw - The literal LaTeX `string` to render. Also accepts `numbers`\n* @property {boolean} displayMode - `boolean` indicating whether to display the equation inline or in display mode\n* @property {boolean} numbered - controls whether to display an equation number for display mode equations\n* @property {Object} style - `object` with CSS key-value pairs to be applied to the equation container\n* @property {string} tag - Custom characters displayed for display equations at the right side. Defaults to the number of the equation inside the lesson\n* @property {Object} elems - `object` with `keys` denoting LaTeX characters and their corresponding values being configuration `objects` to make them interactive. Setting a `tooltip` option will show a tooltip when hovering over the LaTeX characters. Setting a `variable` property will display an input slider to change the respective state variable; in this case, additional properties `legend`, `min`, `max`, and `step` are supported\n* @property {string} popoverPlacement - popover position for the specified `elems` (either `top`, `right`, `bottom`, or `left`)\n* @property {Function} onPopover - callback `function` when a control popover is toggled on or off; receives the display status as a boolean as its sole argument\n* @property {Function} onClick - callback `function` invoked whenever a user clicks on the equation\n*/\nconst TeX = ({ raw, displayMode, numbered, style, tag, elems, popoverPlacement, onPopover, onClick }) => {\n\tconst [ id ] = useState( counter );\n\tconst eqRef = useRef( null );\n\tconst [ popover, setPopover ] = useState( {} );\n\tconst [ config, setConfig ] = useState( {} );\n\tuseEffect( () => {\n\t\tlet output = eqRef.current;\n\t\tif ( window.MathJax.texReset ) {\n\t\t\twindow.MathJax.texReset();\n\t\t}\n\t\tconst options = window.MathJax.getMetricsFor ? window.MathJax.getMetricsFor( output ) : {};\n\t\toptions.display = displayMode;\n\t\tlet input = isNumber( raw ) ? raw.toString() : raw;\n\t\tinput = processEquation( input, elems, id );\n\t\tif ( !window.MathJax.tex2chtmlPromise ) {\n\t\t\treturn;\n\t\t}\n\t\twindow.MathJax.tex2chtmlPromise( input, options ).then( ( node ) => {\n\t\t\toutput.innerHTML = '';\n\t\t\toutput.appendChild( node );\n\t\t\tupdateEquations();\n\n\t\t\tconst keys = objectKeys( elems );\n\t\t\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\t\t\tconst key = keys[ i ];\n\t\t\t\tconst el = elems[ key ];\n\t\t\t\tconst node = document.getElementById( 'tex-'+id+'-'+key );\n\t\t\t\tif ( node ) {\n\t\t\t\t\tnode.addEventListener( 'click', function onClick() {\n\t\t\t\t\t\tif ( el.variable ) {\n\t\t\t\t\t\t\tlet newConfig = {\n\t\t\t\t\t\t\t\tlegend: el.legend || el.variable,\n\t\t\t\t\t\t\t\tmin: el.min || NINF,\n\t\t\t\t\t\t\t\tmax: el.max || PINF,\n\t\t\t\t\t\t\t\tstep: el.step || 'any'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif ( el.onChange ) {\n\t\t\t\t\t\t\t\tnewConfig.onChange = el.onChange;\n\t\t\t\t\t\t\t\tnewConfig.defaultValue = el.defaultValue;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewConfig.bind = el.variable;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( popover.name !== key ) {\n\t\t\t\t\t\t\t\tsetConfig( newConfig );\n\t\t\t\t\t\t\t\tsetPopover({\n\t\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\t\ttarget: node,\n\t\t\t\t\t\t\t\t\tname: key\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tonPopover( true );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetPopover({\n\t\t\t\t\t\t\t\t\tshow: false,\n\t\t\t\t\t\t\t\t\ttarget: null,\n\t\t\t\t\t\t\t\t\tname: null\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tonPopover( false );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tcounter += 1;\n\t\treturn () => {\n\t\t\tcounter = 1;\n\t\t};\n\t});\n\tconst equation = <span ref={eqRef} ></span>;\n\tconst overlay = <Overlay\n\t\tshow={popover.show}\n\t\ttarget={eqRef.current}\n\t\tplacement={popoverPlacement}\n\t>\n\t\t<Popover id=\"popover-top\">\n\t\t\t<NumberInput\n\t\t\t\tinline\n\t\t\t\t{...config}\n\t\t\t/>\n\t\t</Popover>\n\t</Overlay>;\n\tif ( displayMode === true ) {\n\t\tconst tagDiv = numbered ?\n\t\t\t<div\n\t\t\t\tclassName=\"tag\"\n\t\t\t\tstyle={{\n\t\t\t\t\tfloat: 'right',\n\t\t\t\t\tmarginTop: 5,\n\t\t\t\t\tmarginRight: 5\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ tag !== null ? tag : '[' + id + ']' }\n\t\t\t</div> : null;\n\t\tif ( onClick ) {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"tex\"\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tstyle={style}\n\t\t\t\t\tonClick={onClick} onKeyPress={onClick}\n\t\t\t\t\taria-label=\"Equation\"\n\t\t\t\t>\n\t\t\t\t\t{tagDiv}\n\t\t\t\t\t{equation}\n\t\t\t\t\t{overlay}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn ( <div\n\t\t\tclassName=\"tex\"\n\t\t\tstyle={style}\n\t\t\taria-label=\"Equation\"\n\t\t>\n\t\t\t{tagDiv}\n\t\t\t{equation}\n\t\t\t{overlay}\n\t\t</div> );\n\t}\n\tif ( onClick ) {\n\t\treturn (\n\t\t\t<span\n\t\t\t\tclassName=\"tex\"\n\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\tstyle={style}\n\t\t\t\tonClick={onClick} onKeyPress={onClick}\n\t\t\t\taria-label=\"Equation\"\n\t\t\t>\n\t\t\t\t{equation}\n\t\t\t\t{overlay}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<span\n\t\t\tclassName=\"tex\"\n\t\t\tstyle={style}\n\t\t\taria-label=\"Equation\"\n\t\t>\n\t\t\t{equation}\n\t\t\t{overlay}\n\t\t</span>\n\t);\n};\n\n\n// PROPERTIES //\n\nTeX.propTypes = {\n\traw: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number\n\t]).isRequired,\n\tdisplayMode: PropTypes.bool,\n\tnumbered: PropTypes.bool,\n\tstyle: PropTypes.object,\n\ttag: PropTypes.string,\n\telems: PropTypes.object,\n\tpopoverPlacement: PropTypes.string,\n\tonPopover: PropTypes.func,\n\tonClick: PropTypes.func\n};\n\nTeX.defaultProps = {\n\tdisplayMode: false,\n\tnumbered: false,\n\tstyle: {},\n\ttag: null,\n\telems: {},\n\tpopoverPlacement: 'bottom',\n\tonPopover() {},\n\tonClick: null\n};\n\n\n// EXPORTS //\n\nexport default withPropCheck( TeX );\n"],"sourceRoot":""}