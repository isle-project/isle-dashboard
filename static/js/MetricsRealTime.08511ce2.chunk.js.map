{"version":3,"file":"static/js/MetricsRealTime.08511ce2.chunk.js","mappings":"+NAYA,MAAMA,EAAQC,GAAAA,CAAQ,0BAatB,MAAMC,UAAwBC,EAAAA,UAC7BC,cACCC,QACAC,KAAKC,MAAQ,CACZC,QAAS,IAIXC,oBACCH,KAAKI,YAAa,EAClB,MAAMC,EAAUL,KAAKM,QAChBD,IACJX,EAAO,sCAAsCM,KAAKO,MAAMC,KACxDR,KAAKS,YAAcJ,EAAQK,WAAW,CAAEC,EAAMC,KAC7C,GAAKD,IAASE,EAAAA,GAAgB,CAC7B,GAAKD,EAAOD,OAASG,EAAAA,IAAiBF,EAAOD,OAASI,EAAAA,GACrD,OAAO,KAER,MAAMC,EAAMC,GAAAA,CAASjB,KAAKO,MAAMC,IAAKI,EAAOM,IAC5C,IAAc,IAATF,EAAa,CACjB,IAAId,EAAUF,KAAKC,MAAMC,QAAQiB,QACjCjB,EAAQkB,KAAMpB,KAAKO,MAAMc,iBAAmBT,EAASA,EAAOU,OAC5DtB,KAAKuB,SAAS,CACbrB,QAAAA,IACE,KACFR,EAAO,gDAAkD8B,KAAKC,UAAWzB,KAAKC,MAAMC,UACpFF,KAAKO,MAAMmB,OAAQ1B,KAAKC,MAAMC,QAASc,GACvChB,KAAKO,MAAMoB,QAAS3B,KAAKC,MAAMC,QAASF,KAAKC,MAAMC,QAAQ0B,OAAO,GAAKZ,OAIrEhB,KAAKI,YACTJ,KAAK6B,kBAMTC,uBACC9B,KAAKI,YAAa,EACbJ,KAAKS,aAAcT,KAAKS,cAG9BsB,SACC,OACC,6BAQHnC,EAAgBoC,aAAe,CAC9BN,WACAC,YACAN,kBAAkB,GAGnBzB,EAAgBqC,UAAY,CAC3BzB,IAAK0B,IAAAA,MAAAA,WACLR,OAAQQ,IAAAA,KACRP,QAASO,IAAAA,KACTb,iBAAkBa,IAAAA,MAGnBtC,EAAgBuC,YAAcC,EAAAA,EAK9B","sources":["../node_modules/@isle-project/components/metrics/realtime/main.js"],"sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport indexOf from '@stdlib/utils/index-of';\nimport SessionContext from '@isle-project/session/context.js';\nimport { FOCUS_ELEMENT, LOSE_FOCUS_ELEMENT, MEMBER_ACTION } from '@isle-project/constants/events.js';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:real-time-metrics' );\n\n\n// MAIN //\n\n/**\n* Invisible component listening to incoming member actions and invoking a given callback.\n*\n* @property {string} for - ID of component whose actions should trigger callback(s)\n* @property {Function} onData - callback function called with an array of all actions when a new member action arrives\n* @property {Function} onDatum - callback function invoked with every individual incoming member action\n* @property {boolean} returnFullObject - controls whether to invoke the supplied callback(s) with the full action object or only its value\n*/\nclass RealTimeMetrics extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tactions: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._isMounted = true;\n\t\tconst session = this.context;\n\t\tif ( session ) {\n\t\t\tdebug( 'Listening for all actions with id: '+this.props.for );\n\t\t\tthis.unsubscribe = session.subscribe( ( type, action ) => {\n\t\t\t\tif ( type === MEMBER_ACTION ) {\n\t\t\t\t\tif ( action.type === FOCUS_ELEMENT || action.type === LOSE_FOCUS_ELEMENT ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tconst idx = indexOf( this.props.for, action.id );\n\t\t\t\t\tif ( idx !== -1 ) {\n\t\t\t\t\t\tlet actions = this.state.actions.slice();\n\t\t\t\t\t\tactions.push( this.props.returnFullObject ? action : action.value );\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tactions\n\t\t\t\t\t\t}, () => {\n\t\t\t\t\t\t\tdebug( 'A new value for the given IDs was submitted: ' + JSON.stringify( this.state.actions ) );\n\t\t\t\t\t\t\tthis.props.onData( this.state.actions, idx );\n\t\t\t\t\t\t\tthis.props.onDatum( this.state.actions[ this.state.actions.length-1 ], idx );\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( this._isMounted ) {\n\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis._isMounted = false;\n\t\tif ( this.unsubscribe ) this.unsubscribe();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div></div>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nRealTimeMetrics.defaultProps = {\n\tonData() {},\n\tonDatum() {},\n\treturnFullObject: false\n};\n\nRealTimeMetrics.propTypes = {\n\tfor: PropTypes.array.isRequired,\n\tonData: PropTypes.func,\n\tonDatum: PropTypes.func,\n\treturnFullObject: PropTypes.bool\n};\n\nRealTimeMetrics.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default RealTimeMetrics;\n"],"names":["debug","logger","RealTimeMetrics","Component","constructor","super","this","state","actions","componentDidMount","_isMounted","session","context","props","for","unsubscribe","subscribe","type","action","MEMBER_ACTION","FOCUS_ELEMENT","LOSE_FOCUS_ELEMENT","idx","indexOf","id","slice","push","returnFullObject","value","setState","JSON","stringify","onData","onDatum","length","forceUpdate","componentWillUnmount","render","defaultProps","propTypes","PropTypes","contextType","SessionContext"],"sourceRoot":""}