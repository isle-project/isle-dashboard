{"version":3,"file":"static/js/LassoRegressionMenu.9df59dd2.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/dashboard/index.js","../node_modules/@isle-project/components/data-explorer/menu/lasso_regression.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/slider/main.js","../node_modules/@isle-project/components/input/slider/index.js"],"sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Dashboard = Loadable( () => import( /* webpackChunkName: \"Dashboard\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Dashboard;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport unique from 'uniq';\nimport contains from '@stdlib/assert/contains';\nimport copy from '@stdlib/utils/copy';\nimport TeX from '@isle-project/components/tex';\nimport SelectInput from '@isle-project/components/input/select';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport SliderInput from '@isle-project/components/input/slider';\nimport Dashboard from '@isle-project/components/dashboard';\nimport LassoRegression from '@isle-project/components/models/lasso-regression';\nimport { DATA_EXPLORER_LASSO_REGRESSION } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// MAIN //\n\nconst LassoRegressionMenu = ( props ) => {\n\tconst { data, categorical, quantitative, t, logAction, onCreated, onGenerate } = props;\n\tconst compute = ( y, x, lambda, intercept ) => {\n\t\tconst output = <LassoRegression\n\t\t\tx={x} y={y}\n\t\t\tlambda={lambda} intercept={intercept}\n\t\t\tdata={data}\n\t\t\tquantitative={quantitative}\n\t\t\tonPredict={( fitted, residuals, counter ) => {\n\t\t\t\tconst newData = copy( data, 1 );\n\t\t\t\tconst newQuantitative = quantitative.slice();\n\t\t\t\tlet name = 'pred_lasso' + counter;\n\t\t\t\tnewData[ name ] = fitted;\n\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t}\n\t\t\t\tname = 'resid_lasso' + counter;\n\t\t\t\tnewData[ name ] = residuals;\n\t\t\t\tif ( !contains( newQuantitative, name ) ) {\n\t\t\t\t\tnewQuantitative.push( name );\n\t\t\t\t}\n\t\t\t\tonGenerate( newQuantitative, newData );\n\t\t\t}}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_LASSO_REGRESSION, {\n\t\t\ty, x, intercept, lambda\n\t\t});\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Dashboard\n\t\t\ttitle={<span>\n\t\t\t\t{t('LASSO')}\n\t\t\t\t<QuestionButton title={t('LASSO')} content={t('LASSO-description')} />\n\t\t\t</span>}\n\t\t\tautoStart={false}\n\t\t\tonGenerate={compute}\n\t\t>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('outcome-y')}\n\t\t\t\toptions={quantitative}\n\t\t\t\tdefaultValue={quantitative[ 0 ]}\n\t\t\t/>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('predictors-x')} multi\n\t\t\t\toptions={unique( quantitative.concat( categorical ) )}\n\t\t\t\tdefaultValue={quantitative[ 1 ]}\n\t\t\t\tcloseMenuOnSelect={false}\n\t\t\t/>\n\t\t\t<SliderInput\n\t\t\t\tlegend={<span>L1 Penalty Term <TeX raw=\"\\lambda\" /></span>}\n\t\t\t\tdefaultValue={1e-3}\n\t\t\t\tmin={1e-12}\n\t\t\t\tmax={1}\n\t\t\t\tstep=\"any\"\n\t\t\t\trangeInputStyle={{ width: 260 }}\n\t\t\t\tnumberInputStyle={{ width: 120 }}\n\t\t\t/>\n\t\t\t<CheckboxInput\n\t\t\t\tlegend={t('include-intercept')}\n\t\t\t\tdefaultValue={true}\n\t\t\t/>\n\t\t</Dashboard>\n\t);\n};\n\n\n// PROPERTIES //\n\nLassoRegressionMenu.defaultProps = {\n\tlogAction() {}\n};\n\nLassoRegressionMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default LassoRegressionMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport Badge from 'react-bootstrap/Badge';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nconst SliderInput = ( props ) => {\n\tconst { bind, defaultValue, legend, disabled, hideTooltip, inline, min, max, onChange, precision, step,\n\t\tminLabel, maxLabel, numberInputStyle, rangeInputStyle, style } = props;\n\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ] : defaultValue\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ]);\n\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if ( step === 1.0 && newValue !== '' ) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, max, min, step, value, onChange ] );\n\n\tconst handleInputChange = useCallback( ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tsetValue( newValue );\n\n\t\tif ( valid && newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, value, onChange ] );\n\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}:`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}:`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\tlet roundedValue;\n\tif ( value !== '' ) {\n\t\troundedValue = roundn( value, ( -1.0 )*precision );\n\t} else {\n\t\troundedValue = value;\n\t}\n\tconst rangeInput = <input\n\t\ttype=\"range\"\n\t\tclassName=\"slider-range-input\"\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tdisabled={disabled}\n\t\tonChange={handleInputChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t...rangeInputStyle\n\t\t}}\n\t/>;\n\tconst numberInput = <input\n\t\ttype=\"number\"\n\t\tname=\"input\"\n\t\tclassName=\"slider-number-input\"\n\t\tdisabled={disabled}\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tonChange={handleInputChange}\n\t\tonBlur={finishChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t...numberInputStyle\n\t\t}}\n\t\tautoComplete=\"off\"\n\t/>;\n\tif ( inline ) {\n\t\treturn (\n\t\t\t<span className=\"input\" style={{\n\t\t\t\tpadding: '5px',\n\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t...style\n\t\t\t}}>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<Tooltip\n\t\t\tid=\"sliderTooltip\"\n\t\t\tplacement=\"top\"\n\t\t\tshow={!hideTooltip}\n\t\t\ttooltip={disabled ? t('slider-disabled') : tooltip}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<br />\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"names":["Dashboard","Loadable","LassoRegressionMenu","props","data","categorical","quantitative","t","logAction","onCreated","onGenerate","title","content","autoStart","y","x","lambda","intercept","output","onPredict","fitted","residuals","counter","newData","copy","newQuantitative","slice","name","contains","push","DATA_EXPLORER_LASSO_REGRESSION","legend","options","defaultValue","multi","unique","concat","closeMenuOnSelect","raw","min","max","step","rangeInputStyle","width","numberInputStyle","defaultProps","propTypes","PropTypes","QuestionButton","popover","id","trigger","placement","rootClose","overlay","size","variant","className","isRequired","uid","generateUID","CheckboxInput","bind","disabled","onChange","useRef","session","useContext","SessionContext","value","setValue","useState","state","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onClick","onKeyPress","onSpanChange","noop","debug","logger","SliderInput","hideTooltip","precision","minLabel","maxLabel","useTranslation","finishChange","parseFloat","handleInputChange","valid","validity","roundedValue","PINF","NINF","roundn","rangeInput","float","display","numberInput","onBlur","marginTop","autoComplete","padding","opacity","Badge","show"],"sourceRoot":""}