{"version":3,"file":"static/js/HeatmapMenu.10295472.chunk.js","mappings":"mUAqBA,MAAMA,EAAgBC,IACrB,MAAM,UAAEC,EAAF,kBAAaC,EAAb,SAAgCC,EAAhC,SAA0CC,EAA1C,EAAoDC,GAAML,GAExDM,EAAGC,IAASC,EAAAA,EAAAA,UAAUL,GAAYF,EAAW,KAC7CQ,EAAGC,IAASF,EAAAA,EAAAA,UAAUJ,GAAYH,EAAW,KAC7CU,EAAOC,IAAaJ,EAAAA,EAAAA,UAAU,OAC9BK,EAAeC,IAAqBN,EAAAA,EAAAA,WAAU,IAC9CO,EAAaC,IAAmBR,EAAAA,EAAAA,WAAU,IAC1CS,EAAaC,IAAmBV,EAAAA,EAAAA,WAAU,IAC1CW,EAAgBC,IAAsBZ,EAAAA,EAAAA,WAAU,IAChDa,EAAkBC,IAAwBd,EAAAA,EAAAA,UAAU,KACpDe,EAAYC,IAAkBhB,EAAAA,EAAAA,UAAU,KAuBhD,OACC,gBAAC,IAAD,KACC,gBAAC,WAAD,CAAaiB,GAAG,MACdpB,EAAE,YACH,gBAAC,IAAD,CAAgBqB,MAAOrB,EAAE,YAAasB,QAAStB,EAAE,2BAElD,gBAAC,SAAD,KACC,gBAAC,IAAD,KACC,gBAAC,IAAD,KAAK,gBAAC,IAAD,CACJuB,OAAQvB,EAAE,mBACVwB,aAAcvB,EACdwB,QAAS7B,EACT8B,SAAUxB,KAGX,gBAAC,IAAD,KAAK,gBAAC,IAAD,CACJqB,OAAQvB,EAAE,mBACVwB,aAAcpB,EACdqB,QAAS7B,EACT8B,SAAUrB,MAGZ,gBAAC,IAAD,KACC,gBAAC,IAAD,KACC,gBAAC,IAAD,CACCkB,OAAQvB,EAAE,YACVyB,QAAS5B,EACT8B,WAAW,EACXD,SAAUnB,EACVqB,cAAc,UAIjB,gBAAC,IAAD,KACC,gBAAC,IAAD,KACC,gBAAC,IAAD,CACCL,OAAQvB,EAAE,iBACVwB,aAAcd,EACdgB,SAAUf,EACVkB,UAAWvB,EACXwB,MAAO,CACNC,QAASzB,EAAQ,EAAM,EACvB0B,MAAO,WAIV,gBAAC,IAAD,KACC,gBAAC,IAAD,CACCT,OAAQvB,EAAE,iBACVwB,aAAcZ,EACdc,SAAUb,EACVgB,UAAWvB,EACXwB,MAAO,CACNC,QAASzB,EAAQ,EAAM,EACvB0B,MAAO,YAKX,gBAAC,IAAD,KACC,gBAAC,IAAD,KACC,gBAAC,IAAD,CACCT,OAAQvB,EAAE,wBACVwB,aAAchB,EACdkB,SAAUjB,KAGZ,gBAAC,IAAD,KACC,gBAAC,IAAD,CACCc,OAAQvB,EAAE,0BACVwB,aAAcV,EACdY,SAAUX,MAIb,gBAAC,IAAD,KACC,gBAAC,IAAD,KACC,gBAAC,IAAD,CACCQ,OAAQvB,EAAE,2BACViC,OAAO,EACPR,QAAS,CAAE,SAAU,UACrBC,SAAYQ,IACLC,GAAAA,CAASD,KACdA,EAAQ,CAAEA,IAEXjB,EAAqBiB,QAKzB,gBAAC,IAAD,KACC,gBAAC,IAAD,KACC,gBAAC,IAAD,CACCX,OAAQvB,EAAE,uBACV6B,UAAWO,GAAAA,CAASpB,EAAkB,UACtCqB,IAAK,IACLC,IAAK,EACLC,KAAM,IACNf,aAAcN,EACdQ,SAAUP,MAIb,gBAAC,IAAD,CAAQqB,QAAQ,UAAUC,OAAK,EAACC,QA5HX,KACvB,MAAMC,GAASC,EAAAA,EAAAA,GAAc,GACvBC,EAAS,CACd5C,EAAAA,EAAGG,EAAAA,EAAGI,cAAAA,EAAeQ,iBAAAA,EAAkB2B,OAAAA,GAWlCG,EAAS,gBAAC,IAAD,CAASC,GAAIJ,EAAQK,KAAMrD,EAAMqD,KAAM/C,EAAGA,EAAGG,EAAGA,EAAGE,MAAOA,EACxEE,cAAeA,EAAeE,YAAaA,EAAaE,YAAaA,EACrEE,eAAgBA,EAAgBE,iBAAkBA,EAClDE,WAAYA,EAAY2B,OAAQA,EAAQI,QAZzB,KACftD,EAAMuD,QAAQC,gBAAgB,CAC7B9B,MAAOrB,EAAE,eACToD,QAASpD,EAAE,uBACXqD,MAAO,UACPC,SAAU,OAEX3D,EAAM4D,UAAWC,EAAAA,GAA6BX,IAKYY,WAAY9D,EAAM8D,aAC7E9D,EAAM4D,UAAWG,EAAAA,GAAuBb,GACxClD,EAAMgE,UAAWb,KA0Gb9C,EAAE,gBAURN,EAAYkE,aAAe,CAC1B9D,SAAU,KACVC,SAAU,KACVF,kBAAmB,KACnB0D,cACAE,gBAGD/D,EAAYmE,UAAY,CACvBb,KAAMc,IAAAA,OAAAA,WACNhE,SAAUgE,IAAAA,OACV/D,SAAU+D,IAAAA,OACVjE,kBAAmBiE,IAAAA,MACnBP,UAAWO,IAAAA,KACXH,UAAWG,IAAAA,KAAAA,WACXL,WAAYK,IAAAA,KACZZ,QAASY,IAAAA,OAAAA,WACTlE,UAAWkE,IAAAA,MAAAA,YAMZ,a,+GCnLA,MAAMC,EAAmBpE,IACxB,MAAMqE,EAAU,gBAAC,IAAD,CAASjB,GAAG,4BAC3B,gBAAC,IAAD,KAAepD,EAAM0B,OACrB,gBAAC,IAAD,KAAiB1B,EAAM2B,UAExB,OACC,gBAAC,IAAD,CAAgB2C,QAAS,CAAE,QAAS,QAAS,SAAWC,UAAU,OAAOC,WAAS,EAACC,QAASJ,GAC3F,gBAAC,IAAD,CACCK,KAAK,KACL7B,QAAQ,oBACR8B,UAAU,mBAEV,uBAAKA,UAAU,sBAMnBP,EAAeF,UAAY,CAC1B,QAAWC,IAAAA,UAAoB,CAAEA,IAAAA,OAAkBA,IAAAA,OAAkBS,WACrE,MAAST,IAAAA,OAAAA,YAMV,O,kIC1BA,MAAMU,GAAMC,E,SAAAA,GAAa,kBAmBnBC,EAAkB/E,IACvB,MAAM,KAAEgF,EAAF,aAAQnD,EAAR,SAAsBK,EAAtB,SAAgCH,GAAa/B,EAC7CoD,GAAK6B,EAAAA,EAAAA,QAAQjF,EAAMoD,IAAMyB,EAAK7E,IAC9BuD,GAAU2B,EAAAA,EAAAA,YAAYC,EAAAA,IACpB5C,EAAO6C,IAAa5E,EAAAA,EAAAA,UAC3BwE,GAAQzB,EAAQ8B,MAAQ9B,EAAQ8B,MAAOL,GAAQnD,IAEhDyD,EAAAA,EAAAA,YAAW,KACVF,EAAUvD,KACR,CAAEA,KACLyD,EAAAA,EAAAA,YAAW,KACLN,GACJI,EAAUG,EAAAA,EAAOC,OAAOH,MAAOL,MAE9B,CAAEA,KACLM,EAAAA,EAAAA,YAAW,KACV,GAAKN,EAAO,CACX,IAAIS,EAAcF,EAAAA,EAAOC,OAAOH,MAAOL,GAClCS,IAAgBlD,GACpB6C,EAAUK,MAGV,CAAET,EAAMzC,IACX,MAAMmD,GAAcC,EAAAA,EAAAA,cAAeC,IAClCR,EAAUQ,GACLZ,GACJO,EAAAA,EAAOC,OAAOK,SAAS,CACtB,CAAEb,GAAQY,MAGV,CAAEZ,IACCc,GAAeH,EAAAA,EAAAA,cAAeI,IACnC,MAAMH,EAAWG,EAAMC,OAAOC,QAC9BlE,EAAU6D,GACVF,EAAaE,KACX,CAAE7D,EAAU2D,IACTQ,EAAmB,KACxB,MAAMN,EAA2B,OAAhB5F,EAAMuC,OAAkBvC,EAAMuC,OAASA,EACxDR,EAAU6D,GACVF,EAAaE,IAERO,EAAQ,yBACbxB,UAAU,iBACVyB,KAAK,WACLH,QAAyB,OAAhBjG,EAAMuC,MAAiBvC,EAAMuC,MAAQA,EAC9CA,MAAM,WACNR,SAAU+D,EACV5D,SAAUA,EACV,aAAYlC,EAAMqG,UAEnB,IAAsB,IAAjBrG,EAAMsG,OACV,OACC,gBAAC,IAAD,CAASD,QAASrG,EAAMqG,QAAS9B,UAAWvE,EAAMuG,kBACjD,wBAAMnD,GAAIA,EAAGoD,QAASrE,MAAO,CAAEsE,WAAY,SAAUzG,EAAMmC,QACzDgE,EACD,wBACCO,KAAK,SAASC,SAAU,EACxBhC,UAAU,kBACVxC,MAAO,CACNyE,MAAO1E,EAAW,WAAa,MAEhCa,QAASmD,EAAkBW,WAAYX,GACtClG,EAAM4B,UAKZ,MAAMkF,EAAe5E,EAAW6E,IAAOb,EACvC,OACC,gBAAC,IAAD,CAASG,QAASrG,EAAMqG,QAAS9B,UAAWvE,EAAMuG,kBACjD,uBAAKnD,GAAIA,EAAGoD,QAAS7B,UAAU,2BAA2BxC,MAAOnC,EAAMmC,OACrEgE,EACD,wBACCO,KAAK,SAASC,SAAU,EACxBhC,UAAU,kBACVxC,MAAO,CACNyE,MAAO1E,EAAW,WAAa,MAEhCa,QAAS+D,EAAcD,WAAYC,GAClC9G,EAAM4B,WASZmD,EAAcd,aAAe,CAC5Be,KAAM,GACNjD,aACAF,cAAc,EACdU,MAAO,KACPL,UAAU,EACVoE,QAAQ,EACR1E,OAAQ,GACRyE,QAAS,GACTE,iBAAkB,QAClBpE,MAAO,IAGR4C,EAAcb,UAAY,CACzBc,KAAMb,IAAAA,OACNtC,aAAcsC,IAAAA,KACd5B,MAAO4B,IAAAA,KACPjC,SAAUiC,IAAAA,KACVmC,OAAQnC,IAAAA,KACRpC,SAAUoC,IAAAA,KACVvC,OAAQuC,IAAAA,UAAoB,CAC3BA,IAAAA,OACAA,IAAAA,OAEDkC,QAASlC,IAAAA,OACToC,iBAAkBpC,IAAAA,MAAgB,CAAE,OAAQ,MAAO,QAAS,WAC5DhC,MAAOgC,IAAAA,QAMR,ICjJA,EDiJA,G,qNEvIA,MAAM6C,EAAQC,GAAAA,CAAQ,qBAwBhBC,EAAgBlH,IACrB,MAAM,KAAEgF,EAAF,aAAQnD,EAAR,OAAsBD,EAAtB,SAA8BM,EAA9B,YAAwCiF,EAAxC,OAAqDb,EAArD,IAA6D5D,EAA7D,IAAkEC,EAAlE,SAAuEZ,EAAvE,UAAiFqF,EAAjF,KAA4FxE,EAA5F,SACLyE,EADK,SACKC,EADL,iBACeC,EADf,gBACiCC,EADjC,MACkDrF,GAAUnC,GAE5D,EAAEK,IAAMoH,EAAAA,EAAAA,GAAgB,SACxBlE,GAAU2B,EAAAA,EAAAA,YAAYC,EAAAA,IACpB5C,EAAO6C,IAAa5E,EAAAA,EAAAA,UAC3BwE,GAAQzB,EAAQ8B,MAAQ9B,EAAQ8B,MAAOL,GAASnD,IAEjDyD,EAAAA,EAAAA,YAAW,KACV,GAAKN,EAAO,CACX,MAAMS,EAAcF,EAAAA,EAAOC,OAAOH,MAAOL,GACpCS,IAAgBlD,GACpB6C,EAAUK,MAGV,CAAET,EAAMzC,KACX+C,EAAAA,EAAAA,YAAW,KACVF,EAAUvD,KACR,CAAEA,KACLyD,EAAAA,EAAAA,YAAW,KACLN,GACJI,EAAUG,EAAAA,EAAOC,OAAOH,MAAOL,MAE9B,CAAEA,IAEL,MAAM0C,GAAe/B,EAAAA,EAAAA,cAAeI,IACnCiB,EAAO,wBACP,IAAIpB,EAAWG,EAAMC,OAAOzD,MACV,KAAbqD,IACJA,EAAW+B,WAAY/B,IAEnBA,EAAWjD,EACfiD,EAAWjD,EAEFiD,EAAWlD,EACpBkD,EAAWlD,EAEO,IAATE,GAA6B,KAAbgD,IACzBA,GAAsBA,EAAWhD,GAElCoE,EAAQ,2BAA0BzE,QAC7BqD,IAAarD,IACjB6C,EAAUQ,GACV7D,EAAU6D,GACLZ,GACJO,EAAAA,EAAOC,OAAOK,SAAS,CACtB,CAAEb,GAAQzC,OAIX,CAAEyC,EAAMrC,EAAKD,EAAKE,EAAML,EAAOR,IAE5B6F,GAAoBjC,EAAAA,EAAAA,cAAeI,IACxC,MAAM8B,EAAQ9B,EAAMC,OAAO8B,SAASD,MACpC,IAAIjC,EAAWG,EAAMC,OAAOzD,MAC5ByE,EAAQ,0BAAyBzE,KACjC6C,EAAUQ,GAELiC,GAAsB,KAAbjC,GACbA,EAAW+B,WAAY/B,GACvB7D,EAAU6D,GACLZ,GACJO,EAAAA,EAAOC,OAAOK,SAAS,CACtB,CAAEb,GAAQY,KAGDZ,GACXO,EAAAA,EAAOC,OAAOK,SAAS,CACtB,CAAEb,GAAQY,MAGV,CAAEZ,EAAMzC,EAAOR,IAElB,IAUIgG,EAVA1B,EAAW,GAAEhG,EAAE,YAA0BA,EAAJ,IAATuC,EAAe,UAAe,aACzDD,IAAQqF,KAAQtF,IAAQuF,IAC5B5B,GAAY,GAAEhG,EAAE,cAAcqC,KAAOrC,EAAE,UAAUsC,KACtCD,IAAQuF,IACnB5B,GAAY,GAAEhG,EAAE,yBAAyBqC,KAC9BC,IAAQqF,IACnB3B,GAAY,GAAEhG,EAAE,0BAA0BsC,KAE1C0D,GAAW,IAIX0B,EADc,KAAVxF,EACW2F,GAAAA,CAAQ3F,GAAU,EAAM6E,GAExB7E,EAEhB,MAAM4F,EAAa,yBAClB/B,KAAK,QACLzB,UAAU,qBACVjC,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNL,MAAOwF,EACP7F,SAAUA,EACVH,SAAU6F,EACVzF,MAAO,CACNE,MAAOiE,EAAS,OAAS,OACzB8B,QAAS9B,EAAS,SAAW,WAC1BkB,KAGCa,EAAc,yBACnBjC,KAAK,SACLkC,KAAK,QACL3D,UAAU,sBACVzC,SAAUA,EACVQ,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNL,MAAOwF,EACPhG,SAAU6F,EACVW,OAAQb,EACRvF,MAAO,CACNE,MAAOiE,EAAS,OAAS,QACzBkC,UAAW5G,IAAW0E,GAAU,GAAK,KAClCiB,GAEJkB,aAAa,QAEd,OAAKnC,EAEH,wBAAM3B,UAAU,QAAQxC,MAAO,CAC9BuG,QAAS,MACTtG,QAASF,EAAW,GAAM,KACvBC,IAEDP,EACD,6BAAQA,EAAR,KACA,KAED,wBAAM+C,UAAU,wBACf,gBAACgE,EAAA,EAAD,CAAO9F,QAAQ,aAAcwE,GAAY3E,GACxCyF,EACD,gBAACQ,EAAA,EAAD,CAAO9F,QAAQ,aAAcyE,GAAY3E,IAEzC0F,GAKH,gBAAC,IAAD,CACCjF,GAAG,gBACHmB,UAAU,MACVqE,MAAOzB,EACPd,QAASnE,EAAW7B,EAAE,mBAAqBgG,GAE3C,uBACC1B,UAAU,yBACVxC,MAAO,CACNC,QAASF,EAAW,GAAM,KACvBC,IAGFP,EACD,6BAAQA,EAAR,KACA,KAED,2BACA,wBAAM+C,UAAU,wBACf,gBAACgE,EAAA,EAAD,CAAO9F,QAAQ,YAAYV,MAAO,CAAEE,MAAO,SAAYgF,GAAY3E,GAClEyF,EACD,gBAACQ,EAAA,EAAD,CAAO9F,QAAQ,YAAYV,MAAO,CAAEE,MAAO,SAAYiF,GAAY3E,IAEnE0F,EACD,8BASJnB,EAAYjD,aAAe,CAC1BqC,QAAQ,EACR1E,OAAQ,KACRc,IAAK,EACL2E,SAAU,KACV1E,IAAK,IACL2E,SAAU,KACV1E,KAAM,EACNf,aAAc,GACdE,aACAqF,UAAW,GACXlF,UAAU,EACViF,aAAa,EACbhF,MAAO,GACPoF,iBAAkB,GAClBC,gBAAiB,IAGlBN,EAAYhD,UAAY,CACvBrC,aAAcsC,IAAAA,OACdjC,SAAUiC,IAAAA,KACVmC,OAAQnC,IAAAA,KACRvC,OAAQuC,IAAAA,UAAoB,CAC3BA,IAAAA,OACAA,IAAAA,OAEDxB,IAAKwB,IAAAA,OACLmD,SAAUnD,IAAAA,OACVzB,IAAKyB,IAAAA,OACLkD,SAAUlD,IAAAA,OACVpC,SAAUoC,IAAAA,KACViD,UAAWjD,IAAAA,OACXvB,KAAMuB,IAAAA,UAAoB,CACzBA,IAAAA,OACAA,IAAAA,SAEDgD,YAAahD,IAAAA,KACbhC,MAAOgC,IAAAA,OACPoD,iBAAkBpD,IAAAA,OAClBqD,gBAAiBrD,IAAAA,QAMlB,IChQA,EDgQA","sources":["../node_modules/@isle-project/components/data-explorer/menu/heatmap.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/slider/main.js","../node_modules/@isle-project/components/input/slider/index.js"],"sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport SelectInput from '@isle-project/components/input/select';\nimport SliderInput from '@isle-project/components/input/slider';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport isArray from '@stdlib/assert/is-array';\nimport contains from '@stdlib/assert/contains';\nimport HeatMap from '@isle-project/components/plots/heatmap';\nimport { DATA_EXPLORER_SHARE_HEATMAP, DATA_EXPLORER_HEATMAP } from '@isle-project/constants/actions.js';\nimport QuestionButton from './../question_button.js';\n\n\n// MAIN //\n\nconst HeatMapMenu = ( props ) => {\n\tconst { variables, groupingVariables, defaultX, defaultY, t } = props;\n\n\tconst [ x, setX ] = useState( defaultX || variables[ 0 ] );\n\tconst [ y, setY ] = useState( defaultY || variables[ 1 ] );\n\tconst [ group, setGroup ] = useState( null );\n\tconst [ overlayPoints, setOverlayPoints ] = useState( false );\n\tconst [ commonXAxis, setCommonXAxis ] = useState( false );\n\tconst [ commonYAxis, setCommonYAxis ] = useState( false );\n\tconst [ alternateColor, setAlternateColor ] = useState( false );\n\tconst [ regressionMethod, setRegressionMethod ] = useState( [] );\n\tconst [ smoothSpan, setSmoothSpan ] = useState( 0.66 );\n\n\tconst generateHeatmap = () => {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx, y, overlayPoints, regressionMethod, plotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tprops.session.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tprops.logAction( DATA_EXPLORER_SHARE_HEATMAP, action );\n\t\t};\n\t\tconst output = <HeatMap id={plotId} data={props.data} x={x} y={y} group={group}\n\t\t\toverlayPoints={overlayPoints} commonXAxis={commonXAxis} commonYAxis={commonYAxis}\n\t\t\talternateColor={alternateColor} regressionMethod={regressionMethod}\n\t\t\tsmoothSpan={smoothSpan} action={action} onShare={onShare} onSelected={props.onSelected} />;\n\t\tprops.logAction( DATA_EXPLORER_HEATMAP, action );\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Heat Map')}\n\t\t\t\t<QuestionButton title={t('Heat Map')} content={t('Heat Map-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col><SelectInput\n\t\t\t\t\t\tlegend={t('x-axis-variable')}\n\t\t\t\t\t\tdefaultValue={x}\n\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\tonChange={setX}\n\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col><SelectInput\n\t\t\t\t\t\tlegend={t('y-axis-variable')}\n\t\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\t\toptions={variables}\n\t\t\t\t\t\tonChange={setY}\n\t\t\t\t\t/></Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('group-by')}\n\t\t\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\t\t\tclearable={true}\n\t\t\t\t\t\t\tonChange={setGroup}\n\t\t\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('common-x-axis')}\n\t\t\t\t\t\t\tdefaultValue={commonXAxis}\n\t\t\t\t\t\t\tonChange={setCommonXAxis}\n\t\t\t\t\t\t\tdisabled={!group}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\topacity: group ? 1.0 : 0.0,\n\t\t\t\t\t\t\t\tfloat: 'left'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('common-y-axis')}\n\t\t\t\t\t\t\tdefaultValue={commonYAxis}\n\t\t\t\t\t\t\tonChange={setCommonYAxis}\n\t\t\t\t\t\t\tdisabled={!group}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\topacity: group ? 1.0 : 0.0,\n\t\t\t\t\t\t\t\tfloat: 'left'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('overlay-observations')}\n\t\t\t\t\t\t\tdefaultValue={overlayPoints}\n\t\t\t\t\t\t\tonChange={setOverlayPoints}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<CheckboxInput\n\t\t\t\t\t\t\tlegend={t('alternate-color-scheme')}\n\t\t\t\t\t\t\tdefaultValue={alternateColor}\n\t\t\t\t\t\t\tonChange={setAlternateColor}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SelectInput\n\t\t\t\t\t\t\tlegend={t('overlay-regression-line')}\n\t\t\t\t\t\t\tmulti={true}\n\t\t\t\t\t\t\toptions={[ 'linear', 'smooth' ]}\n\t\t\t\t\t\t\tonChange={( value ) => {\n\t\t\t\t\t\t\t\tif ( !isArray( value ) ) {\n\t\t\t\t\t\t\t\t\tvalue = [ value ];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsetRegressionMethod( value );\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<SliderInput\n\t\t\t\t\t\t\tlegend={t('smoothing-parameter')}\n\t\t\t\t\t\t\tdisabled={!contains(regressionMethod, 'smooth')}\n\t\t\t\t\t\t\tmin={0.01}\n\t\t\t\t\t\t\tmax={1}\n\t\t\t\t\t\t\tstep={0.01}\n\t\t\t\t\t\t\tdefaultValue={smoothSpan}\n\t\t\t\t\t\t\tonChange={setSmoothSpan}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Button variant=\"primary\" block onClick={generateHeatmap}>\n\t\t\t\t\t{t('generate')}\n\t\t\t\t</Button>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nHeatMapMenu.defaultProps = {\n\tdefaultX: null,\n\tdefaultY: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonSelected() {}\n};\n\nHeatMapMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultX: PropTypes.string,\n\tdefaultY: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func.isRequired,\n\tonSelected: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default HeatMapMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport Badge from 'react-bootstrap/Badge';\nimport roundn from '@stdlib/math/base/special/roundn';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport './slider.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:slider-input' );\n\n\n// MAIN //\n\n/**\n* A slider input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} legend - caption of the input\n* @property {number} defaultValue - The starting value of the slider\n* @property {number} min - The minimum value of the slider\n* @property {number} max - The maximum value of the slider\n* @property {(number|string)} step - step size of the slider\n* @property {boolean} inline - controls whether to place the slider inline with text or outside\n* @property {number} precision - rounding of the input. The value will be rounded to have no more significant digits than the precision. For example, if one wishes to only use integers, a precision of 10 would be used, while if one wishes to round to the hundreds place, one would use a precision of 0.001\n* @property {boolean} disabled - controls whether the slider input is active or not. If set to true, the slider will be present on the screen, albeit grayed-out\n* @property {string} minLabel - label to be displayed to the left of slider instead of minimum value\n* @property {string} maxLabel - label to be displayed to the right of slider instead of maximum value\n* @property {boolean} hideTooltip - controls whether to hide tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} numberInputStyle - CSS inline styles for number input component\n* @property {Object} rangeInputStyle - CSS inline style for range input component\n* @property {Function} onChange - callback invoked with the new value when the slider value changes\n*/\nconst SliderInput = ( props ) => {\n\tconst { bind, defaultValue, legend, disabled, hideTooltip, inline, min, max, onChange, precision, step,\n\t\tminLabel, maxLabel, numberInputStyle, rangeInputStyle, style } = props;\n\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ] : defaultValue\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ]);\n\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finalizing change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if ( step === 1.0 && newValue !== '' ) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tdebug( `Setting state value to: ${value}...` );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, max, min, step, value, onChange ] );\n\n\tconst handleInputChange = useCallback( ( event ) => {\n\t\tconst valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tdebug( `Input value changed to ${value}` );\n\t\tsetValue( newValue );\n\n\t\tif ( valid && newValue !== '' ) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, value, onChange ] );\n\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}:`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}:`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}:`;\n\t} else {\n\t\ttooltip += ':';\n\t}\n\tlet roundedValue;\n\tif ( value !== '' ) {\n\t\troundedValue = roundn( value, ( -1.0 )*precision );\n\t} else {\n\t\troundedValue = value;\n\t}\n\tconst rangeInput = <input\n\t\ttype=\"range\"\n\t\tclassName=\"slider-range-input\"\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tdisabled={disabled}\n\t\tonChange={handleInputChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'left',\n\t\t\tdisplay: inline ? 'inline' : 'block',\n\t\t\t...rangeInputStyle\n\t\t}}\n\t/>;\n\tconst numberInput = <input\n\t\ttype=\"number\"\n\t\tname=\"input\"\n\t\tclassName=\"slider-number-input\"\n\t\tdisabled={disabled}\n\t\tmin={min}\n\t\tmax={max}\n\t\tstep={step}\n\t\tvalue={roundedValue}\n\t\tonChange={handleInputChange}\n\t\tonBlur={finishChange}\n\t\tstyle={{\n\t\t\tfloat: inline ? 'none' : 'right',\n\t\t\tmarginTop: legend && !inline ? -22 : 0,\n\t\t\t...numberInputStyle\n\t\t}}\n\t\tautoComplete=\"off\"\n\t/>;\n\tif ( inline ) {\n\t\treturn (\n\t\t\t<span className=\"input\" style={{\n\t\t\t\tpadding: '5px',\n\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t...style\n\t\t\t}}>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t</span>\n\t\t);\n\t}\n\treturn (\n\t\t<Tooltip\n\t\t\tid=\"sliderTooltip\"\n\t\t\tplacement=\"top\"\n\t\t\tshow={!hideTooltip}\n\t\t\ttooltip={disabled ? t('slider-disabled') : tooltip}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"slider-outer-div input\"\n\t\t\t\tstyle={{\n\t\t\t\t\topacity: disabled ? 0.2 : 1.0,\n\t\t\t\t\t...style\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ legend ?\n\t\t\t\t\t<label>{legend}:</label> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t\t<br />\n\t\t\t\t<span className=\"slider-range-wrapper\" >\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{minLabel || min}</Badge>\n\t\t\t\t\t{rangeInput}\n\t\t\t\t\t<Badge variant=\"secondary\" style={{ float: 'left' }} >{maxLabel || max}</Badge>\n\t\t\t\t</span>\n\t\t\t\t{numberInput}\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nSliderInput.defaultProps = {\n\tinline: false,\n\tlegend: null,\n\tmin: 0,\n\tminLabel: null,\n\tmax: 100,\n\tmaxLabel: null,\n\tstep: 1,\n\tdefaultValue: 10,\n\tonChange() {},\n\tprecision: 10,\n\tdisabled: false,\n\thideTooltip: false,\n\tstyle: {},\n\tnumberInputStyle: {},\n\trangeInputStyle: {}\n};\n\nSliderInput.propTypes = {\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmaxLabel: PropTypes.string,\n\tmin: PropTypes.number,\n\tminLabel: PropTypes.string,\n\tonChange: PropTypes.func,\n\tprecision: PropTypes.number,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\thideTooltip: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tnumberInputStyle: PropTypes.object,\n\trangeInputStyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default SliderInput;\n","// MODULES //\n\nimport SliderInput from './main.js';\n\n\n// EXPORTS //\n\nexport default SliderInput;\n"],"names":["HeatMapMenu","props","variables","groupingVariables","defaultX","defaultY","t","x","setX","useState","y","setY","group","setGroup","overlayPoints","setOverlayPoints","commonXAxis","setCommonXAxis","commonYAxis","setCommonYAxis","alternateColor","setAlternateColor","regressionMethod","setRegressionMethod","smoothSpan","setSmoothSpan","as","title","content","legend","defaultValue","options","onChange","clearable","menuPlacement","disabled","style","opacity","float","multi","value","isArray","contains","min","max","step","variant","block","onClick","plotId","randomstring","action","output","id","data","onShare","session","addNotification","message","level","position","logAction","DATA_EXPLORER_SHARE_HEATMAP","onSelected","DATA_EXPLORER_HEATMAP","onCreated","defaultProps","propTypes","PropTypes","QuestionButton","popover","trigger","placement","rootClose","overlay","size","className","isRequired","uid","generateUID","CheckboxInput","bind","useRef","useContext","SessionContext","setValue","state","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","marginLeft","role","tabIndex","color","onKeyPress","onSpanChange","noop","debug","logger","SliderInput","hideTooltip","precision","minLabel","maxLabel","numberInputStyle","rangeInputStyle","useTranslation","finishChange","parseFloat","handleInputChange","valid","validity","roundedValue","PINF","NINF","roundn","rangeInput","display","numberInput","name","onBlur","marginTop","autoComplete","padding","Badge","show"],"sourceRoot":""}