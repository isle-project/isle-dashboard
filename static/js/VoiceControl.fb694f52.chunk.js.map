{"version":3,"file":"static/js/VoiceControl.fb694f52.chunk.js","mappings":"oSAeMA,EAAgB,SAAEC,EAAUC,GACjC,GAAKD,EAAW,CACf,IAAME,EAAOF,EAASG,KAAK,SAAEC,EAAMC,GAClC,OAAS,sBAAIC,IAAKD,GACjB,0BAAME,GAAAA,CAASH,EAAKI,SAAYJ,EAAKI,QAAQC,KAAM,MAASL,EAAKI,SACjE,0BAAKJ,EAAKM,iBAGZ,OAAS,gBAAC,IAAD,CAASC,MAAO,CAAEC,SAAU,IAAMC,GAAG,yBAC7C,yBACC,yBAAIZ,EAAG,wBAER,yBAAOa,UAAU,wCAChB,6BACC,0BACC,0BAAKb,EAAG,aACR,0BAAKA,EAAG,kBAGV,6BACEC,IAGH,yBAAID,EAAG,yBAGT,OAAO,MAcFc,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACL,WAAaC,EAAOC,GAAW,IAAD,wBAC7B,cAAOD,IADsB,iCA4BhB,WACb,EAAKE,SAAS,CACbC,QAAQ,QA9BoB,+BAkClB,WACX,EAAKD,SAAS,CACbC,QAAQ,QApCoB,iCAwChB,WACR,EAAKC,MAAMD,OACf,EAAKE,cAEW,EAAKJ,QACbK,gBAAgBC,UAAW,EAAKP,MAAMH,OA1C/C,EAAKO,MAAQ,CACZD,QAAQ,EACRK,OAAMP,GAAUA,EAAQQ,sBALI,EAiE7B,OA1DA,yCAED,WAAqB,IAAD,OACbC,EAAUC,KAAKV,QAChBS,IACJA,EAAQJ,gBAAgBM,SAAS,CAChCC,KAAMF,KAAKX,MAAMH,GACjBiB,UAAWH,KAAKX,MAAMc,UACtB9B,SAAU2B,KAAKX,MAAMhB,SACrB+B,QAASJ,OAEVA,KAAKK,YAAcN,EAAQO,WAAW,SAAEC,EAAMC,GACxCD,IAASE,EAAAA,IACb,EAAKlB,SAAS,CACbM,KAAMW,UAKV,oBAuBD,WACC,IAAMR,KAAKX,MAAMH,IAAMc,KAAKX,MAAMqB,OAASV,KAAKP,MAAMI,KACrD,OAAO,KAER,IAAMc,EAAUX,KAAKP,MAAMD,OAAS,UAAY,UAChD,OACC,gBAAC,IAAD,CACCoB,UAAU,OACVC,QAASzC,EAAe4B,KAAKX,MAAMhB,SAAU2B,KAAKX,MAAMf,IAExD,gBAAC,IAAD,CAAQU,MAAO,CAAE8B,UAAW,OAAQC,MAAO,SAAWJ,QAASA,EAASK,QAAShB,KAAKiB,YAAaC,KAAK,MACvG,uBAAK/B,UAAU,gBACf,wBAAMH,MAAO,CAAEmC,WAAY,IAAOnB,KAAKX,MAAMH,UAIhD,EAlEIE,CAAqBgC,EAAAA,WA+E3BhC,EAAaiC,aAAe,CAC3BnC,GAAI,KACJwB,MAAM,GAGPtB,EAAakC,YAAcC,EAAAA,EAK3B,WAAeC,EAAAA,EAAAA,GAAiB,yBAAhC,CAA4DpC","sources":["../node_modules/@isle-project/components/internal/voice-control/main.js"],"sourcesContent":["// MODULES //\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Button from 'react-bootstrap/Button';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport isArray from '@stdlib/assert/is-array';\nimport OverlayTrigger from '@isle-project/components/overlay-trigger';\nimport SessionContext from '@isle-project/session/context.js';\nimport { VOICE_RECORDING_STATUS } from '@isle-project/constants/events.js';\n\n\n// FUNCTIONS //\n\nconst createTooltip = ( commands, t ) => {\n\tif ( commands ) {\n\t\tconst rows = commands.map( ( elem, idx ) => {\n\t\t\treturn ( <tr key={idx} >\n\t\t\t\t<td>{ isArray( elem.trigger ) ? elem.trigger.join( ', ' ) : elem.trigger}</td>\n\t\t\t\t<td>{elem.description}</td>\n\t\t\t</tr> );\n\t\t});\n\t\treturn ( <Tooltip style={{ fontSize: 10 }} id=\"voice_control_tooltip\">\n\t\t\t<p>\n\t\t\t\t<b>{t( 'available-commands' )}</b>\n\t\t\t</p>\n\t\t\t<table className=\"table table-bordered table-condensed\" >\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{t( 'commands' )}</th>\n\t\t\t\t\t\t<th>{t( 'description' )}</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{rows}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<p>{t( 'click-to-set-active' )}</p>\n\t\t</Tooltip> );\n\t}\n\treturn null;\n};\n\n\n// MAIN //\n\n/**\n* Component to register a reference with the speech control interface.\n*\n* @property {string} id - unique identifier\n* @property {Array} commands - array of voice commands\n* @property {Object} reference - reference object\n* @property {boolean} hide - controls whether to hide control elements for toggling on/off voice control and display a list of available commands\n*/\nclass VoiceControl extends Component {\n\tconstructor( props, context ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\tactive: false,\n\t\t\tshow: context ? context.voiceRecordingStatus : false\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst session = this.context;\n\t\tif ( session ) {\n\t\t\tsession.speechInterface.register({\n\t\t\t\tname: this.props.id,\n\t\t\t\treference: this.props.reference,\n\t\t\t\tcommands: this.props.commands,\n\t\t\t\tcontrol: this\n\t\t\t});\n\t\t\tthis.unsubscribe = session.subscribe( ( type, value ) => {\n\t\t\t\tif ( type === VOICE_RECORDING_STATUS ) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tshow: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tsetInactive = () => {\n\t\tthis.setState({\n\t\t\tactive: false\n\t\t});\n\t}\n\n\tsetActive = () => {\n\t\tthis.setState({\n\t\t\tactive: true\n\t\t});\n\t}\n\n\thandleClick = () => {\n\t\tif ( this.state.active ) {\n\t\t\tthis.setInactive();\n\t\t} else {\n\t\t\tconst session = this.context;\n\t\t\tsession.speechInterface.setActive( this.props.id );\n\t\t}\n\t}\n\n\trender() {\n\t\tif ( !this.props.id || this.props.hide || !this.state.show ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst variant = this.state.active ? 'success' : 'default';\n\t\treturn (\n\t\t\t<OverlayTrigger\n\t\t\t\tplacement=\"left\"\n\t\t\t\toverlay={createTooltip( this.props.commands, this.props.t )}\n\t\t\t>\n\t\t\t\t<Button style={{ boxShadow: 'none', float: 'right' }} variant={variant} onClick={this.handleClick} size=\"sm\" >\n\t\t\t\t\t<div className=\"fa fa-phone\" />\n\t\t\t\t\t<span style={{ marginLeft: 4 }} >{this.props.id}</span>\n\t\t\t\t</Button>\n\t\t\t</OverlayTrigger>\n\t\t);\n\t}\n}\n\n\n// PROPERTIES //\n\nVoiceControl.propTypes = {\n\tid: PropTypes.string,\n\tcommands: PropTypes.array.isRequired,\n\thide: PropTypes.bool,\n\treference: PropTypes.object.isRequired\n};\n\nVoiceControl.defaultProps = {\n\tid: null,\n\thide: false\n};\n\nVoiceControl.contextType = SessionContext;\n\n\n// EXPORTS //\n\nexport default withTranslation( 'internal/voice-control' )( VoiceControl );\n"],"names":["createTooltip","commands","t","rows","map","elem","idx","key","isArray","trigger","join","description","style","fontSize","id","className","VoiceControl","props","context","setState","active","state","setInactive","speechInterface","setActive","show","voiceRecordingStatus","session","this","register","name","reference","control","unsubscribe","subscribe","type","value","VOICE_RECORDING_STATUS","hide","variant","placement","overlay","boxShadow","float","onClick","handleClick","size","marginLeft","Component","defaultProps","contextType","SessionContext","withTranslation"],"sourceRoot":""}