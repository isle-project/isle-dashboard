{"version":3,"sources":["../node_modules/@isle-project/components/data-explorer/menu/lineplot.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js"],"names":[],"mappings":"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","file":"static/js/LineplotMenu.e8feecbb.chunk.js","sourcesContent":["// MODULES //\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport SelectInput from '@isle-project/components/input/select';\nimport selectStyles from '@isle-project/components/input/select/styles';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport randomstring from '@isle-project/utils/randomstring/alphanumeric';\nimport LinePlot from '@isle-project/components/plots/lineplot';\nimport { DATA_EXPLORER_SHARE_LINEPLOT, DATA_EXPLORER_LINEPLOT } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// FUNCTIONS //\n\nfunction createOption( label ) {\n\treturn {\n\t\tlabel,\n\t\tvalue: label\n\t};\n}\n\n\n// MAIN //\n\nconst LinePlotMenu = ( props ) => {\n\tconst { categorical, data, defaultValue, variables, groupingVariables, t, session, logAction, onCreated } = props;\n\tconst [ x, setX ] = useState( null );\n\tconst [ y, setY ] = useState( defaultValue || variables[ 0 ] );\n\tconst [ group, setGroup ] = useState( null );\n\tconst [ showPoints, setShowPoints ] = useState( false );\n\tconst generateLinePlot = () => {\n\t\tconst plotId = randomstring( 6 );\n\t\tconst action = {\n\t\t\tx,\n\t\t\ty,\n\t\t\tgroup,\n\t\t\tplotId\n\t\t};\n\t\tconst onShare = () => {\n\t\t\tsession.addNotification({\n\t\t\t\ttitle: t('plot-shared'),\n\t\t\t\tmessage: t('plot-shared-message'),\n\t\t\t\tlevel: 'success',\n\t\t\t\tposition: 'tr'\n\t\t\t});\n\t\t\tlogAction( DATA_EXPLORER_SHARE_LINEPLOT, action );\n\t\t};\n\t\tconst output = <LinePlot\n\t\t\tdata={data} x={x} y={y}\n\t\t\tgroup={group} showPoints={showPoints}\n\t\t\tonShare={onShare} action={action} id={plotId}\n\t\t/>;\n\t\tlogAction( DATA_EXPLORER_LINEPLOT, action );\n\t\tonCreated( output );\n\t};\n\treturn (\n\t\t<Card>\n\t\t\t<Card.Header as=\"h4\">\n\t\t\t\t{t('Line Plot')}\n\t\t\t\t<QuestionButton title={t('Line Plot')} content={t('Line Plot-description')} />\n\t\t\t</Card.Header>\n\t\t\t<Card.Body className=\"d-grid gap-3\" >\n\t\t\t\t<FormGroup controlId=\"lineplot-form-select\">\n\t\t\t\t\t<FormLabel>{t('x-axis')}</FormLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tlegend={t('x-axis')}\n\t\t\t\t\t\tdefaultValue={null}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Quantitative',\n\t\t\t\t\t\t\t\toptions: variables.map( createOption )\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Categorical',\n\t\t\t\t\t\t\t\toptions: categorical.map( createOption )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tonChange={( elem ) => {\n\t\t\t\t\t\t\tsetX( elem ? elem.value : null );\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder=\"Select... (optional)\"\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tstyles={selectStyles}\n\t\t\t\t\t\tmenuPortalTarget={document.body}\n\t\t\t\t\t\tmenuPlacement=\"auto\"\n\t\t\t\t\t\tmenuShouldScrollIntoView={false}\n\t\t\t\t\t/>\n\t\t\t\t</FormGroup>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('y-axis')}\n\t\t\t\t\tdefaultValue={y}\n\t\t\t\t\toptions={variables}\n\t\t\t\t\tonChange={setY}\n\t\t\t\t/>\n\t\t\t\t<SelectInput\n\t\t\t\t\tlegend={t('group-by')}\n\t\t\t\t\tdefaultValue={group}\n\t\t\t\t\toptions={groupingVariables}\n\t\t\t\t\tclearable={true}\n\t\t\t\t\tmenuPlacement=\"top\"\n\t\t\t\t\tonChange={setGroup}\n\t\t\t\t/>\n\t\t\t\t<CheckboxInput\n\t\t\t\t\tlegend={t('show-point-markers')}\n\t\t\t\t\tdefaultValue={showPoints}\n\t\t\t\t\tonChange={setShowPoints}\n\t\t\t\t/>\n\t\t\t\t<div className=\"d-grid\" >\n\t\t\t\t\t<Button variant=\"primary\" onClick={generateLinePlot}>\n\t\t\t\t\t\t{t('generate')}\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\n\n// PROPERTIES //\n\nLinePlotMenu.defaultProps = {\n\tdefaultValue: null,\n\tgroupingVariables: null,\n\tlogAction() {},\n\tonCreated() {}\n};\n\nLinePlotMenu.propTypes = {\n\tdata: PropTypes.object.isRequired,\n\tdefaultValue: PropTypes.string,\n\tgroupingVariables: PropTypes.array,\n\tlogAction: PropTypes.func,\n\tonCreated: PropTypes.func,\n\tsession: PropTypes.object.isRequired,\n\tcategorical: PropTypes.array.isRequired,\n\tvariables: PropTypes.array.isRequired\n};\n\n\n// EXPORTS //\n\nexport default LinePlotMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverHeader from 'react-bootstrap/PopoverHeader';\nimport PopoverBody from 'react-bootstrap/PopoverBody';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverHeader>{props.title}</PopoverHeader>\n\t\t<PopoverBody>{props.content}</PopoverBody>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\taria-label={props.title}\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\n\n// PROPERTIES //\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleKeyPress = useCallback( ( event ) => {\n\t\tif ( event.which === 13 ) {\n\t\t\tonChange( !value );\n\t\t\tupdateValue( !value );\n\t\t}\n\t}, [ onChange, updateValue, value ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tonKeyPress={handleKeyPress}\n\t\tdisabled={disabled}\n\t\taria-label={props.legend}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\tif ( disabled ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{ color: 'darkgray' }}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</div>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n"],"sourceRoot":""}