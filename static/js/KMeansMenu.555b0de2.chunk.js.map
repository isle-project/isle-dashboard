{"version":3,"file":"static/js/KMeansMenu.555b0de2.chunk.js","mappings":"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","sources":["../node_modules/@isle-project/components/dashboard/index.js","../node_modules/@isle-project/components/data-explorer/menu/kmeans.js","../node_modules/@isle-project/components/data-explorer/question_button.js","../node_modules/@isle-project/components/input/checkbox/main.js","../node_modules/@isle-project/components/input/checkbox/index.js","../node_modules/@isle-project/components/input/number/create_tooltip.js","../node_modules/@isle-project/components/input/number/main.js","../node_modules/@isle-project/components/input/number/index.js"],"sourcesContent":["// MODULES //\n\nimport Loadable from '@isle-project/components/internal/loadable';\n\n\n// MAIN //\n\nconst Dashboard = Loadable( () => import( /* webpackChunkName: \"Dashboard\" */ './main.js' ) );\n\n\n// EXPORTS //\n\nexport default Dashboard;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport contains from '@stdlib/assert/contains';\nimport copy from '@stdlib/utils/copy';\nimport incrspace from '@stdlib/array/incrspace';\nimport SelectInput from '@isle-project/components/input/select';\nimport CheckboxInput from '@isle-project/components/input/checkbox';\nimport NumberInput from '@isle-project/components/input/number';\nimport Dashboard from '@isle-project/components/dashboard';\nimport factor from '@isle-project/utils/factor-variable';\nimport KMeans from '@isle-project/components/models/kmeans';\nimport { DATA_EXPLORER_KMEANS } from '@isle-project/constants/actions.js';\nimport QuestionButton from '../question_button.js';\n\n\n// MAIN //\n\nconst KMeansMenu = ( props ) => {\n\tconst { quantitative, t } = props;\n\tconst compute = ( variables, K, attach, initialization ) => {\n\t\tconst output = <KMeans\n\t\t\tdata={props.data}\n\t\t\tvariables={variables}\n\t\t\tK={K}\n\t\t\tinitialization={initialization}\n\t\t\tonResult={( result ) => {\n\t\t\t\tif ( attach ) {\n\t\t\t\t\tconst newData = copy( props.data, 1 );\n\t\t\t\t\tconst newCategorical = props.categorical.slice();\n\t\t\t\t\tconst suffix = variables.map( x => x[ 0 ] ).join( '' );\n\t\t\t\t\tconst name = factor( 'kmeans_cluster_' + suffix, incrspace( 0, K, 1 ).map( x => `Cluster ${x+1}` ) );\n\t\t\t\t\tnewData[ name ] = result.clusters;\n\t\t\t\t\tif ( !contains( newCategorical, name ) ) {\n\t\t\t\t\t\tnewCategorical.push( name );\n\t\t\t\t\t}\n\t\t\t\t\tprops.onGenerate( newCategorical, newData );\n\t\t\t\t}\n\t\t\t}}\n\t\t/>;\n\t\tprops.logAction( DATA_EXPLORER_KMEANS, {\n\t\t\tvariables, K, attach, initialization\n\t\t});\n\t\tprops.onCreated( output );\n\t};\n\treturn (\n\t\t<Dashboard\n\t\t\ttitle={<span>\n\t\t\t\t{t('kmeans Clustering')}\n\t\t\t\t<QuestionButton title={t('kmeans Clustering')} content={t('kmeans-description')} />\n\t\t\t</span>}\n\t\t\tautoStart={false}\n\t\t\tonGenerate={compute}\n\t\t>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('variables')} multi\n\t\t\t\toptions={quantitative}\n\t\t\t\tcloseMenuOnSelect={false}\n\t\t\t/>\n\t\t\t<NumberInput\n\t\t\t\tlegend={t('number-of-clusters')}\n\t\t\t\tmin={1}\n\t\t\t\tdefaultValue={3}\n\t\t\t/>\n\t\t\t<CheckboxInput\n\t\t\t\tlegend={t('attach-clusters-table')}\n\t\t\t\tdefaultValue={false}\n\t\t\t/>\n\t\t\t<SelectInput\n\t\t\t\tlegend={t('initialization-method')}\n\t\t\t\toptions={[ 'kmeans++', 'random', 'mostDistant' ]}\n\t\t\t\tdefaultValue=\"kmeans++\"\n\t\t\t/>\n\t\t</Dashboard>\n\t);\n};\n\n\n// PROPERTIES //\n\nKMeansMenu.defaultProps = {\n\tlogAction() {}\n};\n\nKMeansMenu.propTypes = {\n\tcategorical: PropTypes.array.isRequired,\n\tquantitative: PropTypes.array.isRequired,\n\tdata: PropTypes.object.isRequired,\n\tlogAction: PropTypes.func,\n\tonGenerate: PropTypes.func.isRequired,\n\tonCreated: PropTypes.func.isRequired\n};\n\n\n// EXPORTS //\n\nexport default KMeansMenu;\n","// MODULES //\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport PopoverTitle from 'react-bootstrap/PopoverTitle';\nimport PopoverContent from 'react-bootstrap/PopoverContent';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n\n\n// MAIN //\n\nconst QuestionButton = ( props ) => {\n\tconst popover = <Popover id=\"popover-positioned-right\">\n\t\t<PopoverTitle>{props.title}</PopoverTitle>\n\t\t<PopoverContent>{props.content}</PopoverContent>\n\t</Popover>;\n\treturn (\n\t\t<OverlayTrigger trigger={[ 'click', 'hover', 'focus' ]} placement=\"left\" rootClose overlay={popover}>\n\t\t\t<Button\n\t\t\t\tsize=\"sm\"\n\t\t\t\tvariant=\"outline-secondary\"\n\t\t\t\tclassName=\"question-button\"\n\t\t\t>\n\t\t\t\t<div className=\"fa fa-question\" />\n\t\t\t</Button>\n\t\t</OverlayTrigger>\n\t);\n};\n\nQuestionButton.propTypes = {\n\t'content': PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]).isRequired,\n\t'title': PropTypes.string.isRequired\n};\n\n\n// EXPORTS //\n\nexport default QuestionButton;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport noop from '@stdlib/utils/noop';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport './checkbox.css';\n\n\n// VARIABLES //\n\nconst uid = generateUID( 'checkbox-input' );\n\n\n// MAIN //\n\n/**\n* A checkbox input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the checkbox value to be assigned to\n* @property {boolean} defaultValue - boolean value indicating the default value of the checkbox\n* @property {boolean} value - checkbox value (for controlled component)\n* @property {boolean} disabled - indicates whether the input is active or not\n* @property {boolean} inline - indicates whether the checkbox is displayed inline\n* @property {string} legend - text displayed next to the checkbox\n* @property {string} tooltip - text displayed when hovering over checkbox\n* @property {string} tooltipPlacement - position of button tooltip\n* @property {Object} style - CSS inline styles\n* @property {Function} onChange - callback function to be invoked when checkbox is clicked. The function is called with the current checkbox value\n*/\nconst CheckboxInput = ( props ) => {\n\tconst { bind, defaultValue, disabled, onChange } = props;\n\tconst id = useRef( props.id || uid( props ) );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tbind && session.state ? session.state[ bind ]: defaultValue\n\t);\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tlet globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ]);\n\tconst updateValue = useCallback( ( newValue ) => {\n\t\tsetValue( newValue );\n\t\tif ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind ] );\n\tconst handleChange = useCallback( ( event ) => {\n\t\tconst newValue = event.target.checked;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t}, [ onChange, updateValue ] );\n\tconst handleSpanChange = () => {\n\t\tconst newValue = props.value !== null ? !props.value : !value;\n\t\tonChange( newValue );\n\t\tupdateValue( newValue );\n\t};\n\tconst input = <input\n\t\tclassName=\"checkbox-input\"\n\t\ttype=\"checkbox\"\n\t\tchecked={props.value !== null ? props.value : value}\n\t\tvalue=\"checkbox\"\n\t\tonChange={handleChange}\n\t\tdisabled={disabled}\n\t\taria-label={props.tooltip}\n\t></input>;\n\tif ( props.inline === true ) {\n\t\treturn (\n\t\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t\t<span id={id.current} style={{ marginLeft: '8px', ...props.style }}>\n\t\t\t\t\t{input}\n\t\t\t\t\t<span\n\t\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClick={handleSpanChange} onKeyPress={handleSpanChange}\n\t\t\t\t\t>{props.legend}</span>\n\t\t\t\t</span>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tconst onSpanChange = disabled ? noop : handleSpanChange;\n\treturn (\n\t\t<Tooltip tooltip={props.tooltip} placement={props.tooltipPlacement} >\n\t\t\t<div id={id.current} className=\"input checkbox-input-div\" style={props.style}>\n\t\t\t\t{input}\n\t\t\t\t<span\n\t\t\t\t\trole=\"button\" tabIndex={0}\n\t\t\t\t\tclassName=\"checkbox-legend\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: disabled ? 'darkgray' : null\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={onSpanChange} onKeyPress={onSpanChange}\n\t\t\t\t>{props.legend}</span>\n\t\t\t</div>\n\t\t</Tooltip>\n\t);\n};\n\n\n// PROPERTIES //\n\nCheckboxInput.defaultProps = {\n\tbind: '',\n\tonChange() {},\n\tdefaultValue: false,\n\tvalue: null,\n\tdisabled: false,\n\tinline: false,\n\tlegend: '',\n\ttooltip: '',\n\ttooltipPlacement: 'right',\n\tstyle: {}\n};\n\nCheckboxInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.bool,\n\tvalue: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tonChange: PropTypes.func,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'left', 'top', 'right', 'bottom' ]),\n\tstyle: PropTypes.object\n};\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport CheckboxInput from './main.js';\n\n\n// EXPORTS //\n\nexport default CheckboxInput;\n","// MODULES //\n\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\n\n\n// MAIN //\n\nfunction createTooltip({ min, max, step, t }) {\n\tlet tooltip = `${t('enter')} ${ step === 1 ? t('integer') : t('number')} `;\n\tif ( max !== PINF && min !== NINF ) {\n\t\ttooltip += `${t('between')} ${min} ${t('and')} ${max}`;\n\t} else if ( min !== NINF ) {\n\t\ttooltip += `${t('larger-or-equal-to')} ${min}`;\n\t} else if ( max !== PINF ) {\n\t\ttooltip += `${t('smaller-or-equal-to')} ${max}`;\n\t}\n\treturn tooltip;\n}\n\n\n// EXPORTS //\n\nexport default createTooltip;\n","// MODULES //\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport logger from 'debug';\nimport { useTranslation } from 'react-i18next';\nimport contains from '@stdlib/assert/contains';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isNull from '@stdlib/assert/is-null';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport NINF from '@stdlib/constants/float64/ninf';\nimport Tooltip from '@isle-project/components/tooltip';\nimport SessionContext from '@isle-project/session/context.js';\nimport generateUID from '@isle-project/utils/uid';\nimport createTooltip from './create_tooltip.js';\nimport './number.css';\n\n\n// VARIABLES //\n\nconst debug = logger( 'isle:number-input' );\nconst uid = generateUID( 'number-input' );\n\n\n// MAIN //\n\n/**\n* A number input component. Can be used as part of an ISLE dashboard or standalone. In the latter case, you want to handle changes via the `onChange` attribute or bind the value to a global variable via the `bind` attribute.\n*\n* @property {string} bind - name of global variable for the number to be assigned to\n* @property {number} value - number value (for controlled component)\n* @property {number} defaultValue - value indicating the default value of the input at startup\n* @property {boolean} disabled - boolean indicating whether the input is active or not\n* @property {number} min - number indicating the smallest possible value that may be inserted\n* @property {number} max - number indicating the maximum value that may be inserted\n* @property {(number|string)} step - number indicating the incremental changes when using the increment arrows\n* @property {boolean} inline - indicates whether the input is displayed inline\n* @property {string} legend - string indicating the text displayed next to the number input\n* @property {boolean} numbersOnly - controls whether only numbers are accepted\n* @property {string} tooltip - tooltip string (if not set, the tooltip is automatically generated)\n* @property {string} tooltipPlacement - direction of the tooltip\n* @property {Object} style - CSS inline styles\n* @property {Object} inputStyle - CSS inline styles for input element\n* @property {Function} onBlur - callback function to be invoked when using a blur method\n* @property {Function} onChange - callback function to be invoked when number input is changed\n* @property {Function} onKeyPress - callback function to be invoked when any key is entered\n* @property {Function} onKeyDown - callback function to be invoked when any key is pressed down\n* @property {Function} onKeyUp - callback function to be invoked when key is released\n*/\nconst NumberInput = ( props ) => {\n\tconst id = useRef( props.id || uid( props ) );\n\tconst { bind, defaultValue, min, max, step, value: propValue, onBlur, onChange } = props;\n\tconst { t } = useTranslation( 'input' );\n\tconst session = useContext( SessionContext );\n\tconst [ value, setValue ] = useState(\n\t\tpropValue || ( bind && session.state ?\n\t\t\tsession.state[ bind ]:\n\t\t\tdefaultValue ),\n\t);\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tconst globalValue = global.lesson.state[ bind ];\n\t\t\tif ( globalValue !== value && isNumber( value ) ) {\n\t\t\t\tsetValue( globalValue );\n\t\t\t}\n\t\t}\n\t}, [ bind, value ] );\n\tuseEffect( () => {\n\t\tsetValue( defaultValue );\n\t}, [ defaultValue ] );\n\tuseEffect( () => {\n\t\tif ( bind ) {\n\t\t\tsetValue( global.lesson.state[ bind ] );\n\t\t}\n\t}, [ bind ] );\n\n\tconst handleChange = useCallback( ( event ) => {\n\t\tdebug( 'Handle change of input field...' );\n\t\tlet valid = event.target.validity.valid;\n\t\tlet newValue = event.target.value;\n\t\tsetValue( newValue );\n\t\tif ( propValue ||\n\t\t\t( valid && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.' )\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t\tif ( isnan( newValue ) ) {\n\t\t\t\tnewValue = '';\n\t\t\t}\n\t\t\tonChange( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( bind ) {\n\t\t\tglobal.lesson.setState({\n\t\t\t\t[ bind ]: newValue\n\t\t\t});\n\t\t}\n\t}, [ bind, propValue, onChange ] );\n\tconst finishChange = useCallback( ( event ) => {\n\t\tdebug( 'Finished change...' );\n\t\tlet newValue = event.target.value;\n\t\tif ( contains( newValue, '/' ) ) {\n\t\t\tdebug( 'Encountered a fraction...' );\n\t\t\tconst splitted = newValue.split( '/' );\n\t\t\tif ( splitted[ 0 ] !== '' && splitted[ 1 ] !== '' ) {\n\t\t\t\tnewValue = parseFloat( splitted[ 0 ]) / parseFloat( splitted[ 1 ]);\n\t\t\t}\n\t\t}\n\t\tif ( isnan( newValue ) ) {\n\t\t\tnewValue = '';\n\t\t}\n\t\telse if (\n\t\t\tnewValue !== '' && newValue !== '-' &&\n\t\t\tnewValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = parseFloat( newValue );\n\t\t}\n\t\tif ( newValue > max ) {\n\t\t\tnewValue = max;\n\t\t}\n\t\telse if ( newValue < min ) {\n\t\t\tnewValue = min;\n\t\t}\n\t\telse if (\n\t\t\tstep === 1.0 && newValue !== '' &&\n\t\t\tnewValue !== '-' && newValue !== '.' && newValue !== '-.'\n\t\t) {\n\t\t\tnewValue = newValue - newValue % step;\n\t\t}\n\t\tonChange( newValue );\n\t\tonBlur( newValue );\n\t\tif ( newValue !== value ) {\n\t\t\tsetValue( newValue );\n\t\t\tif ( bind ) {\n\t\t\t\tglobal.lesson.setState({\n\t\t\t\t\t[ bind ]: newValue\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [ bind, min, max, step, value, onBlur, onChange ] );\n\tconst tooltip = isNull( props.tooltip ) ? createTooltip({\n\t\tmin, max, step, t\n\t}) : props.tooltip;\n\tif ( props.inline === true ) {\n\t\tconst input =\n\t\t\t<span className=\"input\" style={{ padding: '5px', ...props.style }}>\n\t\t\t\t{ props.legend ? <label htmlFor={id.current} > {props.legend} =  </label> : null }\n\t\t\t\t<input\n\t\t\t\t\tid={id.current}\n\t\t\t\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\t\t\t\tname=\"input\"\n\t\t\t\t\tclassName=\"number-number-input\"\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tvalue={propValue !== null ? propValue : value}\n\t\t\t\t\tstep={props.step}\n\t\t\t\t\tmin={props.min}\n\t\t\t\t\tmax={props.max}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '80px',\n\t\t\t\t\t\tpaddingLeft: '6px',\n\t\t\t\t\t\tmarginLeft: '3px',\n\t\t\t\t\t\t...props.inputStyle\n\t\t\t\t\t}}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\tonBlur={finishChange}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t/>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span>({props.description})</span> :\n\t\t\t\t\t<span />\n\t\t\t\t}\n\t\t\t</span>;\n\t\treturn props.disabled ?\n\t\t\tinput:\n\t\t\t<Tooltip id=\"number-input-tooltip-inline\" placement=\"top\" show={!props.disabled} tooltip={tooltip} >\n\t\t\t\t{input}\n\t\t\t</Tooltip>;\n\t}\n\tconst input = <input\n\t\tid={id.current}\n\t\ttype={props.numbersOnly ? 'number' : 'text'}\n\t\tname=\"input\"\n\t\tclassName=\"number-number-input\"\n\t\tdisabled={props.disabled}\n\t\tvalue={propValue !== null ? propValue : value}\n\t\tstep={props.step}\n\t\tmin={props.min}\n\t\tmax={props.max}\n\t\tstyle={{\n\t\t\twidth: '80px',\n\t\t\tmarginLeft: '24px',\n\t\t\t...props.inputStyle\n\t\t}}\n\t\tonChange={handleChange}\n\t\tonBlur={finishChange}\n\t\tonKeyPress={props.onKeyPress}\n\t\tonKeyDown={props.onKeyDown}\n\t\tonKeyUp={props.onKeyUp}\n\t\tautoComplete=\"off\"\n\t/>;\n\treturn ( <div className=\"input\" style={{\n\t\tmarginBottom: '4px',\n\t\tmarginTop: '4px',\n\t\t...props.style\n\t}}>\n\t\t{ props.legend ?\n\t\t\t<span>\n\t\t\t\t<label htmlFor={id.current} >\n\t\t\t\t\t{isString( props.legend ) ?\n\t\t\t\t\t\tprops.legend+':' :\n\t\t\t\t\t\tprops.legend\n\t\t\t\t\t}\n\t\t\t\t</label>\n\t\t\t\t{ props.description ?\n\t\t\t\t\t<span> {props.description}</span> :\n\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</span> : null\n\t\t}\n\t\t<Tooltip\n\t\t\tid=\"number-input-tooltip\" placement={props.tooltipPlacement}\n\t\t\ttooltip={tooltip} show={!props.disabled}\n\t\t><span className=\"number-input-span\" >{input}</span></Tooltip>\n\t</div> );\n};\n\n\n// PROPERTIES //\n\nNumberInput.defaultProps = {\n\tbind: '',\n\tdisabled: false,\n\tlegend: null,\n\tmin: NINF,\n\tmax: PINF,\n\tstep: 1,\n\tdefaultValue: 0,\n\tonBlur() {},\n\tonChange() {},\n\tonKeyDown() {},\n\tonKeyPress() {},\n\tonKeyUp() {},\n\tinline: false,\n\tnumbersOnly: true,\n\tstyle: {},\n\tinputStyle: {},\n\tvalue: null,\n\ttooltip: null,\n\ttooltipPlacement: 'left'\n};\n\nNumberInput.propTypes = {\n\tbind: PropTypes.string,\n\tdefaultValue: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\tinline: PropTypes.bool,\n\tlegend: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.node\n\t]),\n\tmax: PropTypes.number,\n\tmin: PropTypes.number,\n\tnumbersOnly: PropTypes.bool,\n\tonBlur: PropTypes.func,\n\tonChange: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tstep: PropTypes.oneOfType([\n\t\tPropTypes.number,\n\t\tPropTypes.string\n\t]),\n\tstyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tvalue: PropTypes.number,\n\ttooltip: PropTypes.string,\n\ttooltipPlacement: PropTypes.oneOf([ 'top', 'right', 'bottom', 'left' ])\n};\n\n\n// EXPORTS //\n\nexport default NumberInput;\n","// MODULES //\n\nimport NumberInput from './main';\nimport CreateTooltip from './create_tooltip.js';\n\n\n// EXPORTS //\n\nexport const createTooltip = CreateTooltip;\nexport default NumberInput;\n"],"names":["Dashboard","Loadable","KMeansMenu","props","quantitative","t","title","content","autoStart","onGenerate","variables","K","attach","initialization","output","data","onResult","result","newData","copy","newCategorical","categorical","slice","suffix","map","x","join","name","factor","incrspace","clusters","contains","push","logAction","DATA_EXPLORER_KMEANS","onCreated","legend","multi","options","closeMenuOnSelect","min","defaultValue","defaultProps","popover","id","trigger","placement","rootClose","overlay","size","variant","className","uid","generateUID","CheckboxInput","bind","disabled","onChange","useRef","session","useContext","SessionContext","useState","state","value","setValue","useEffect","global","lesson","globalValue","updateValue","useCallback","newValue","setState","handleChange","event","target","checked","handleSpanChange","input","type","tooltip","inline","tooltipPlacement","current","style","marginLeft","role","tabIndex","color","onClick","onKeyPress","onSpanChange","noop","max","step","PINF","NINF","debug","logger","NumberInput","propValue","onBlur","useTranslation","isNumber","valid","validity","parseFloat","isnan","finishChange","splitted","split","isNull","createTooltip","padding","htmlFor","numbersOnly","width","paddingLeft","inputStyle","onKeyDown","onKeyUp","autoComplete","description","show","marginBottom","marginTop","isString"],"sourceRoot":""}