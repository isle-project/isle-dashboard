"use strict";const axios=require("axios"),glob=require("glob"),fs=require("fs"),path=require("path"),qs=require("qs"),replace=require("@stdlib/string/replace"),readJSON=require("@stdlib/fs/read-json"),objectKeys=require("@stdlib/utils/keys"),ENV=require("@stdlib/process/env"),LANGUAGE_TARGETS=["bg","cs","da","de","el","es","et","fi","fr","hu","it","ja","lt","lv","nl","pl","pt","ro","ru","sk","sl","sv","zh"],deepl={server:"https://api.deepl.com/v2/translate",auth_key:ENV.DEEPL_KEY},MAX_TRANSLATION_CALLS=5,TOPLEVEL_DIR=path.resolve(__dirname,"..","..",".."),RE_HANDLEBAR_EXPRESSION=/\{\{([^}]+)\}\}/g,RE_XML_GROUPS=/<x>([^<]+)<\/x>/g,options={cwd:TOPLEVEL_DIR};glob("public/locales/en/*.json",options,function(err,files){for(let i=0;i<files.length;i++){const file=path.resolve(TOPLEVEL_DIR,files[i]),reference=readJSON.sync(file),refKeys=objectKeys(reference),sortedReference={};for(let i2=0;i2<refKeys.length;i2++){const key=refKeys[i2];sortedReference[key]=reference[key]}fs.writeFileSync(file,JSON.stringify(sortedReference,null,"	").concat(`
`));for(let j=0;j<LANGUAGE_TARGETS.length;j++){const lng=LANGUAGE_TARGETS[j],filePath=file.replace("en",lng);fs.existsSync(filePath)||fs.writeFileSync(filePath,JSON.stringify({}));const targetJSON=readJSON.sync(filePath),promises=[],promiseKeys=[];for(let k=0;k<refKeys.length;k++){const key=refKeys[k];if(!targetJSON[key]){let textToTranslate=reference[key];textToTranslate=replace(textToTranslate,RE_HANDLEBAR_EXPRESSION,"<x>$1</x>"),console.log("Translate `"+textToTranslate+"` to "+lng),promises.length<MAX_TRANSLATION_CALLS&&(promiseKeys.push(key),promises.push(axios.post(deepl.server,qs.stringify({auth_key:deepl.auth_key,source_lang:"EN",text:textToTranslate,tag_handling:"xml",ignore_tags:"x",target_lang:lng==="pt"?"PT-BR":lng.toUpperCase()}))))}}Promise.all(promises).then(results=>{const translations=results.map(x=>x.data.translations[0].text);for(let i2=0;i2<promiseKeys.length;i2++){const key=promiseKeys[i2],text=replace(translations[i2],RE_XML_GROUPS,"{{$1}}");targetJSON[key]=text}refKeys.sort((a,b)=>a.localeCompare(b));const out={};for(let i2=0;i2<refKeys.length;i2++){const key=refKeys[i2];out[key]=targetJSON[key]}fs.writeFileSync(filePath,JSON.stringify(out,null,"	").concat(`
`))}).catch(err2=>{console.error(err2)})}}});

//# sourceMappingURL=translate.js.map