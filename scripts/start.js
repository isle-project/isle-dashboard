/**
* MIT License
*
* Copyright (c) 2013-present, Facebook, Inc.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
	throw err;
});

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
	choosePort,
	createCompiler,
	prepareProxy,
	prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
	process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

if ( process.env.HOST ) {
	console.log(
		chalk.cyan(
			`Attempting to bind to HOST environment variable: ${chalk.yellow(
				chalk.bold( process.env.HOST )
			)}`
		)
	);
	console.log(
		`If this was unintentional, check that you haven't mistakenly set it in your shell.`
	);
	console.log(
		`Learn more here: ${chalk.yellow('http://bit.ly/CRA-advanced-config')}`
	);
	console.log();
}

process.on( 'uncaughtException', function onError( err ) {
	console.error( 'Encountered an error: '+err.message );
	console.log( 'Stack:' );
	console.error( err.stack );
	console.log( 'Reset connection...' );
});

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('react-dev-utils/browsersHelper');
checkBrowsers(paths.appPath, isInteractive)
	.then(() => {
		// We attempt to use the default port but if it is busy, we offer the user to
		// run on a different port. `choosePort()` Promise resolves to the next free port.
		return choosePort(HOST, DEFAULT_PORT);
	})
	.then(port => {
		if ( port == null ) {
			// We have not found a port.
			return;
		}
		const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
		const appName = require(paths.appPackageJson).name;
		const urls = prepareUrls(protocol, HOST, port);
		// Create a webpack compiler that is configured with custom messages.
		const compiler = createCompiler({ webpack, config, appName, urls, useYarn });
		// Load proxy config
		const proxySetting = require(paths.appPackageJson).proxy;
		const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
		// Serve webpack assets generated by the compiler over a web server.
		const serverConfig = createDevServerConfig(
			proxyConfig,
			urls.lanUrlForConfig
		);
		serverConfig.port = port;
		const devServer = new WebpackDevServer( serverConfig, compiler );
		// Launch WebpackDevServer.
		devServer.startCallback( err => {
			if ( err ) {
				return console.log( err );
			}
			if ( isInteractive ) {
				clearConsole();
			}
			console.log( chalk.cyan('Starting the development server...\n') );
			openBrowser( urls.localUrlForBrowser );
		});

		['SIGINT', 'SIGTERM'].forEach(function(sig) {
			process.on(sig, function() {
				devServer.close();
				process.exit();
			});
		});
	})
	.catch( err => {
		if ( err && err.message ) {
			console.log( err.message );
		}
		process.exit( 1 );
	});


